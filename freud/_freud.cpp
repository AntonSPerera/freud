/* Generated by Cython 0.28.4 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/Users/vramasub/miniconda3/envs/test36/lib/python3.6/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/Users/vramasub/miniconda3/envs/test36/lib/python3.6/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "cpp/box/box.cc",
            "cpp/box/box.h",
            "cpp/cluster/Cluster.cc",
            "cpp/cluster/Cluster.h",
            "cpp/cluster/ClusterProperties.cc",
            "cpp/cluster/ClusterProperties.h",
            "cpp/environment/AngularSeparation.cc",
            "cpp/environment/AngularSeparation.h",
            "cpp/environment/BondOrder.cc",
            "cpp/environment/BondOrder.h",
            "cpp/environment/LocalDescriptors.cc",
            "cpp/environment/LocalDescriptors.h",
            "cpp/environment/MatchEnv.cc",
            "cpp/environment/MatchEnv.h",
            "cpp/environment/Pairing2D.cc",
            "cpp/environment/Pairing2D.h",
            "cpp/locality/LinkCell.cc",
            "cpp/locality/LinkCell.h",
            "cpp/locality/NearestNeighbors.cc",
            "cpp/locality/NearestNeighbors.h",
            "cpp/locality/NeighborList.cc",
            "cpp/locality/NeighborList.h",
            "cpp/order/CubaticOrderParameter.cc",
            "cpp/order/CubaticOrderParameter.h",
            "cpp/order/HexOrderParameter.cc",
            "cpp/order/HexOrderParameter.h",
            "cpp/order/LocalQl.cc",
            "cpp/order/LocalQl.h",
            "cpp/order/LocalWl.cc",
            "cpp/order/LocalWl.h",
            "cpp/order/NematicOrderParameter.cc",
            "cpp/order/NematicOrderParameter.h",
            "cpp/order/SolLiq.cc",
            "cpp/order/SolLiq.h",
            "cpp/order/TransOrderParameter.cc",
            "cpp/order/TransOrderParameter.h",
            "cpp/util/Index1D.h",
            "cpp/util/VectorMath.h"
        ],
        "extra_compile_args": [
            "-std=c++11"
        ],
        "extra_link_args": [
            "-std=c++11"
        ],
        "include_dirs": [
            "/Users/vramasub/miniconda3/envs/test36/lib/python3.6/site-packages/numpy/core/include",
            "extern",
            "cpp/box",
            "cpp/bond",
            "cpp/util",
            "cpp/locality",
            "cpp/cluster",
            "cpp/density",
            "cpp/voronoi",
            "cpp/kspace",
            "cpp/order",
            "cpp/environment",
            "cpp/interface",
            "cpp/pmft",
            "cpp/parallel",
            "cpp/registration"
        ],
        "language": "c++",
        "libraries": [
            "tbb"
        ],
        "name": "freud._freud",
        "sources": [
            "freud/_freud.pyx",
            "cpp/util/HOOMDMatrix.cc",
            "cpp/order/wigner3j.cc"
        ]
    },
    "module_name": "freud._freud"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_4"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__freud___freud
#define __PYX_HAVE_API__freud___freud
/* Early includes */
#include "VectorMath.h"
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include "box.cc"
#include "box.h"
#include "Index1D.h"
#include <memory>
#include <vector>
#include "NeighborList.cc"
#include "NeighborList.h"
#include "LinkCell.cc"
#include "LinkCell.h"
#include "NearestNeighbors.cc"
#include "NearestNeighbors.h"
#include <complex>
#include <utility>
#include <map>
#include "CubaticOrderParameter.cc"
#include "CubaticOrderParameter.h"
#include "NematicOrderParameter.cc"
#include "NematicOrderParameter.h"
#include "HexOrderParameter.cc"
#include "HexOrderParameter.h"
#include "TransOrderParameter.cc"
#include "TransOrderParameter.h"
#include "LocalQl.cc"
#include "LocalQl.h"
#include "LocalWl.cc"
#include "LocalWl.h"
#include "SolLiq.cc"
#include "SolLiq.h"
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "BondOrder.cc"
#include "BondOrder.h"
#include "LocalDescriptors.cc"
#include "LocalDescriptors.h"
#include "MatchEnv.cc"
#include "MatchEnv.h"
#include "Pairing2D.cc"
#include "Pairing2D.h"
#include "AngularSeparation.cc"
#include "AngularSeparation.h"
#include <stdint.h>
#include "Cluster.cc"
#include "Cluster.h"
#include "ClusterProperties.cc"
#include "ClusterProperties.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "freud/order.pxi",
  "freud/environment.pxi",
  "stringsource",
  "freud/cluster.pxi",
  "__init__.pxd",
  "freud/_freud.pyx",
  "freud/box.pxd",
  "freud/locality.pxd",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":730
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":744
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":745
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":767
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_5freud_3box_Box;
struct __pyx_obj_5freud_8locality_NeighborList;
struct __pyx_obj_5freud_8locality_IteratorLinkCell;
struct __pyx_obj_5freud_8locality_LinkCell;
struct __pyx_obj_5freud_8locality_NearestNeighbors;
struct __pyx_obj_5freud_6_freud_CubaticOrderParameter;
struct __pyx_obj_5freud_6_freud_NematicOrderParameter;
struct __pyx_obj_5freud_6_freud_HexOrderParameter;
struct __pyx_obj_5freud_6_freud_TransOrderParameter;
struct __pyx_obj_5freud_6_freud_LocalQl;
struct __pyx_obj_5freud_6_freud_LocalQlNear;
struct __pyx_obj_5freud_6_freud_LocalWl;
struct __pyx_obj_5freud_6_freud_LocalWlNear;
struct __pyx_obj_5freud_6_freud_SolLiq;
struct __pyx_obj_5freud_6_freud_SolLiqNear;
struct __pyx_obj_5freud_6_freud_BondOrder;
struct __pyx_obj_5freud_6_freud_LocalDescriptors;
struct __pyx_obj_5freud_6_freud_MatchEnv;
struct __pyx_obj_5freud_6_freud_Pairing2D;
struct __pyx_obj_5freud_6_freud_AngularSeparation;
struct __pyx_obj_5freud_6_freud_Cluster;
struct __pyx_obj_5freud_6_freud_ClusterProperties;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":773
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "box.pxd":6
 * from . cimport _box
 * 
 * cdef class Box:             # <<<<<<<<<<<<<<
 *     cdef _box.Box * thisptr
 * 
 */
struct __pyx_obj_5freud_3box_Box {
  PyObject_HEAD
  freud::box::Box *thisptr;
};


/* "locality.pxd":6
 * from . cimport _locality
 * 
 * cdef class NeighborList:             # <<<<<<<<<<<<<<
 *     cdef _locality.NeighborList * thisptr
 *     cdef char _managed
 */
struct __pyx_obj_5freud_8locality_NeighborList {
  PyObject_HEAD
  struct __pyx_vtabstruct_5freud_8locality_NeighborList *__pyx_vtab;
  freud::locality::NeighborList *thisptr;
  char _managed;
  PyObject *base;
};


/* "locality.pxd":15
 *     cdef void copy_c(self, NeighborList other)
 * 
 * cdef class IteratorLinkCell:             # <<<<<<<<<<<<<<
 *     cdef _locality.IteratorLinkCell * thisptr
 * 
 */
struct __pyx_obj_5freud_8locality_IteratorLinkCell {
  PyObject_HEAD
  struct __pyx_vtabstruct_5freud_8locality_IteratorLinkCell *__pyx_vtab;
  freud::locality::IteratorLinkCell *thisptr;
};


/* "locality.pxd":20
 *     cdef void copy(self, const _locality.IteratorLinkCell & rhs)
 * 
 * cdef class LinkCell:             # <<<<<<<<<<<<<<
 *     cdef _locality.LinkCell * thisptr
 *     cdef NeighborList _nlist
 */
struct __pyx_obj_5freud_8locality_LinkCell {
  PyObject_HEAD
  freud::locality::LinkCell *thisptr;
  struct __pyx_obj_5freud_8locality_NeighborList *_nlist;
};


/* "locality.pxd":24
 *     cdef NeighborList _nlist
 * 
 * cdef class NearestNeighbors:             # <<<<<<<<<<<<<<
 *     cdef _locality.NearestNeighbors * thisptr
 *     cdef NeighborList _nlist
 */
struct __pyx_obj_5freud_8locality_NearestNeighbors {
  PyObject_HEAD
  freud::locality::NearestNeighbors *thisptr;
  struct __pyx_obj_5freud_8locality_NeighborList *_nlist;
  PyObject *_cached_points;
  PyObject *_cached_ref_points;
  PyObject *_cached_box;
};


/* "freud/order.pxi":22
 * np.import_array()
 * 
 * cdef class CubaticOrderParameter:             # <<<<<<<<<<<<<<
 *     """Compute the cubatic order parameter [HajiAkbari2015]_ for a system of
 *     particles using simulated annealing instead of Newton-Raphson root finding.
 */
struct __pyx_obj_5freud_6_freud_CubaticOrderParameter {
  PyObject_HEAD
  freud::order::CubaticOrderParameter *thisptr;
};


/* "freud/order.pxi":228
 * 
 * 
 * cdef class NematicOrderParameter:             # <<<<<<<<<<<<<<
 *     """Compute the nematic order parameter for a system of particles.
 * 
 */
struct __pyx_obj_5freud_6_freud_NematicOrderParameter {
  PyObject_HEAD
  freud::order::NematicOrderParameter *thisptr;
};


/* "freud/order.pxi":327
 *         return result
 * 
 * cdef class HexOrderParameter:             # <<<<<<<<<<<<<<
 *     """Calculates the :math:`k`-atic order parameter for each particle in the
 *     system.
 */
struct __pyx_obj_5freud_6_freud_HexOrderParameter {
  PyObject_HEAD
  freud::order::HexOrderParameter *thisptr;
  PyObject *num_neigh;
  PyObject *rmax;
};


/* "freud/order.pxi":470
 *         return k
 * 
 * cdef class TransOrderParameter:             # <<<<<<<<<<<<<<
 *     """Compute the translational order parameter for each particle.
 * 
 */
struct __pyx_obj_5freud_6_freud_TransOrderParameter {
  PyObject_HEAD
  freud::order::TransOrderParameter *thisptr;
  PyObject *num_neigh;
  PyObject *rmax;
};


/* "freud/order.pxi":580
 *         return np
 * 
 * cdef class LocalQl:             # <<<<<<<<<<<<<<
 *     """
 *     Compute the local Steinhardt [Steinhardt1983]_ rotationally invariant
 */
struct __pyx_obj_5freud_6_freud_LocalQl {
  PyObject_HEAD
  freud::order::LocalQl *qlptr;
  PyObject *m_box;
  PyObject *rmax;
};


/* "freud/order.pxi":886
 *         return self
 * 
 * cdef class LocalQlNear(LocalQl):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the local Steinhardt [Steinhardt1983]_ rotationally invariant
 */
struct __pyx_obj_5freud_6_freud_LocalQlNear {
  struct __pyx_obj_5freud_6_freud_LocalQl __pyx_base;
  PyObject *num_neigh;
};


/* "freud/order.pxi":1017
 *         return super(LocalQlNear, self).computeAveNorm(points, nlist_)
 * 
 * cdef class LocalWl(LocalQl):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the local Steinhardt [Steinhardt1983]_ rotationally invariant
 */
struct __pyx_obj_5freud_6_freud_LocalWl {
  struct __pyx_obj_5freud_6_freud_LocalQl __pyx_base;
  freud::order::LocalWl *thisptr;
};


/* "freud/order.pxi":1204
 *         return result
 * 
 * cdef class LocalWlNear(LocalWl):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the local Steinhardt [Steinhardt1983]_ rotationally invariant
 */
struct __pyx_obj_5freud_6_freud_LocalWlNear {
  struct __pyx_obj_5freud_6_freud_LocalWl __pyx_base;
  PyObject *num_neigh;
};


/* "freud/order.pxi":1338
 *         return super(LocalWlNear, self).computeAveNorm(points, nlist_)
 * 
 * cdef class SolLiq:             # <<<<<<<<<<<<<<
 *     """
 *     Computes dot products of :math:`Q_{lm}` between particles and uses these
 */
struct __pyx_obj_5freud_6_freud_SolLiq {
  PyObject_HEAD
  freud::order::SolLiq *thisptr;
  PyObject *m_box;
  PyObject *rmax;
};


/* "freud/order.pxi":1653
 *         return np
 * 
 * cdef class SolLiqNear(SolLiq):             # <<<<<<<<<<<<<<
 *     """
 *     Computes dot products of :math:`Q_{lm}` between particles and uses these
 */
struct __pyx_obj_5freud_6_freud_SolLiqNear {
  struct __pyx_obj_5freud_6_freud_SolLiq __pyx_base;
  PyObject *num_neigh;
};


/* "freud/environment.pxi":24
 * np.import_array()
 * 
 * cdef class BondOrder:             # <<<<<<<<<<<<<<
 *     """
 *     Compute the bond order diagram for the system of particles.
 */
struct __pyx_obj_5freud_6_freud_BondOrder {
  PyObject_HEAD
  freud::environment::BondOrder *thisptr;
  PyObject *num_neigh;
  PyObject *rmax;
};


/* "freud/environment.pxi":324
 *         return np
 * 
 * cdef class LocalDescriptors:             # <<<<<<<<<<<<<<
 *     """Compute a set of descriptors (a numerical "fingerprint") of a particle's
 *     local environment.
 */
struct __pyx_obj_5freud_6_freud_LocalDescriptors {
  PyObject_HEAD
  freud::environment::LocalDescriptors *thisptr;
  PyObject *num_neigh;
  PyObject *rmax;
};


/* "freud/environment.pxi":592
 *         return r
 * 
 * cdef class MatchEnv:             # <<<<<<<<<<<<<<
 *     """Clusters particles according to whether their local environments match
 *     or not, according to various shape matching metrics.
 */
struct __pyx_obj_5freud_6_freud_MatchEnv {
  PyObject_HEAD
  freud::environment::MatchEnv *thisptr;
  PyObject *rmax;
  PyObject *num_neigh;
  PyObject *m_box;
};


/* "freud/environment.pxi":1032
 *         return num_clust
 * 
 * cdef class Pairing2D:             # <<<<<<<<<<<<<<
 *     """
 *     Compute pairs for the system of particles.
 */
struct __pyx_obj_5freud_6_freud_Pairing2D {
  PyObject_HEAD
  freud::environment::Pairing2D *thisptr;
  PyObject *rmax;
  PyObject *num_neigh;
};


/* "freud/environment.pxi":1171
 *         return BoxFromCPP(< _box.Box > self.thisptr.getBox())
 * 
 * cdef class AngularSeparation:             # <<<<<<<<<<<<<<
 *     """Calculates the minimum angles of separation between particles and
 *     references.
 */
struct __pyx_obj_5freud_6_freud_AngularSeparation {
  PyObject_HEAD
  freud::environment::AngularSeparation *thisptr;
  PyObject *num_neigh;
  PyObject *rmax;
  PyObject *nlist_;
};


/* "freud/cluster.pxi":17
 * np.import_array()
 * 
 * cdef class Cluster:             # <<<<<<<<<<<<<<
 *     """Finds clusters in a set of points.
 * 
 */
struct __pyx_obj_5freud_6_freud_Cluster {
  PyObject_HEAD
  freud::cluster::Cluster *thisptr;
  PyObject *m_box;
  PyObject *rmax;
};


/* "freud/cluster.pxi":205
 * 
 * 
 * cdef class ClusterProperties:             # <<<<<<<<<<<<<<
 *     """Routines for computing properties of point clusters.
 * 
 */
struct __pyx_obj_5freud_6_freud_ClusterProperties {
  PyObject_HEAD
  freud::cluster::ClusterProperties *thisptr;
  PyObject *m_box;
};



/* "locality.pxd":6
 * from . cimport _locality
 * 
 * cdef class NeighborList:             # <<<<<<<<<<<<<<
 *     cdef _locality.NeighborList * thisptr
 *     cdef char _managed
 */

struct __pyx_vtabstruct_5freud_8locality_NeighborList {
  PyObject *(*refer_to)(struct __pyx_obj_5freud_8locality_NeighborList *, freud::locality::NeighborList *);
  freud::locality::NeighborList *(*get_ptr)(struct __pyx_obj_5freud_8locality_NeighborList *);
  void (*copy_c)(struct __pyx_obj_5freud_8locality_NeighborList *, struct __pyx_obj_5freud_8locality_NeighborList *);
};
static struct __pyx_vtabstruct_5freud_8locality_NeighborList *__pyx_vtabptr_5freud_8locality_NeighborList;


/* "locality.pxd":15
 *     cdef void copy_c(self, NeighborList other)
 * 
 * cdef class IteratorLinkCell:             # <<<<<<<<<<<<<<
 *     cdef _locality.IteratorLinkCell * thisptr
 * 
 */

struct __pyx_vtabstruct_5freud_8locality_IteratorLinkCell {
  void (*copy)(struct __pyx_obj_5freud_8locality_IteratorLinkCell *, freud::locality::IteratorLinkCell const &);
};
static struct __pyx_vtabstruct_5freud_8locality_IteratorLinkCell *__pyx_vtabptr_5freud_8locality_IteratorLinkCell;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_freud_3a__3a_environment_3a__3a_LocalDescriptorOrientation(freud::environment::LocalDescriptorOrientation value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE freud::environment::LocalDescriptorOrientation __Pyx_PyInt_As_freud_3a__3a_environment_3a__3a_LocalDescriptorOrientation(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'freud.util._VectorMath' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'freud._box' */

/* Module declarations from 'freud.util._Index1D' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'freud._locality' */

/* Module declarations from 'libcpp.complex' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'freud._order' */

/* Module declarations from 'freud._environment' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'freud._cluster' */

/* Module declarations from 'freud' */

/* Module declarations from 'freud.box' */
static PyTypeObject *__pyx_ptype_5freud_3box_Box = 0;
static PyObject *(*__pyx_f_5freud_3box_BoxFromCPP)(freud::box::Box const &); /*proto*/

/* Module declarations from 'freud.locality' */
static PyTypeObject *__pyx_ptype_5freud_8locality_NeighborList = 0;
static PyTypeObject *__pyx_ptype_5freud_8locality_IteratorLinkCell = 0;
static PyTypeObject *__pyx_ptype_5freud_8locality_LinkCell = 0;
static PyTypeObject *__pyx_ptype_5freud_8locality_NearestNeighbors = 0;

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/

/* Module declarations from 'freud._freud' */
static PyTypeObject *__pyx_ptype_5freud_6_freud_CubaticOrderParameter = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_NematicOrderParameter = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_HexOrderParameter = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_TransOrderParameter = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_LocalQl = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_LocalQlNear = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_LocalWl = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_LocalWlNear = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_SolLiq = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_SolLiqNear = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_BondOrder = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_LocalDescriptors = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_MatchEnv = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_Pairing2D = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_AngularSeparation = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_Cluster = 0;
static PyTypeObject *__pyx_ptype_5freud_6_freud_ClusterProperties = 0;
static PyObject *__pyx_convert_vector_to_py_float(const std::vector<float>  &); /*proto*/
static PyObject *__pyx_convert_map_to_py_unsigned_int____unsigned_int(std::map<unsigned int,unsigned int>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_unsigned_int(const std::vector<unsigned int>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_unsigned_int_3e___(const std::vector<std::vector<unsigned int> >  &); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_float = { "float", NULL, sizeof(float), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t = { "float32_t", NULL, sizeof(__pyx_t_5numpy_float32_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo___pyx_t_float_complex = { "float complex", NULL, sizeof(__pyx_t_float_complex), { 0 }, 0, 'C', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t = { "uint32_t", NULL, sizeof(__pyx_t_5numpy_uint32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_uint32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_uint32_t), 0 };
#define __Pyx_MODULE_NAME "freud._freud"
extern int __pyx_module_is_main_freud___freud;
int __pyx_module_is_main_freud___freud = 0;

/* Implementation of 'freud._freud' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_Ql[] = "Ql";
static const char __pyx_k_kn[] = "kn";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_bod[] = "bod";
static const char __pyx_k_box[] = "box";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_eye[] = "eye";
static const char __pyx_k_ors[] = "ors";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_getK[] = "getK";
static const char __pyx_k_is2D[] = "is2D";
static const char __pyx_k_lbod[] = "lbod";
static const char __pyx_k_lmax[] = "lmax";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_obcd[] = "obcd";
static const char __pyx_k_oocd[] = "oocd";
static const char __pyx_k_rcut[] = "rcut";
static const char __pyx_k_rmax[] = "rmax";
static const char __pyx_k_rmin[] = "rmin";
static const char __pyx_k_seed[] = "seed";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_freud[] = "freud";
static const char __pyx_k_getDr[] = "getDr";
static const char __pyx_k_getLx[] = "getLx";
static const char __pyx_k_getLy[] = "getLy";
static const char __pyx_k_getLz[] = "getLz";
static const char __pyx_k_getNP[] = "getNP";
static const char __pyx_k_getQl[] = "getQl";
static const char __pyx_k_getWl[] = "getWl";
static const char __pyx_k_nlist[] = "nlist";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_ave_Ql[] = "ave_Ql";
static const char __pyx_k_common[] = "common";
static const char __pyx_k_einsum[] = "einsum";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_getBox[] = "getBox";
static const char __pyx_k_getPhi[] = "getPhi";
static const char __pyx_k_getPsi[] = "getPsi";
static const char __pyx_k_getSph[] = "getSph";
static const char __pyx_k_global[] = "global";
static const char __pyx_k_hard_r[] = "hard_r";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_setBox[] = "setBox";
static const char __pyx_k_uint32[] = "uint32";
static const char __pyx_k_compute[] = "compute";
static const char __pyx_k_flatten[] = "flatten";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_getLMax[] = "getLMax";
static const char __pyx_k_getPair[] = "getPair";
static const char __pyx_k_getQlmi[] = "getQlmi";
static const char __pyx_k_getRMax[] = "getRMax";
static const char __pyx_k_norm_Ql[] = "norm_Ql";
static const char __pyx_k_ref_ors[] = "ref_ors";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_t_final[] = "t_final";
static const char __pyx_k_delattrs[] = "delattrs";
static const char __pyx_k_getAveQl[] = "getAveQl";
static const char __pyx_k_getAveWl[] = "getAveWl";
static const char __pyx_k_getMatch[] = "getMatch";
static const char __pyx_k_getNSphs[] = "getNSphs";
static const char __pyx_k_getTheta[] = "getTheta";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_locality[] = "locality";
static const char __pyx_k_n_bins_p[] = "n_bins_p";
static const char __pyx_k_n_bins_t[] = "n_bins_t";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_env_nlist[] = "env_nlist";
static const char __pyx_k_getQlNorm[] = "getQlNorm";
static const char __pyx_k_getWlNorm[] = "getWlNorm";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_refPoints[] = "refPoints";
static const char __pyx_k_t_initial[] = "t_initial";
static const char __pyx_k_threshold[] = "threshold";
static const char __pyx_k_Qthreshold[] = "Qthreshold";
static const char __pyx_k_Sthreshold[] = "Sthreshold";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_accumulate[] = "accumulate";
static const char __pyx_k_array_name[] = "array_name";
static const char __pyx_k_compDotTol[] = "compDotTol";
static const char __pyx_k_computeAve[] = "computeAve";
static const char __pyx_k_contiguous[] = "contiguous";
static const char __pyx_k_getNGlobal[] = "getNGlobal";
static const char __pyx_k_global_ors[] = "global_ors";
static const char __pyx_k_ij_kl_ijkl[] = "ij,kl->ijkl";
static const char __pyx_k_ik_jl_ijkl[] = "ik,jl->ijkl";
static const char __pyx_k_il_jk_ijkl[] = "il,jk->ijkl";
static const char __pyx_k_negative_m[] = "negative_m";
static const char __pyx_k_points_ref[] = "points_ref";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_refPoints1[] = "refPoints1";
static const char __pyx_k_refPoints2[] = "refPoints2";
static const char __pyx_k_ref_points[] = "ref_points";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_ave_norm_Ql[] = "ave_norm_Ql";
static const char __pyx_k_cluster_idx[] = "cluster_idx";
static const char __pyx_k_computeNorm[] = "computeNorm";
static const char __pyx_k_convert_box[] = "convert_box";
static const char __pyx_k_equiv_quats[] = "equiv_quats";
static const char __pyx_k_getClusterG[] = "getClusterG";
static const char __pyx_k_getClusters[] = "getClusters";
static const char __pyx_k_getNBinsPhi[] = "getNBinsPhi";
static const char __pyx_k_known_modes[] = "known_modes";
static const char __pyx_k_precomputed[] = "precomputed";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_freud_common[] = "freud.common";
static const char __pyx_k_getBondOrder[] = "getBondOrder";
static const char __pyx_k_getQlAveNorm[] = "getQlAveNorm";
static const char __pyx_k_getWlAveNorm[] = "getWlAveNorm";
static const char __pyx_k_getattribute[] = "__getattribute__";
static const char __pyx_k_n_replicates[] = "n_replicates";
static const char __pyx_k_neighborhood[] = "neighborhood";
static const char __pyx_k_orientations[] = "orientations";
static const char __pyx_k_registration[] = "registration";
static const char __pyx_k_convert_array[] = "convert_array";
static const char __pyx_k_getClusterCOM[] = "getClusterCOM";
static const char __pyx_k_getClusterIdx[] = "getClusterIdx";
static const char __pyx_k_getNBinsTheta[] = "getNBinsTheta";
static const char __pyx_k_getNReference[] = "getNReference";
static const char __pyx_k_global_search[] = "global_search";
static const char __pyx_k_num_neighbors[] = "num_neighbors";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_computeAveNorm[] = "computeAveNorm";
static const char __pyx_k_getClusterKeys[] = "getClusterKeys";
static const char __pyx_k_getNumClusters[] = "getNumClusters";
static const char __pyx_k_particle_local[] = "particle_local";
static const char __pyx_k_getClusterSizes[] = "getClusterSizes";
static const char __pyx_k_getNumParticles[] = "getNumParticles";
static const char __pyx_k_getTiltFactorXY[] = "getTiltFactorXY";
static const char __pyx_k_getTiltFactorXZ[] = "getTiltFactorXZ";
static const char __pyx_k_getTiltFactorYZ[] = "getTiltFactorYZ";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_compOrientations[] = "compOrientations";
static const char __pyx_k_ref_orientations[] = "ref_orientations";
static const char __pyx_k_ascontiguousarray[] = "ascontiguousarray";
static const char __pyx_k_getTotEnvironment[] = "getTotEnvironment";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_make_default_nlist[] = "make_default_nlist";
static const char __pyx_k_computeSolLiqNoNorm[] = "computeSolLiqNoNorm";
static const char __pyx_k_computeSolLiqVariant[] = "computeSolLiqVariant";
static const char __pyx_k_getLargestClusterSize[] = "getLargestClusterSize";
static const char __pyx_k_make_default_nlist_nn[] = "make_default_nlist_nn";
static const char __pyx_k_getNumberOfConnections[] = "getNumberOfConnections";
static const char __pyx_k_FreudDeprecationWarning[] = "FreudDeprecationWarning";
static const char __pyx_k_scale_must_be_less_than_1[] = "scale must be less than 1";
static const char __pyx_k_ors_should_be_an_Nx4_array[] = "ors should be an Nx4 array";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_points_should_be_an_Nx3_array[] = "points should be an Nx3 array";
static const char __pyx_k_ref_ors_should_be_an_Nx4_array[] = "ref_ors should be an Nx4 array";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_orientations_must_have_the_same[] = "orientations must have the same size as points_ref";
static const char __pyx_k_supplied_seed_could_not_be_used[] = "supplied seed could not be used. using time as seed";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Need_a_list_of_3D_points_for_com[] = "Need a list of 3D points for computeClusters()";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_Orientations_must_be_given_to_or[] = "Orientations must be given to orient LocalDescriptors with particles' orientations";
static const char __pyx_k_The_number_of_vectors_in_refPoin[] = "The number of vectors in refPoints1 must MATCH the number ofvectors in refPoints2";
static const char __pyx_k_This_class_is_deprecated_use_fre[] = "This class is deprecated, use freud.bond instead!";
static const char __pyx_k_Unknown_BOD_mode_Options_are_bod[] = "Unknown BOD mode: {}. Options are:bod, lbod, obcd, oocd.";
static const char __pyx_k_Unknown_LocalDescriptors_orienta[] = "Unknown LocalDescriptors orientation mode: {}";
static const char __pyx_k_cluster_idx_must_be_a_1D_array_o[] = "cluster_idx must be a 1D array of matching length/numberof particles to points";
static const char __pyx_k_equiv_quats_should_be_an_N_equiv[] = "equiv_quats should be an N_equiv x 4 array";
static const char __pyx_k_global_ors_should_be_an_Nx4_arra[] = "global_ors should be an Nx4 array";
static const char __pyx_k_keys_must_be_a_1D_array_of_lengt[] = "keys must be a 1D array of length NumParticles";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_orientations_should_be_an_Nx4_ar[] = "orientations should be an Nx4 array";
static const char __pyx_k_points_ref_should_be_an_Nx3_arra[] = "points_ref should be an Nx3 array";
static const char __pyx_k_refPoints1_should_be_an_Nx3_arra[] = "refPoints1 should be an Nx3 array";
static const char __pyx_k_refPoints2_should_be_an_Nx3_arra[] = "refPoints2 should be an Nx3 array";
static const char __pyx_k_refPoints_should_be_an_Nx3_array[] = "refPoints should be an Nx3 array";
static const char __pyx_k_ref_orientations_should_be_an_Nx[] = "ref_orientations should be an Nx4 array";
static const char __pyx_k_ref_points_should_be_an_Nx3_arra[] = "ref_points should be an Nx3 array";
static const char __pyx_k_self_thisptr_cannot_be_converted[] = "self.thisptr cannot be converted to a Python object for pickling";
static const char __pyx_k_t_final_must_be_less_than_t_init[] = "t_final must be less than t_initial";
static const char __pyx_k_u_needs_to_be_a_three_dimensiona[] = "u needs to be a three-dimensional vector";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_Need_a_list_of_3D_points_for_com_2[] = "Need a list of 3D points for computeClusterProperties()";
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_FreudDeprecationWarning;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Need_a_list_of_3D_points_for_com;
static PyObject *__pyx_kp_s_Need_a_list_of_3D_points_for_com_2;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_kp_s_Orientations_must_be_given_to_or;
static PyObject *__pyx_n_s_Ql;
static PyObject *__pyx_n_s_Qthreshold;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_Sthreshold;
static PyObject *__pyx_kp_s_The_number_of_vectors_in_refPoin;
static PyObject *__pyx_kp_s_This_class_is_deprecated_use_fre;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unknown_BOD_mode_Options_are_bod;
static PyObject *__pyx_kp_s_Unknown_LocalDescriptors_orienta;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_accumulate;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_array_name;
static PyObject *__pyx_n_s_ascontiguousarray;
static PyObject *__pyx_n_s_ave_Ql;
static PyObject *__pyx_n_s_ave_norm_Ql;
static PyObject *__pyx_n_s_bod;
static PyObject *__pyx_n_s_box;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cluster_idx;
static PyObject *__pyx_kp_s_cluster_idx_must_be_a_1D_array_o;
static PyObject *__pyx_n_s_common;
static PyObject *__pyx_n_s_compDotTol;
static PyObject *__pyx_n_s_compOrientations;
static PyObject *__pyx_n_s_compute;
static PyObject *__pyx_n_s_computeAve;
static PyObject *__pyx_n_s_computeAveNorm;
static PyObject *__pyx_n_s_computeNorm;
static PyObject *__pyx_n_s_computeSolLiqNoNorm;
static PyObject *__pyx_n_s_computeSolLiqVariant;
static PyObject *__pyx_n_s_contiguous;
static PyObject *__pyx_n_s_convert_array;
static PyObject *__pyx_n_s_convert_box;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_delattrs;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_einsum;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_env_nlist;
static PyObject *__pyx_n_s_equiv_quats;
static PyObject *__pyx_kp_s_equiv_quats_should_be_an_N_equiv;
static PyObject *__pyx_n_s_errors;
static PyObject *__pyx_n_s_eye;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_flatten;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_freud;
static PyObject *__pyx_n_s_freud_common;
static PyObject *__pyx_n_s_getAveQl;
static PyObject *__pyx_n_s_getAveWl;
static PyObject *__pyx_n_s_getBondOrder;
static PyObject *__pyx_n_s_getBox;
static PyObject *__pyx_n_s_getClusterCOM;
static PyObject *__pyx_n_s_getClusterG;
static PyObject *__pyx_n_s_getClusterIdx;
static PyObject *__pyx_n_s_getClusterKeys;
static PyObject *__pyx_n_s_getClusterSizes;
static PyObject *__pyx_n_s_getClusters;
static PyObject *__pyx_n_s_getDr;
static PyObject *__pyx_n_s_getK;
static PyObject *__pyx_n_s_getLMax;
static PyObject *__pyx_n_s_getLargestClusterSize;
static PyObject *__pyx_n_s_getLx;
static PyObject *__pyx_n_s_getLy;
static PyObject *__pyx_n_s_getLz;
static PyObject *__pyx_n_s_getMatch;
static PyObject *__pyx_n_s_getNBinsPhi;
static PyObject *__pyx_n_s_getNBinsTheta;
static PyObject *__pyx_n_s_getNGlobal;
static PyObject *__pyx_n_s_getNP;
static PyObject *__pyx_n_s_getNReference;
static PyObject *__pyx_n_s_getNSphs;
static PyObject *__pyx_n_s_getNumClusters;
static PyObject *__pyx_n_s_getNumParticles;
static PyObject *__pyx_n_s_getNumberOfConnections;
static PyObject *__pyx_n_s_getPair;
static PyObject *__pyx_n_s_getPhi;
static PyObject *__pyx_n_s_getPsi;
static PyObject *__pyx_n_s_getQl;
static PyObject *__pyx_n_s_getQlAveNorm;
static PyObject *__pyx_n_s_getQlNorm;
static PyObject *__pyx_n_s_getQlmi;
static PyObject *__pyx_n_s_getRMax;
static PyObject *__pyx_n_s_getSph;
static PyObject *__pyx_n_s_getTheta;
static PyObject *__pyx_n_s_getTiltFactorXY;
static PyObject *__pyx_n_s_getTiltFactorXZ;
static PyObject *__pyx_n_s_getTiltFactorYZ;
static PyObject *__pyx_n_s_getTotEnvironment;
static PyObject *__pyx_n_s_getWl;
static PyObject *__pyx_n_s_getWlAveNorm;
static PyObject *__pyx_n_s_getWlNorm;
static PyObject *__pyx_n_s_getattribute;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_global;
static PyObject *__pyx_n_s_global_ors;
static PyObject *__pyx_kp_s_global_ors_should_be_an_Nx4_arra;
static PyObject *__pyx_n_s_global_search;
static PyObject *__pyx_n_s_hard_r;
static PyObject *__pyx_kp_s_ij_kl_ijkl;
static PyObject *__pyx_kp_s_ik_jl_ijkl;
static PyObject *__pyx_kp_s_il_jk_ijkl;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_is2D;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_kp_s_keys_must_be_a_1D_array_of_lengt;
static PyObject *__pyx_n_s_kn;
static PyObject *__pyx_n_s_known_modes;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_lbod;
static PyObject *__pyx_n_s_lmax;
static PyObject *__pyx_n_s_locality;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_make_default_nlist;
static PyObject *__pyx_n_s_make_default_nlist_nn;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n_bins_p;
static PyObject *__pyx_n_s_n_bins_t;
static PyObject *__pyx_n_s_n_replicates;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_negative_m;
static PyObject *__pyx_n_s_neighborhood;
static PyObject *__pyx_n_s_nlist;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_norm_Ql;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_num_neighbors;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obcd;
static PyObject *__pyx_n_s_oocd;
static PyObject *__pyx_n_s_orientations;
static PyObject *__pyx_kp_s_orientations_must_have_the_same;
static PyObject *__pyx_kp_s_orientations_should_be_an_Nx4_ar;
static PyObject *__pyx_n_s_ors;
static PyObject *__pyx_kp_s_ors_should_be_an_Nx4_array;
static PyObject *__pyx_n_s_particle_local;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_s_points_ref;
static PyObject *__pyx_kp_s_points_ref_should_be_an_Nx3_arra;
static PyObject *__pyx_kp_s_points_should_be_an_Nx3_array;
static PyObject *__pyx_n_s_precomputed;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rcut;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_refPoints;
static PyObject *__pyx_n_s_refPoints1;
static PyObject *__pyx_kp_s_refPoints1_should_be_an_Nx3_arra;
static PyObject *__pyx_n_s_refPoints2;
static PyObject *__pyx_kp_s_refPoints2_should_be_an_Nx3_arra;
static PyObject *__pyx_kp_s_refPoints_should_be_an_Nx3_array;
static PyObject *__pyx_n_s_ref_orientations;
static PyObject *__pyx_kp_s_ref_orientations_should_be_an_Nx;
static PyObject *__pyx_n_s_ref_ors;
static PyObject *__pyx_kp_s_ref_ors_should_be_an_Nx4_array;
static PyObject *__pyx_n_s_ref_points;
static PyObject *__pyx_kp_s_ref_points_should_be_an_Nx3_arra;
static PyObject *__pyx_n_s_registration;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_rmax;
static PyObject *__pyx_n_s_rmin;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_kp_s_scale_must_be_less_than_1;
static PyObject *__pyx_n_s_seed;
static PyObject *__pyx_kp_s_self_thisptr_cannot_be_converted;
static PyObject *__pyx_n_s_setBox;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_kp_s_supplied_seed_could_not_be_used;
static PyObject *__pyx_n_s_t_final;
static PyObject *__pyx_kp_s_t_final_must_be_less_than_t_init;
static PyObject *__pyx_n_s_t_initial;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_u;
static PyObject *__pyx_kp_s_u_needs_to_be_a_three_dimensiona;
static PyObject *__pyx_n_s_uint32;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static int __pyx_pf_5freud_6_freud_21CubaticOrderParameter___cinit__(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self, PyObject *__pyx_v_t_initial, PyObject *__pyx_v_t_final, PyObject *__pyx_v_scale, PyObject *__pyx_v_n_replicates, PyObject *__pyx_v_seed); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_2compute(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self, PyObject *__pyx_v_orientations); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_4get_t_initial(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_6get_t_final(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_8get_scale(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_10get_cubatic_order_parameter(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_12get_orientation(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_14get_particle_op(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_16get_particle_tensor(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_18get_global_tensor(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_20get_cubatic_tensor(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_22get_gen_r4_tensor(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_21NematicOrderParameter___cinit__(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self, PyObject *__pyx_v_u); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_2compute(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self, PyObject *__pyx_v_orientations); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_4get_nematic_order_parameter(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_6get_director(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_8get_particle_tensor(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_10get_nematic_tensor(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_17HexOrderParameter___cinit__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self, PyObject *__pyx_v_rmax, PyObject *__pyx_v_k, PyObject *__pyx_v_n); /* proto */
static void __pyx_pf_5freud_6_freud_17HexOrderParameter_2__dealloc__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_4compute(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_3psi___get__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_6getPsi(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_3box___get__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_8getBox(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_13num_particles___get__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_10getNP(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_1k___get__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_12getK(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_19TransOrderParameter___cinit__(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self, PyObject *__pyx_v_rmax, PyObject *__pyx_v_k, PyObject *__pyx_v_n); /* proto */
static void __pyx_pf_5freud_6_freud_19TransOrderParameter_2__dealloc__(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_4compute(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_3d_r___get__(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_6getDr(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_3box___get__(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_8getBox(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_13num_particles___get__(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_10getNP(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_7LocalQl___cinit__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_l, PyObject *__pyx_v_rmin); /* proto */
static void __pyx_pf_5freud_6_freud_7LocalQl_2__dealloc__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_3box___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static int __pyx_pf_5freud_6_freud_7LocalQl_3box_2__set__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_4getBox(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_6setBox(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_box); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_13num_particles___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_8getNP(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_2Ql___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_10getQl(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_6ave_Ql___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_12getAveQl(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_7norm_Ql___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_14getQlNorm(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_11ave_norm_Ql___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_16getQlAveNorm(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_18compute(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_20computeAve(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_22computeNorm(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_24computeAveNorm(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_26__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_28__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_11LocalQlNear___cinit__(struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_l, PyObject *__pyx_v_kn); /* proto */
static void __pyx_pf_5freud_6_freud_11LocalQlNear_2__dealloc__(struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_11LocalQlNear_4computeAve(struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_11LocalQlNear_6computeNorm(struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_11LocalQlNear_8computeAveNorm(struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_11LocalQlNear_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_11LocalQlNear_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_7LocalWl___cinit__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_l, PyObject *__pyx_v_rmin, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_5freud_6_freud_7LocalWl_2__dealloc__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_4__getattribute__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_6__dir__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_2Wl___get__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_8getWl(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_6ave_Wl___get__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_10getAveWl(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_7norm_Wl___get__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_12getWlNorm(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_11ave_norm_Wl___get__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_14getWlAveNorm(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_11LocalWlNear___cinit__(struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_l, PyObject *__pyx_v_kn); /* proto */
static void __pyx_pf_5freud_6_freud_11LocalWlNear_2__dealloc__(struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_11LocalWlNear_4computeAve(struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_11LocalWlNear_6computeNorm(struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_11LocalWlNear_8computeAveNorm(struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_11LocalWlNear_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_11LocalWlNear_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_6SolLiq___init__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_Qthreshold, PyObject *__pyx_v_Sthreshold, PyObject *__pyx_v_l); /* proto */
static void __pyx_pf_5freud_6_freud_6SolLiq_2__dealloc__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_4compute(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_6computeSolLiqVariant(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_8computeSolLiqNoNorm(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_3box___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static int __pyx_pf_5freud_6_freud_6SolLiq_3box_2__set__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_10getBox(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_12setClusteringRadius(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_rcutCluster); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_14setBox(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_box); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_20largest_cluster_size___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_16getLargestClusterSize(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_13cluster_sizes___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_18getClusterSizes(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_5Ql_mi___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_20getQlmi(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_8clusters___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_22getClusters(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_15num_connections___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_24getNumberOfConnections(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_9Ql_dot_ij___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_26getQldot_ij(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_13num_particles___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_28getNP(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_30__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_32__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_10SolLiqNear___init__(struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_Qthreshold, PyObject *__pyx_v_Sthreshold, PyObject *__pyx_v_l, PyObject *__pyx_v_kn); /* proto */
static void __pyx_pf_5freud_6_freud_10SolLiqNear_2__dealloc__(struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_10SolLiqNear_4compute(struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_10SolLiqNear_6computeSolLiqVariant(struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_10SolLiqNear_8computeSolLiqNoNorm(struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_10SolLiqNear_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_10SolLiqNear_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_9BondOrder___cinit__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self, float __pyx_v_rmax, float __pyx_v_k, unsigned int __pyx_v_n, unsigned int __pyx_v_n_bins_t, unsigned int __pyx_v_n_bins_p); /* proto */
static void __pyx_pf_5freud_6_freud_9BondOrder_2__dealloc__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_4accumulate(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_ref_points, PyObject *__pyx_v_ref_orientations, PyObject *__pyx_v_points, PyObject *__pyx_v_orientations, PyObject *__pyx_v_mode, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_10bond_order___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_6getBondOrder(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_3box___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_8getBox(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_10resetBondOrder(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_12compute(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_ref_points, PyObject *__pyx_v_ref_orientations, PyObject *__pyx_v_points, PyObject *__pyx_v_orientations, PyObject *__pyx_v_mode, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_14reduceBondOrder(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_5theta___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_16getTheta(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_3phi___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_18getPhi(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_12n_bins_theta___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_20getNBinsTheta(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_10n_bins_phi___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_22getNBinsPhi(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_16LocalDescriptors___cinit__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self, PyObject *__pyx_v_num_neighbors, PyObject *__pyx_v_lmax, PyObject *__pyx_v_rmax, PyObject *__pyx_v_negative_m); /* proto */
static void __pyx_pf_5freud_6_freud_16LocalDescriptors_2__dealloc__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_4computeNList(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_points_ref, PyObject *__pyx_v_points); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_6compute(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self, PyObject *__pyx_v_box, unsigned int __pyx_v_num_neighbors, PyObject *__pyx_v_points_ref, PyObject *__pyx_v_points, PyObject *__pyx_v_orientations, PyObject *__pyx_v_mode, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_3sph___get__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_8getSph(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_13num_particles___get__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_10getNP(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_13num_neighbors___get__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_12getNSphs(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_5l_max___get__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_14getLMax(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_5r_max___get__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_16getRMax(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_8MatchEnv___cinit__(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_k); /* proto */
static void __pyx_pf_5freud_6_freud_8MatchEnv_2__dealloc__(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_4setBox(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_box); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_6cluster(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_threshold, PyObject *__pyx_v_hard_r, PyObject *__pyx_v_registration, PyObject *__pyx_v_global_search, PyObject *__pyx_v_env_nlist, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_8matchMotif(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_refPoints, PyObject *__pyx_v_threshold, PyObject *__pyx_v_registration, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_10minRMSDMotif(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_refPoints, PyObject *__pyx_v_registration, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_12isSimilar(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_refPoints1, PyObject *__pyx_v_refPoints2, PyObject *__pyx_v_threshold, PyObject *__pyx_v_registration); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_14minimizeRMSD(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_refPoints1, PyObject *__pyx_v_refPoints2, PyObject *__pyx_v_registration); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_16getClusters(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_18getEnvironment(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_15tot_environment___get__(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_20getTotEnvironment(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_13num_particles___get__(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_22getNP(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_12num_clusters___get__(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_24getNumClusters(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_26__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_28__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_9Pairing2D___cinit__(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self, PyObject *__pyx_v_rmax, PyObject *__pyx_v_k, PyObject *__pyx_v_compDotTol); /* proto */
static void __pyx_pf_5freud_6_freud_9Pairing2D_2__dealloc__(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_4compute(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_points, PyObject *__pyx_v_orientations, PyObject *__pyx_v_compOrientations, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_5match___get__(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_6getMatch(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_4pair___get__(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_8getPair(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_3box___get__(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_10getBox(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_17AngularSeparation___cinit__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self, PyObject *__pyx_v_rmax, PyObject *__pyx_v_n); /* proto */
static void __pyx_pf_5freud_6_freud_17AngularSeparation_2__dealloc__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_5nlist___get__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_4computeNeighbor(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_ref_ors, PyObject *__pyx_v_ors, PyObject *__pyx_v_ref_points, PyObject *__pyx_v_points, PyObject *__pyx_v_equiv_quats, PyObject *__pyx_v_nlist); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_6computeGlobal(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self, PyObject *__pyx_v_global_ors, PyObject *__pyx_v_ors, PyObject *__pyx_v_equiv_quats); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_8getNeighborAngles(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_10getGlobalAngles(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_3n_p___get__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_12getNP(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_5n_ref___get__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_14getNReference(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_8n_global___get__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_16getNGlobal(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_7Cluster___cinit__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self, PyObject *__pyx_v_box, float __pyx_v_rcut); /* proto */
static void __pyx_pf_5freud_6_freud_7Cluster_2__dealloc__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_3box___get__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_4getBox(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_6computeClusters(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist, PyObject *__pyx_v_box); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_8computeClusterMembership(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self, PyObject *__pyx_v_keys); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_12num_clusters___get__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_10getNumClusters(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_13num_particles___get__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_12getNumParticles(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_11cluster_idx___get__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_14getClusterIdx(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_12cluster_keys___get__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_16getClusterKeys(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_7Cluster_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5freud_6_freud_17ClusterProperties___cinit__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self, PyObject *__pyx_v_box); /* proto */
static void __pyx_pf_5freud_6_freud_17ClusterProperties_2__dealloc__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_3box___get__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_4getBox(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_6computeProperties(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_cluster_idx, PyObject *__pyx_v_box); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_12num_clusters___get__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_8getNumClusters(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_11cluster_COM___get__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_10getClusterCOM(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_9cluster_G___get__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_12getClusterG(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_13cluster_sizes___get__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_14getClusterSizes(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_5freud_6_freud_CubaticOrderParameter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_NematicOrderParameter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_HexOrderParameter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_TransOrderParameter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_LocalQl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_LocalQlNear(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_LocalWl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_LocalWlNear(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_SolLiq(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_SolLiqNear(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_BondOrder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_LocalDescriptors(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_MatchEnv(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_Pairing2D(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_AngularSeparation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_Cluster(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5freud_6_freud_ClusterProperties(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_6_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_12;
static PyObject *__pyx_k__11;
static PyObject *__pyx_k__12;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__95;
/* Late includes */

/* "freud/order.pxi":42
 *     cdef order.CubaticOrderParameter * thisptr
 * 
 *     def __cinit__(self, t_initial, t_final, scale, n_replicates=1, seed=None):             # <<<<<<<<<<<<<<
 *         # run checks
 *         if (t_final >= t_initial):
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_21CubaticOrderParameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_21CubaticOrderParameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t_initial = 0;
  PyObject *__pyx_v_t_final = 0;
  PyObject *__pyx_v_scale = 0;
  PyObject *__pyx_v_n_replicates = 0;
  PyObject *__pyx_v_seed = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t_initial,&__pyx_n_s_t_final,&__pyx_n_s_scale,&__pyx_n_s_n_replicates,&__pyx_n_s_seed,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_1);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t_initial)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t_final)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(0, 42, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(0, 42, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_replicates);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_seed);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 42, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t_initial = values[0];
    __pyx_v_t_final = values[1];
    __pyx_v_scale = values[2];
    __pyx_v_n_replicates = values[3];
    __pyx_v_seed = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 42, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter___cinit__(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self), __pyx_v_t_initial, __pyx_v_t_final, __pyx_v_scale, __pyx_v_n_replicates, __pyx_v_seed);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_21CubaticOrderParameter___cinit__(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self, PyObject *__pyx_v_t_initial, PyObject *__pyx_v_t_final, PyObject *__pyx_v_scale, PyObject *__pyx_v_n_replicates, PyObject *__pyx_v_seed) {
  PyArrayObject *__pyx_v_kd = 0;
  PyArrayObject *__pyx_v_dijkl = 0;
  PyArrayObject *__pyx_v_dikjl = 0;
  PyArrayObject *__pyx_v_diljk = 0;
  PyArrayObject *__pyx_v_r4 = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dijkl;
  __Pyx_Buffer __pyx_pybuffer_dijkl;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dikjl;
  __Pyx_Buffer __pyx_pybuffer_dikjl;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_diljk;
  __Pyx_Buffer __pyx_pybuffer_diljk;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_kd;
  __Pyx_Buffer __pyx_pybuffer_kd;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_r4;
  __Pyx_Buffer __pyx_pybuffer_r4;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  char const *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyArrayObject *__pyx_t_18 = NULL;
  PyArrayObject *__pyx_t_19 = NULL;
  PyArrayObject *__pyx_t_20 = NULL;
  PyArrayObject *__pyx_t_21 = NULL;
  float __pyx_t_22;
  float __pyx_t_23;
  float __pyx_t_24;
  unsigned int __pyx_t_25;
  unsigned int __pyx_t_26;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_seed);
  __pyx_pybuffer_kd.pybuffer.buf = NULL;
  __pyx_pybuffer_kd.refcount = 0;
  __pyx_pybuffernd_kd.data = NULL;
  __pyx_pybuffernd_kd.rcbuffer = &__pyx_pybuffer_kd;
  __pyx_pybuffer_dijkl.pybuffer.buf = NULL;
  __pyx_pybuffer_dijkl.refcount = 0;
  __pyx_pybuffernd_dijkl.data = NULL;
  __pyx_pybuffernd_dijkl.rcbuffer = &__pyx_pybuffer_dijkl;
  __pyx_pybuffer_dikjl.pybuffer.buf = NULL;
  __pyx_pybuffer_dikjl.refcount = 0;
  __pyx_pybuffernd_dikjl.data = NULL;
  __pyx_pybuffernd_dikjl.rcbuffer = &__pyx_pybuffer_dikjl;
  __pyx_pybuffer_diljk.pybuffer.buf = NULL;
  __pyx_pybuffer_diljk.refcount = 0;
  __pyx_pybuffernd_diljk.data = NULL;
  __pyx_pybuffernd_diljk.rcbuffer = &__pyx_pybuffer_diljk;
  __pyx_pybuffer_r4.pybuffer.buf = NULL;
  __pyx_pybuffer_r4.refcount = 0;
  __pyx_pybuffernd_r4.data = NULL;
  __pyx_pybuffernd_r4.rcbuffer = &__pyx_pybuffer_r4;

  /* "freud/order.pxi":44
 *     def __cinit__(self, t_initial, t_final, scale, n_replicates=1, seed=None):
 *         # run checks
 *         if (t_final >= t_initial):             # <<<<<<<<<<<<<<
 *             raise ValueError("t_final must be less than t_initial")
 *         if (scale >= 1.0):
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_t_final, __pyx_v_t_initial, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "freud/order.pxi":45
 *         # run checks
 *         if (t_final >= t_initial):
 *             raise ValueError("t_final must be less than t_initial")             # <<<<<<<<<<<<<<
 *         if (scale >= 1.0):
 *             raise ValueError("scale must be less than 1")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 45, __pyx_L1_error)

    /* "freud/order.pxi":44
 *     def __cinit__(self, t_initial, t_final, scale, n_replicates=1, seed=None):
 *         # run checks
 *         if (t_final >= t_initial):             # <<<<<<<<<<<<<<
 *             raise ValueError("t_final must be less than t_initial")
 *         if (scale >= 1.0):
 */
  }

  /* "freud/order.pxi":46
 *         if (t_final >= t_initial):
 *             raise ValueError("t_final must be less than t_initial")
 *         if (scale >= 1.0):             # <<<<<<<<<<<<<<
 *             raise ValueError("scale must be less than 1")
 *         if seed is None:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_scale, __pyx_float_1_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "freud/order.pxi":47
 *             raise ValueError("t_final must be less than t_initial")
 *         if (scale >= 1.0):
 *             raise ValueError("scale must be less than 1")             # <<<<<<<<<<<<<<
 *         if seed is None:
 *             seed = int(time.time())
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 47, __pyx_L1_error)

    /* "freud/order.pxi":46
 *         if (t_final >= t_initial):
 *             raise ValueError("t_final must be less than t_initial")
 *         if (scale >= 1.0):             # <<<<<<<<<<<<<<
 *             raise ValueError("scale must be less than 1")
 *         if seed is None:
 */
  }

  /* "freud/order.pxi":48
 *         if (scale >= 1.0):
 *             raise ValueError("scale must be less than 1")
 *         if seed is None:             # <<<<<<<<<<<<<<
 *             seed = int(time.time())
 *         elif not isinstance(seed, int):
 */
  __pyx_t_2 = (__pyx_v_seed == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "freud/order.pxi":49
 *             raise ValueError("scale must be less than 1")
 *         if seed is None:
 *             seed = int(time.time())             # <<<<<<<<<<<<<<
 *         elif not isinstance(seed, int):
 *             try:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_time); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_seed, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "freud/order.pxi":48
 *         if (scale >= 1.0):
 *             raise ValueError("scale must be less than 1")
 *         if seed is None:             # <<<<<<<<<<<<<<
 *             seed = int(time.time())
 *         elif not isinstance(seed, int):
 */
    goto __pyx_L5;
  }

  /* "freud/order.pxi":50
 *         if seed is None:
 *             seed = int(time.time())
 *         elif not isinstance(seed, int):             # <<<<<<<<<<<<<<
 *             try:
 *                 seed = int(seed)
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_seed); 
  __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_2) {

    /* "freud/order.pxi":51
 *             seed = int(time.time())
 *         elif not isinstance(seed, int):
 *             try:             # <<<<<<<<<<<<<<
 *                 seed = int(seed)
 *             finally:
 */
    /*try:*/ {

      /* "freud/order.pxi":52
 *         elif not isinstance(seed, int):
 *             try:
 *                 seed = int(seed)             # <<<<<<<<<<<<<<
 *             finally:
 *                 print("supplied seed could not be used. using time as seed")
 */
      __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_v_seed); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 52, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_seed, __pyx_t_5);
      __pyx_t_5 = 0;
    }

    /* "freud/order.pxi":54
 *                 seed = int(seed)
 *             finally:
 *                 print("supplied seed could not be used. using time as seed")             # <<<<<<<<<<<<<<
 *                 seed = time.time()
 * 
 */
    /*finally:*/ {
      /*normal exit:*/{
        if (__Pyx_PrintOne(0, __pyx_kp_s_supplied_seed_could_not_be_used) < 0) __PYX_ERR(0, 54, __pyx_L1_error)

        /* "freud/order.pxi":55
 *             finally:
 *                 print("supplied seed could not be used. using time as seed")
 *                 seed = time.time()             # <<<<<<<<<<<<<<
 * 
 *         # for c++ code
 */
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (__pyx_t_1) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        } else {
          __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF_SET(__pyx_v_seed, __pyx_t_5);
        __pyx_t_5 = 0;
        goto __pyx_L8;
      }
      __pyx_L7_error:;
      /*exception exit:*/{
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_14);
        __pyx_t_6 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_8 = __pyx_filename;
        {

          /* "freud/order.pxi":54
 *                 seed = int(seed)
 *             finally:
 *                 print("supplied seed could not be used. using time as seed")             # <<<<<<<<<<<<<<
 *                 seed = time.time()
 * 
 */
          if (__Pyx_PrintOne(0, __pyx_kp_s_supplied_seed_could_not_be_used) < 0) __PYX_ERR(0, 54, __pyx_L10_error)

          /* "freud/order.pxi":55
 *             finally:
 *                 print("supplied seed could not be used. using time as seed")
 *                 seed = time.time()             # <<<<<<<<<<<<<<
 * 
 *         # for c++ code
 */
          __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          if (__pyx_t_4) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L10_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else {
            __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L10_error)
          }
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF_SET(__pyx_v_seed, __pyx_t_5);
          __pyx_t_5 = 0;
        }
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        }
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ErrRestore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
        __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_8;
        goto __pyx_L1_error;
        __pyx_L10_error:;
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
        goto __pyx_L1_error;
      }
      __pyx_L8:;
    }

    /* "freud/order.pxi":50
 *         if seed is None:
 *             seed = int(time.time())
 *         elif not isinstance(seed, int):             # <<<<<<<<<<<<<<
 *             try:
 *                 seed = int(seed)
 */
  }
  __pyx_L5:;

  /* "freud/order.pxi":59
 *         # for c++ code
 *         # create generalized rank four tensor, pass into c++
 *         cdef np.ndarray[float, ndim=2] kd = np.eye(3, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=4] dijkl = np.einsum(
 *             "ij,kl->ijkl", kd, kd, dtype=np.float32)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_eye); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_15) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__3, __pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_15) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_15, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 59, __pyx_L1_error)
  __pyx_t_16 = ((PyArrayObject *)__pyx_t_15);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_kd.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_kd = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_kd.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 59, __pyx_L1_error)
    } else {__pyx_pybuffernd_kd.diminfo[0].strides = __pyx_pybuffernd_kd.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_kd.diminfo[0].shape = __pyx_pybuffernd_kd.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_kd.diminfo[1].strides = __pyx_pybuffernd_kd.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_kd.diminfo[1].shape = __pyx_pybuffernd_kd.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_16 = 0;
  __pyx_v_kd = ((PyArrayObject *)__pyx_t_15);
  __pyx_t_15 = 0;

  /* "freud/order.pxi":60
 *         # create generalized rank four tensor, pass into c++
 *         cdef np.ndarray[float, ndim=2] kd = np.eye(3, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] dijkl = np.einsum(             # <<<<<<<<<<<<<<
 *             "ij,kl->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] dikjl = np.einsum(
 */
  __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_einsum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "freud/order.pxi":61
 *         cdef np.ndarray[float, ndim=2] kd = np.eye(3, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] dijkl = np.einsum(
 *             "ij,kl->ijkl", kd, kd, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=4] dikjl = np.einsum(
 *             "ik,jl->ijkl", kd, kd, dtype=np.float32)
 */
  __pyx_t_15 = PyTuple_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_kp_s_ij_kl_ijkl);
  __Pyx_GIVEREF(__pyx_kp_s_ij_kl_ijkl);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_kp_s_ij_kl_ijkl);
  __Pyx_INCREF(((PyObject *)__pyx_v_kd));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_kd));
  PyTuple_SET_ITEM(__pyx_t_15, 1, ((PyObject *)__pyx_v_kd));
  __Pyx_INCREF(((PyObject *)__pyx_v_kd));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_kd));
  PyTuple_SET_ITEM(__pyx_t_15, 2, ((PyObject *)__pyx_v_kd));
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_17) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "freud/order.pxi":60
 *         # create generalized rank four tensor, pass into c++
 *         cdef np.ndarray[float, ndim=2] kd = np.eye(3, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] dijkl = np.einsum(             # <<<<<<<<<<<<<<
 *             "ij,kl->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] dikjl = np.einsum(
 */
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_15, __pyx_t_1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_17) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_17, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 60, __pyx_L1_error)
  __pyx_t_18 = ((PyArrayObject *)__pyx_t_17);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dijkl.rcbuffer->pybuffer, (PyObject*)__pyx_t_18, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_dijkl = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dijkl.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 60, __pyx_L1_error)
    } else {__pyx_pybuffernd_dijkl.diminfo[0].strides = __pyx_pybuffernd_dijkl.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dijkl.diminfo[0].shape = __pyx_pybuffernd_dijkl.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dijkl.diminfo[1].strides = __pyx_pybuffernd_dijkl.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dijkl.diminfo[1].shape = __pyx_pybuffernd_dijkl.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_dijkl.diminfo[2].strides = __pyx_pybuffernd_dijkl.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_dijkl.diminfo[2].shape = __pyx_pybuffernd_dijkl.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_dijkl.diminfo[3].strides = __pyx_pybuffernd_dijkl.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_dijkl.diminfo[3].shape = __pyx_pybuffernd_dijkl.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_18 = 0;
  __pyx_v_dijkl = ((PyArrayObject *)__pyx_t_17);
  __pyx_t_17 = 0;

  /* "freud/order.pxi":62
 *         cdef np.ndarray[float, ndim=4] dijkl = np.einsum(
 *             "ij,kl->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] dikjl = np.einsum(             # <<<<<<<<<<<<<<
 *             "ik,jl->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] diljk = np.einsum(
 */
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_einsum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "freud/order.pxi":63
 *             "ij,kl->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] dikjl = np.einsum(
 *             "ik,jl->ijkl", kd, kd, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=4] diljk = np.einsum(
 *             "il,jk->ijkl", kd, kd, dtype=np.float32)
 */
  __pyx_t_17 = PyTuple_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_kp_s_ik_jl_ijkl);
  __Pyx_GIVEREF(__pyx_kp_s_ik_jl_ijkl);
  PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_kp_s_ik_jl_ijkl);
  __Pyx_INCREF(((PyObject *)__pyx_v_kd));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_kd));
  PyTuple_SET_ITEM(__pyx_t_17, 1, ((PyObject *)__pyx_v_kd));
  __Pyx_INCREF(((PyObject *)__pyx_v_kd));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_kd));
  PyTuple_SET_ITEM(__pyx_t_17, 2, ((PyObject *)__pyx_v_kd));
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/order.pxi":62
 *         cdef np.ndarray[float, ndim=4] dijkl = np.einsum(
 *             "ij,kl->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] dikjl = np.einsum(             # <<<<<<<<<<<<<<
 *             "ik,jl->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] diljk = np.einsum(
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_17, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_t_19 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dikjl.rcbuffer->pybuffer, (PyObject*)__pyx_t_19, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_dikjl = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dikjl.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 62, __pyx_L1_error)
    } else {__pyx_pybuffernd_dikjl.diminfo[0].strides = __pyx_pybuffernd_dikjl.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dikjl.diminfo[0].shape = __pyx_pybuffernd_dikjl.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dikjl.diminfo[1].strides = __pyx_pybuffernd_dikjl.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dikjl.diminfo[1].shape = __pyx_pybuffernd_dikjl.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_dikjl.diminfo[2].strides = __pyx_pybuffernd_dikjl.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_dikjl.diminfo[2].shape = __pyx_pybuffernd_dikjl.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_dikjl.diminfo[3].strides = __pyx_pybuffernd_dikjl.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_dikjl.diminfo[3].shape = __pyx_pybuffernd_dikjl.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_19 = 0;
  __pyx_v_dikjl = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/order.pxi":64
 *         cdef np.ndarray[float, ndim=4] dikjl = np.einsum(
 *             "ik,jl->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] diljk = np.einsum(             # <<<<<<<<<<<<<<
 *             "il,jk->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] r4 = dijkl+dikjl+diljk
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_einsum); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/order.pxi":65
 *             "ik,jl->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] diljk = np.einsum(
 *             "il,jk->ijkl", kd, kd, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=4] r4 = dijkl+dikjl+diljk
 *         r4 *= (2.0/5.0)
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_kp_s_il_jk_ijkl);
  __Pyx_GIVEREF(__pyx_kp_s_il_jk_ijkl);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_il_jk_ijkl);
  __Pyx_INCREF(((PyObject *)__pyx_v_kd));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_kd));
  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_kd));
  __Pyx_INCREF(((PyObject *)__pyx_v_kd));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_kd));
  PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_v_kd));
  __pyx_t_17 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "freud/order.pxi":64
 *         cdef np.ndarray[float, ndim=4] dikjl = np.einsum(
 *             "ik,jl->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] diljk = np.einsum(             # <<<<<<<<<<<<<<
 *             "il,jk->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] r4 = dijkl+dikjl+diljk
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_4, __pyx_t_17); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 64, __pyx_L1_error)
  __pyx_t_20 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_diljk.rcbuffer->pybuffer, (PyObject*)__pyx_t_20, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_diljk = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_diljk.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 64, __pyx_L1_error)
    } else {__pyx_pybuffernd_diljk.diminfo[0].strides = __pyx_pybuffernd_diljk.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_diljk.diminfo[0].shape = __pyx_pybuffernd_diljk.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_diljk.diminfo[1].strides = __pyx_pybuffernd_diljk.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_diljk.diminfo[1].shape = __pyx_pybuffernd_diljk.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_diljk.diminfo[2].strides = __pyx_pybuffernd_diljk.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_diljk.diminfo[2].shape = __pyx_pybuffernd_diljk.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_diljk.diminfo[3].strides = __pyx_pybuffernd_diljk.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_diljk.diminfo[3].shape = __pyx_pybuffernd_diljk.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_20 = 0;
  __pyx_v_diljk = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":66
 *         cdef np.ndarray[float, ndim=4] diljk = np.einsum(
 *             "il,jk->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] r4 = dijkl+dikjl+diljk             # <<<<<<<<<<<<<<
 *         r4 *= (2.0/5.0)
 *         self.thisptr = new order.CubaticOrderParameter(
 */
  __pyx_t_5 = PyNumber_Add(((PyObject *)__pyx_v_dijkl), ((PyObject *)__pyx_v_dikjl)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_17 = PyNumber_Add(__pyx_t_5, ((PyObject *)__pyx_v_diljk)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_17) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_17, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_t_21 = ((PyArrayObject *)__pyx_t_17);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_r4.rcbuffer->pybuffer, (PyObject*)__pyx_t_21, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_r4 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_r4.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 66, __pyx_L1_error)
    } else {__pyx_pybuffernd_r4.diminfo[0].strides = __pyx_pybuffernd_r4.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_r4.diminfo[0].shape = __pyx_pybuffernd_r4.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_r4.diminfo[1].strides = __pyx_pybuffernd_r4.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_r4.diminfo[1].shape = __pyx_pybuffernd_r4.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_r4.diminfo[2].strides = __pyx_pybuffernd_r4.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_r4.diminfo[2].shape = __pyx_pybuffernd_r4.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_r4.diminfo[3].strides = __pyx_pybuffernd_r4.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_r4.diminfo[3].shape = __pyx_pybuffernd_r4.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_21 = 0;
  __pyx_v_r4 = ((PyArrayObject *)__pyx_t_17);
  __pyx_t_17 = 0;

  /* "freud/order.pxi":67
 *             "il,jk->ijkl", kd, kd, dtype=np.float32)
 *         cdef np.ndarray[float, ndim=4] r4 = dijkl+dikjl+diljk
 *         r4 *= (2.0/5.0)             # <<<<<<<<<<<<<<
 *         self.thisptr = new order.CubaticOrderParameter(
 *             t_initial, t_final, scale, <float*> r4.data, n_replicates, seed)
 */
  __pyx_t_17 = PyFloat_FromDouble((2.0 / 5.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_5 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_r4), __pyx_t_17); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 67, __pyx_L1_error)
  __pyx_t_21 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r4.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_r4.rcbuffer->pybuffer, (PyObject*)__pyx_t_21, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_r4.rcbuffer->pybuffer, (PyObject*)__pyx_v_r4, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_14, __pyx_t_13, __pyx_t_12);
      }
      __pyx_t_14 = __pyx_t_13 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_r4.diminfo[0].strides = __pyx_pybuffernd_r4.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_r4.diminfo[0].shape = __pyx_pybuffernd_r4.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_r4.diminfo[1].strides = __pyx_pybuffernd_r4.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_r4.diminfo[1].shape = __pyx_pybuffernd_r4.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_r4.diminfo[2].strides = __pyx_pybuffernd_r4.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_r4.diminfo[2].shape = __pyx_pybuffernd_r4.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_r4.diminfo[3].strides = __pyx_pybuffernd_r4.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_r4.diminfo[3].shape = __pyx_pybuffernd_r4.rcbuffer->pybuffer.shape[3];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 67, __pyx_L1_error)
  }
  __pyx_t_21 = 0;
  __Pyx_DECREF_SET(__pyx_v_r4, ((PyArrayObject *)__pyx_t_5));
  __pyx_t_5 = 0;

  /* "freud/order.pxi":69
 *         r4 *= (2.0/5.0)
 *         self.thisptr = new order.CubaticOrderParameter(
 *             t_initial, t_final, scale, <float*> r4.data, n_replicates, seed)             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, orientations):
 */
  __pyx_t_22 = __pyx_PyFloat_AsFloat(__pyx_v_t_initial); if (unlikely((__pyx_t_22 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_t_23 = __pyx_PyFloat_AsFloat(__pyx_v_t_final); if (unlikely((__pyx_t_23 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_t_24 = __pyx_PyFloat_AsFloat(__pyx_v_scale); if (unlikely((__pyx_t_24 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_t_25 = __Pyx_PyInt_As_unsigned_int(__pyx_v_n_replicates); if (unlikely((__pyx_t_25 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_t_26 = __Pyx_PyInt_As_unsigned_int(__pyx_v_seed); if (unlikely((__pyx_t_26 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)

  /* "freud/order.pxi":68
 *         cdef np.ndarray[float, ndim=4] r4 = dijkl+dikjl+diljk
 *         r4 *= (2.0/5.0)
 *         self.thisptr = new order.CubaticOrderParameter(             # <<<<<<<<<<<<<<
 *             t_initial, t_final, scale, <float*> r4.data, n_replicates, seed)
 * 
 */
  __pyx_v_self->thisptr = new freud::order::CubaticOrderParameter(__pyx_t_22, __pyx_t_23, __pyx_t_24, ((float *)__pyx_v_r4->data), __pyx_t_25, __pyx_t_26);

  /* "freud/order.pxi":42
 *     cdef order.CubaticOrderParameter * thisptr
 * 
 *     def __cinit__(self, t_initial, t_final, scale, n_replicates=1, seed=None):             # <<<<<<<<<<<<<<
 *         # run checks
 *         if (t_final >= t_initial):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_17);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dijkl.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dikjl.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_diljk.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_kd.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r4.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dijkl.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dikjl.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_diljk.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_kd.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r4.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_kd);
  __Pyx_XDECREF((PyObject *)__pyx_v_dijkl);
  __Pyx_XDECREF((PyObject *)__pyx_v_dikjl);
  __Pyx_XDECREF((PyObject *)__pyx_v_diljk);
  __Pyx_XDECREF((PyObject *)__pyx_v_r4);
  __Pyx_XDECREF(__pyx_v_seed);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":71
 *             t_initial, t_final, scale, <float*> r4.data, n_replicates, seed)
 * 
 *     def compute(self, orientations):             # <<<<<<<<<<<<<<
 *         """Calculates the per-particle and global order parameter.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_3compute(PyObject *__pyx_v_self, PyObject *__pyx_v_orientations); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_2compute[] = "CubaticOrderParameter.compute(self, orientations)\nCalculates the per-particle and global order parameter.\n\n        Args:\n            orientations ((:math:`N_{particles}`, 4) :class:`numpy.ndarray`):\n                Orientations as angles to use in computation.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_3compute(PyObject *__pyx_v_self, PyObject *__pyx_v_orientations) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_2compute(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self), ((PyObject *)__pyx_v_orientations));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_2compute(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self, PyObject *__pyx_v_orientations) {
  PyArrayObject *__pyx_v_l_orientations = 0;
  unsigned int __pyx_v_num_particles;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_orientations;
  __Pyx_Buffer __pyx_pybuffer_l_orientations;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  __Pyx_RefNannySetupContext("compute", 0);
  __Pyx_INCREF(__pyx_v_orientations);
  __pyx_pybuffer_l_orientations.pybuffer.buf = NULL;
  __pyx_pybuffer_l_orientations.refcount = 0;
  __pyx_pybuffernd_l_orientations.data = NULL;
  __pyx_pybuffernd_l_orientations.rcbuffer = &__pyx_pybuffer_l_orientations;

  /* "freud/order.pxi":78
 *                 Orientations as angles to use in computation.
 *         """
 *         orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":79
 *         """
 *         orientations = freud.common.convert_array(
 *             orientations, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_orientations);
  __Pyx_GIVEREF(__pyx_v_orientations);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_orientations);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_orientations) < 0) __PYX_ERR(0, 79, __pyx_L1_error)

  /* "freud/order.pxi":78
 *                 Orientations as angles to use in computation.
 *         """
 *         orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_orientations, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":81
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('orientations should be an Nx4 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_orientations, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/order.pxi":82
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:
 *             raise TypeError('orientations should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 82, __pyx_L1_error)

    /* "freud/order.pxi":81
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('orientations should be an Nx4 array')
 * 
 */
  }

  /* "freud/order.pxi":84
 *             raise TypeError('orientations should be an Nx4 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations             # <<<<<<<<<<<<<<
 *         cdef unsigned int num_particles = <unsigned int> orientations.shape[0]
 * 
 */
  if (!(likely(((__pyx_v_orientations) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_orientations, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 84, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_orientations;
  __Pyx_INCREF(__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_5), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_orientations = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 84, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_orientations.diminfo[0].strides = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_orientations.diminfo[0].shape = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_orientations.diminfo[1].strides = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_orientations.diminfo[1].shape = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_orientations = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":85
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 *         cdef unsigned int num_particles = <unsigned int> orientations.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_orientations, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_num_particles = ((unsigned int)__pyx_t_7);

  /* "freud/order.pxi":87
 *         cdef unsigned int num_particles = <unsigned int> orientations.shape[0]
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.compute(
 *                 <quat[float]*> l_orientations.data, num_particles, 1)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/order.pxi":88
 * 
 *         with nogil:
 *             self.thisptr.compute(             # <<<<<<<<<<<<<<
 *                 <quat[float]*> l_orientations.data, num_particles, 1)
 *         return self
 */
        try {
          __pyx_v_self->thisptr->compute(((quat<float>  *)__pyx_v_l_orientations->data), __pyx_v_num_particles, 1);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 88, __pyx_L5_error)
        }
      }

      /* "freud/order.pxi":87
 *         cdef unsigned int num_particles = <unsigned int> orientations.shape[0]
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.compute(
 *                 <quat[float]*> l_orientations.data, num_particles, 1)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "freud/order.pxi":90
 *             self.thisptr.compute(
 *                 <quat[float]*> l_orientations.data, num_particles, 1)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def get_t_initial(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/order.pxi":71
 *             t_initial, t_final, scale, <float*> r4.data, n_replicates, seed)
 * 
 *     def compute(self, orientations):             # <<<<<<<<<<<<<<
 *         """Calculates the per-particle and global order parameter.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_orientations);
  __Pyx_XDECREF(__pyx_v_orientations);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":92
 *         return self
 * 
 *     def get_t_initial(self):             # <<<<<<<<<<<<<<
 *         """Get initial temperature.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_5get_t_initial(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_4get_t_initial[] = "CubaticOrderParameter.get_t_initial(self)\nGet initial temperature.\n\n        Returns:\n            float: Value of initial temperature.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_5get_t_initial(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_t_initial (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_4get_t_initial(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_4get_t_initial(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_t_initial", 0);

  /* "freud/order.pxi":98
 *             float: Value of initial temperature.
 *         """
 *         return self.thisptr.getTInitial()             # <<<<<<<<<<<<<<
 * 
 *     def get_t_final(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getTInitial()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":92
 *         return self
 * 
 *     def get_t_initial(self):             # <<<<<<<<<<<<<<
 *         """Get initial temperature.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.get_t_initial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":100
 *         return self.thisptr.getTInitial()
 * 
 *     def get_t_final(self):             # <<<<<<<<<<<<<<
 *         """Get final temperature.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_7get_t_final(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_6get_t_final[] = "CubaticOrderParameter.get_t_final(self)\nGet final temperature.\n\n        Returns:\n            float: Value of final temperature.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_7get_t_final(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_t_final (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_6get_t_final(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_6get_t_final(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_t_final", 0);

  /* "freud/order.pxi":106
 *             float: Value of final temperature.
 *         """
 *         return self.thisptr.getTFinal()             # <<<<<<<<<<<<<<
 * 
 *     def get_scale(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getTFinal()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":100
 *         return self.thisptr.getTInitial()
 * 
 *     def get_t_final(self):             # <<<<<<<<<<<<<<
 *         """Get final temperature.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.get_t_final", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":108
 *         return self.thisptr.getTFinal()
 * 
 *     def get_scale(self):             # <<<<<<<<<<<<<<
 *         """Get scale.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_9get_scale(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_8get_scale[] = "CubaticOrderParameter.get_scale(self)\nGet scale.\n\n        Returns:\n            float: Value of scale.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_9get_scale(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scale (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_8get_scale(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_8get_scale(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_scale", 0);

  /* "freud/order.pxi":114
 *             float: Value of scale.
 *         """
 *         return self.thisptr.getScale()             # <<<<<<<<<<<<<<
 * 
 *     def get_cubatic_order_parameter(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getScale()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":108
 *         return self.thisptr.getTFinal()
 * 
 *     def get_scale(self):             # <<<<<<<<<<<<<<
 *         """Get scale.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.get_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":116
 *         return self.thisptr.getScale()
 * 
 *     def get_cubatic_order_parameter(self):             # <<<<<<<<<<<<<<
 *         """Get cubatic order parameter.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_11get_cubatic_order_parameter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_10get_cubatic_order_parameter[] = "CubaticOrderParameter.get_cubatic_order_parameter(self)\nGet cubatic order parameter.\n\n        Returns:\n            float: Cubatic order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_11get_cubatic_order_parameter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cubatic_order_parameter (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_10get_cubatic_order_parameter(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_10get_cubatic_order_parameter(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_cubatic_order_parameter", 0);

  /* "freud/order.pxi":122
 *             float: Cubatic order parameter.
 *         """
 *         return self.thisptr.getCubaticOrderParameter()             # <<<<<<<<<<<<<<
 * 
 *     def get_orientation(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getCubaticOrderParameter()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":116
 *         return self.thisptr.getScale()
 * 
 *     def get_cubatic_order_parameter(self):             # <<<<<<<<<<<<<<
 *         """Get cubatic order parameter.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.get_cubatic_order_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":124
 *         return self.thisptr.getCubaticOrderParameter()
 * 
 *     def get_orientation(self):             # <<<<<<<<<<<<<<
 *         """Get orientations.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_13get_orientation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_12get_orientation[] = "CubaticOrderParameter.get_orientation(self)\nGet orientations.\n\n        Returns:\n            :math:`\\left(4 \\right)` :class:`numpy.ndarray`:\n                Orientation of global orientation.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_13get_orientation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_orientation (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_12get_orientation(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_12get_orientation(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self) {
  quat<float>  __pyx_v_q;
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("get_orientation", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":131
 *                 Orientation of global orientation.
 *         """
 *         cdef quat[float] q = self.thisptr.getCubaticOrientation()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=1] result = np.array(
 *             [q.s, q.v.x, q.v.y, q.v.z], dtype=np.float32)
 */
  __pyx_v_q = __pyx_v_self->thisptr->getCubaticOrientation();

  /* "freud/order.pxi":132
 *         """
 *         cdef quat[float] q = self.thisptr.getCubaticOrientation()
 *         cdef np.ndarray[float, ndim=1] result = np.array(             # <<<<<<<<<<<<<<
 *             [q.s, q.v.x, q.v.y, q.v.z], dtype=np.float32)
 *         return result
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":133
 *         cdef quat[float] q = self.thisptr.getCubaticOrientation()
 *         cdef np.ndarray[float, ndim=1] result = np.array(
 *             [q.s, q.v.x, q.v.y, q.v.z], dtype=np.float32)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_q.s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_q.v.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_q.v.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_q.v.z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;

  /* "freud/order.pxi":132
 *         """
 *         cdef quat[float] q = self.thisptr.getCubaticOrientation()
 *         cdef np.ndarray[float, ndim=1] result = np.array(             # <<<<<<<<<<<<<<
 *             [q.s, q.v.x, q.v.y, q.v.z], dtype=np.float32)
 *         return result
 */
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "freud/order.pxi":133
 *         cdef quat[float] q = self.thisptr.getCubaticOrientation()
 *         cdef np.ndarray[float, ndim=1] result = np.array(
 *             [q.s, q.v.x, q.v.y, q.v.z], dtype=np.float32)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/order.pxi":132
 *         """
 *         cdef quat[float] q = self.thisptr.getCubaticOrientation()
 *         cdef np.ndarray[float, ndim=1] result = np.array(             # <<<<<<<<<<<<<<
 *             [q.s, q.v.x, q.v.y, q.v.z], dtype=np.float32)
 *         return result
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 132, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 132, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/order.pxi":134
 *         cdef np.ndarray[float, ndim=1] result = np.array(
 *             [q.s, q.v.x, q.v.y, q.v.z], dtype=np.float32)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def get_particle_op(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":124
 *         return self.thisptr.getCubaticOrderParameter()
 * 
 *     def get_orientation(self):             # <<<<<<<<<<<<<<
 *         """Get orientations.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.get_orientation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":136
 *         return result
 * 
 *     def get_particle_op(self):             # <<<<<<<<<<<<<<
 *         """Get per-particle order parameter.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_15get_particle_op(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_14get_particle_op[] = "CubaticOrderParameter.get_particle_op(self)\nGet per-particle order parameter.\n\n        Returns:\n            :class:`np.ndarray`: Cubatic order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_15get_particle_op(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_particle_op (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_14get_particle_op(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_14get_particle_op(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self) {
  float *__pyx_v_particle_op;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_particle_op", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":143
 *         """
 *         cdef float * particle_op = \
 *             self.thisptr.getParticleCubaticOrderParameter().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 */
  __pyx_v_particle_op = __pyx_v_self->thisptr->getParticleCubaticOrderParameter().get();

  /* "freud/order.pxi":145
 *             self.thisptr.getParticleCubaticOrderParameter().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNumParticles());

  /* "freud/order.pxi":147
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 *         cdef np.ndarray[np.float32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> particle_op)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_particle_op)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 147, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 146, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":149
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32,
 *                                          <void*> particle_op)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def get_particle_tensor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":136
 *         return result
 * 
 *     def get_particle_op(self):             # <<<<<<<<<<<<<<
 *         """Get per-particle order parameter.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.get_particle_op", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":151
 *         return result
 * 
 *     def get_particle_tensor(self):             # <<<<<<<<<<<<<<
 *         """Get per-particle cubatic tensor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_17get_particle_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_16get_particle_tensor[] = "CubaticOrderParameter.get_particle_tensor(self)\nGet per-particle cubatic tensor.\n\n        Returns:\n            :math:`\\left(N_{particles}, 3, 3, 3, 3 \\right)`             :class:`numpy.ndarray`:\n                Rank 5 tensor corresponding to each individual particle\n                orientation.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_17get_particle_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_particle_tensor (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_16get_particle_tensor(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_16get_particle_tensor(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self) {
  float *__pyx_v_particle_tensor;
  npy_intp __pyx_v_nbins[5];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_particle_tensor", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":160
 *                 orientation.
 *         """
 *         cdef float * particle_tensor = self.thisptr.getParticleTensor().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[5]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 */
  __pyx_v_particle_tensor = __pyx_v_self->thisptr->getParticleTensor().get();

  /* "freud/order.pxi":162
 *         cdef float * particle_tensor = self.thisptr.getParticleTensor().get()
 *         cdef np.npy_intp nbins[5]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()             # <<<<<<<<<<<<<<
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNumParticles());

  /* "freud/order.pxi":163
 *         cdef np.npy_intp nbins[5]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 *         nbins[1] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[2] = <np.npy_intp> 3
 *         nbins[3] = <np.npy_intp> 3
 */
  (__pyx_v_nbins[1]) = ((npy_intp)3);

  /* "freud/order.pxi":164
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[3] = <np.npy_intp> 3
 *         nbins[4] = <np.npy_intp> 3
 */
  (__pyx_v_nbins[2]) = ((npy_intp)3);

  /* "freud/order.pxi":165
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3
 *         nbins[3] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[4] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=5] result = \
 */
  (__pyx_v_nbins[3]) = ((npy_intp)3);

  /* "freud/order.pxi":166
 *         nbins[2] = <np.npy_intp> 3
 *         nbins[3] = <np.npy_intp> 3
 *         nbins[4] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=5] result = \
 *             np.PyArray_SimpleNewFromData(5, nbins, np.NPY_FLOAT32,
 */
  (__pyx_v_nbins[4]) = ((npy_intp)3);

  /* "freud/order.pxi":168
 *         nbins[4] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=5] result = \
 *             np.PyArray_SimpleNewFromData(5, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> particle_tensor)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(5, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_particle_tensor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 5, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 167, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_result.diminfo[2].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_result.diminfo[2].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_result.diminfo[3].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_result.diminfo[3].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[3]; __pyx_pybuffernd_result.diminfo[4].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[4]; __pyx_pybuffernd_result.diminfo[4].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[4];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":170
 *             np.PyArray_SimpleNewFromData(5, nbins, np.NPY_FLOAT32,
 *                                          <void*> particle_tensor)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def get_global_tensor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":151
 *         return result
 * 
 *     def get_particle_tensor(self):             # <<<<<<<<<<<<<<
 *         """Get per-particle cubatic tensor.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.get_particle_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":172
 *         return result
 * 
 *     def get_global_tensor(self):             # <<<<<<<<<<<<<<
 *         """Get global tensor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_19get_global_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_18get_global_tensor[] = "CubaticOrderParameter.get_global_tensor(self)\nGet global tensor.\n\n        Returns:\n            :math:`\\left(3, 3, 3, 3 \\right)` :class:`numpy.ndarray`:\n                Rank 4 tensor corresponding to global orientation.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_19get_global_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_global_tensor (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_18get_global_tensor(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_18get_global_tensor(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self) {
  float *__pyx_v_global_tensor;
  npy_intp __pyx_v_nbins[4];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_global_tensor", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":179
 *                 Rank 4 tensor corresponding to global orientation.
 *         """
 *         cdef float * global_tensor = self.thisptr.getGlobalTensor().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[4]
 *         nbins[0] = <np.npy_intp> 3
 */
  __pyx_v_global_tensor = __pyx_v_self->thisptr->getGlobalTensor().get();

  /* "freud/order.pxi":181
 *         cdef float * global_tensor = self.thisptr.getGlobalTensor().get()
 *         cdef np.npy_intp nbins[4]
 *         nbins[0] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3
 */
  (__pyx_v_nbins[0]) = ((npy_intp)3);

  /* "freud/order.pxi":182
 *         cdef np.npy_intp nbins[4]
 *         nbins[0] = <np.npy_intp> 3
 *         nbins[1] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[2] = <np.npy_intp> 3
 *         nbins[3] = <np.npy_intp> 3
 */
  (__pyx_v_nbins[1]) = ((npy_intp)3);

  /* "freud/order.pxi":183
 *         nbins[0] = <np.npy_intp> 3
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[3] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=4] result = \
 */
  (__pyx_v_nbins[2]) = ((npy_intp)3);

  /* "freud/order.pxi":184
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3
 *         nbins[3] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=4] result = \
 *             np.PyArray_SimpleNewFromData(4, nbins, np.NPY_FLOAT32,
 */
  (__pyx_v_nbins[3]) = ((npy_intp)3);

  /* "freud/order.pxi":186
 *         nbins[3] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=4] result = \
 *             np.PyArray_SimpleNewFromData(4, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> global_tensor)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(4, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_global_tensor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 186, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 185, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_result.diminfo[2].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_result.diminfo[2].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_result.diminfo[3].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_result.diminfo[3].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":188
 *             np.PyArray_SimpleNewFromData(4, nbins, np.NPY_FLOAT32,
 *                                          <void*> global_tensor)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def get_cubatic_tensor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":172
 *         return result
 * 
 *     def get_global_tensor(self):             # <<<<<<<<<<<<<<
 *         """Get global tensor.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.get_global_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":190
 *         return result
 * 
 *     def get_cubatic_tensor(self):             # <<<<<<<<<<<<<<
 *         """Get cubatic tensor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_21get_cubatic_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_20get_cubatic_tensor[] = "CubaticOrderParameter.get_cubatic_tensor(self)\nGet cubatic tensor.\n\n        Returns:\n            :math:`\\left(3, 3, 3, 3 \\right)` :class:`numpy.ndarray`:\n                Rank 4 tensor corresponding to cubatic tensor.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_21get_cubatic_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cubatic_tensor (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_20get_cubatic_tensor(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_20get_cubatic_tensor(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self) {
  float *__pyx_v_cubatic_tensor;
  npy_intp __pyx_v_nbins[4];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_cubatic_tensor", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":197
 *                 Rank 4 tensor corresponding to cubatic tensor.
 *         """
 *         cdef float * cubatic_tensor = self.thisptr.getCubaticTensor().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[4]
 *         nbins[0] = <np.npy_intp> 3
 */
  __pyx_v_cubatic_tensor = __pyx_v_self->thisptr->getCubaticTensor().get();

  /* "freud/order.pxi":199
 *         cdef float * cubatic_tensor = self.thisptr.getCubaticTensor().get()
 *         cdef np.npy_intp nbins[4]
 *         nbins[0] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3
 */
  (__pyx_v_nbins[0]) = ((npy_intp)3);

  /* "freud/order.pxi":200
 *         cdef np.npy_intp nbins[4]
 *         nbins[0] = <np.npy_intp> 3
 *         nbins[1] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[2] = <np.npy_intp> 3
 *         nbins[3] = <np.npy_intp> 3
 */
  (__pyx_v_nbins[1]) = ((npy_intp)3);

  /* "freud/order.pxi":201
 *         nbins[0] = <np.npy_intp> 3
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[3] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=4] result = \
 */
  (__pyx_v_nbins[2]) = ((npy_intp)3);

  /* "freud/order.pxi":202
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3
 *         nbins[3] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=4] result = \
 *             np.PyArray_SimpleNewFromData(4, nbins, np.NPY_FLOAT32,
 */
  (__pyx_v_nbins[3]) = ((npy_intp)3);

  /* "freud/order.pxi":204
 *         nbins[3] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=4] result = \
 *             np.PyArray_SimpleNewFromData(4, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> cubatic_tensor)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(4, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_cubatic_tensor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 204, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 203, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_result.diminfo[2].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_result.diminfo[2].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_result.diminfo[3].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_result.diminfo[3].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":206
 *             np.PyArray_SimpleNewFromData(4, nbins, np.NPY_FLOAT32,
 *                                          <void*> cubatic_tensor)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def get_gen_r4_tensor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":190
 *         return result
 * 
 *     def get_cubatic_tensor(self):             # <<<<<<<<<<<<<<
 *         """Get cubatic tensor.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.get_cubatic_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":208
 *         return result
 * 
 *     def get_gen_r4_tensor(self):             # <<<<<<<<<<<<<<
 *         """Get R4 Tensor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_23get_gen_r4_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_22get_gen_r4_tensor[] = "CubaticOrderParameter.get_gen_r4_tensor(self)\nGet R4 Tensor.\n\n        Returns:\n            :math:`\\left(3, 3, 3, 3 \\right)` :class:`numpy.ndarray`:\n                Rank 4 tensor corresponding to each individual particle\n                orientation.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_23get_gen_r4_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_gen_r4_tensor (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_22get_gen_r4_tensor(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_22get_gen_r4_tensor(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self) {
  float *__pyx_v_gen_r4_tensor;
  npy_intp __pyx_v_nbins[4];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_gen_r4_tensor", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":216
 *                 orientation.
 *         """
 *         cdef float * gen_r4_tensor = self.thisptr.getGenR4Tensor().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[4]
 *         nbins[0] = <np.npy_intp> 3
 */
  __pyx_v_gen_r4_tensor = __pyx_v_self->thisptr->getGenR4Tensor().get();

  /* "freud/order.pxi":218
 *         cdef float * gen_r4_tensor = self.thisptr.getGenR4Tensor().get()
 *         cdef np.npy_intp nbins[4]
 *         nbins[0] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3
 */
  (__pyx_v_nbins[0]) = ((npy_intp)3);

  /* "freud/order.pxi":219
 *         cdef np.npy_intp nbins[4]
 *         nbins[0] = <np.npy_intp> 3
 *         nbins[1] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[2] = <np.npy_intp> 3
 *         nbins[3] = <np.npy_intp> 3
 */
  (__pyx_v_nbins[1]) = ((npy_intp)3);

  /* "freud/order.pxi":220
 *         nbins[0] = <np.npy_intp> 3
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[3] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=4] result = \
 */
  (__pyx_v_nbins[2]) = ((npy_intp)3);

  /* "freud/order.pxi":221
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3
 *         nbins[3] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=4] result = \
 *             np.PyArray_SimpleNewFromData(4, nbins, np.NPY_FLOAT32,
 */
  (__pyx_v_nbins[3]) = ((npy_intp)3);

  /* "freud/order.pxi":223
 *         nbins[3] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=4] result = \
 *             np.PyArray_SimpleNewFromData(4, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> gen_r4_tensor)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(4, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_gen_r4_tensor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 223, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 222, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_result.diminfo[2].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_result.diminfo[2].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_result.diminfo[3].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_result.diminfo[3].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[3];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":225
 *             np.PyArray_SimpleNewFromData(4, nbins, np.NPY_FLOAT32,
 *                                          <void*> gen_r4_tensor)
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":208
 *         return result
 * 
 *     def get_gen_r4_tensor(self):             # <<<<<<<<<<<<<<
 *         """Get R4 Tensor.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.get_gen_r4_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_24__reduce_cython__[] = "CubaticOrderParameter.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_24__reduce_cython__(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_21CubaticOrderParameter_26__setstate_cython__[] = "CubaticOrderParameter.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_21CubaticOrderParameter_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21CubaticOrderParameter_26__setstate_cython__(((struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21CubaticOrderParameter_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_CubaticOrderParameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.CubaticOrderParameter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":242
 *     cdef order.NematicOrderParameter *thisptr
 * 
 *     def __cinit__(self, u):             # <<<<<<<<<<<<<<
 *         # run checks
 *         if len(u) != 3:
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_21NematicOrderParameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_21NematicOrderParameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_u = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 242, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_u = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 242, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.NematicOrderParameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_21NematicOrderParameter___cinit__(((struct __pyx_obj_5freud_6_freud_NematicOrderParameter *)__pyx_v_self), __pyx_v_u);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_21NematicOrderParameter___cinit__(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self, PyObject *__pyx_v_u) {
  PyArrayObject *__pyx_v_l_u = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_u;
  __Pyx_Buffer __pyx_pybuffer_l_u;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_l_u.pybuffer.buf = NULL;
  __pyx_pybuffer_l_u.refcount = 0;
  __pyx_pybuffernd_l_u.data = NULL;
  __pyx_pybuffernd_l_u.rcbuffer = &__pyx_pybuffer_l_u;

  /* "freud/order.pxi":244
 *     def __cinit__(self, u):
 *         # run checks
 *         if len(u) != 3:             # <<<<<<<<<<<<<<
 *             raise ValueError('u needs to be a three-dimensional vector')
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_u); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "freud/order.pxi":245
 *         # run checks
 *         if len(u) != 3:
 *             raise ValueError('u needs to be a three-dimensional vector')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] l_u = \
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 245, __pyx_L1_error)

    /* "freud/order.pxi":244
 *     def __cinit__(self, u):
 *         # run checks
 *         if len(u) != 3:             # <<<<<<<<<<<<<<
 *             raise ValueError('u needs to be a three-dimensional vector')
 * 
 */
  }

  /* "freud/order.pxi":248
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] l_u = \
 *             np.array(u, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         self.thisptr = new order.NematicOrderParameter(
 *             (<vec3[float]*> l_u.data)[0])
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_u);
  __Pyx_GIVEREF(__pyx_v_u);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_u);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_u.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_l_u = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_u.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 247, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_u.diminfo[0].strides = __pyx_pybuffernd_l_u.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_u.diminfo[0].shape = __pyx_pybuffernd_l_u.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_l_u = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "freud/order.pxi":249
 *         cdef np.ndarray[np.float32_t, ndim=1] l_u = \
 *             np.array(u, dtype=np.float32)
 *         self.thisptr = new order.NematicOrderParameter(             # <<<<<<<<<<<<<<
 *             (<vec3[float]*> l_u.data)[0])
 * 
 */
  __pyx_v_self->thisptr = new freud::order::NematicOrderParameter((((vec3<float>  *)__pyx_v_l_u->data)[0]));

  /* "freud/order.pxi":242
 *     cdef order.NematicOrderParameter *thisptr
 * 
 *     def __cinit__(self, u):             # <<<<<<<<<<<<<<
 *         # run checks
 *         if len(u) != 3:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_u.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.NematicOrderParameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_u.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_u);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":252
 *             (<vec3[float]*> l_u.data)[0])
 * 
 *     def compute(self, orientations):             # <<<<<<<<<<<<<<
 *         """Calculates the per-particle and global order parameter.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_3compute(PyObject *__pyx_v_self, PyObject *__pyx_v_orientations); /*proto*/
static char __pyx_doc_5freud_6_freud_21NematicOrderParameter_2compute[] = "NematicOrderParameter.compute(self, orientations)\nCalculates the per-particle and global order parameter.\n\n        Args:\n            orientations (:math:`\\left(N_{particles}, 4 \\right)`             :class:`numpy.ndarray`):\n                Orientations to calculate the order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_3compute(PyObject *__pyx_v_self, PyObject *__pyx_v_orientations) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21NematicOrderParameter_2compute(((struct __pyx_obj_5freud_6_freud_NematicOrderParameter *)__pyx_v_self), ((PyObject *)__pyx_v_orientations));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_2compute(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self, PyObject *__pyx_v_orientations) {
  PyArrayObject *__pyx_v_l_orientations = 0;
  unsigned int __pyx_v_num_particles;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_orientations;
  __Pyx_Buffer __pyx_pybuffer_l_orientations;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  __Pyx_RefNannySetupContext("compute", 0);
  __Pyx_INCREF(__pyx_v_orientations);
  __pyx_pybuffer_l_orientations.pybuffer.buf = NULL;
  __pyx_pybuffer_l_orientations.refcount = 0;
  __pyx_pybuffernd_l_orientations.data = NULL;
  __pyx_pybuffernd_l_orientations.rcbuffer = &__pyx_pybuffer_l_orientations;

  /* "freud/order.pxi":260
 *                 Orientations to calculate the order parameter.
 *         """
 *         orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":261
 *         """
 *         orientations = freud.common.convert_array(
 *             orientations, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_orientations);
  __Pyx_GIVEREF(__pyx_v_orientations);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_orientations);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(0, 261, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_orientations) < 0) __PYX_ERR(0, 261, __pyx_L1_error)

  /* "freud/order.pxi":260
 *                 Orientations to calculate the order parameter.
 *         """
 *         orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_orientations, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":263
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('orientations should be an Nx4 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_orientations, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/order.pxi":264
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:
 *             raise TypeError('orientations should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 264, __pyx_L1_error)

    /* "freud/order.pxi":263
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('orientations should be an Nx4 array')
 * 
 */
  }

  /* "freud/order.pxi":266
 *             raise TypeError('orientations should be an Nx4 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations             # <<<<<<<<<<<<<<
 *         cdef unsigned int num_particles = <unsigned int> orientations.shape[0]
 * 
 */
  if (!(likely(((__pyx_v_orientations) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_orientations, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 266, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_orientations;
  __Pyx_INCREF(__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_5), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_orientations = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 266, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_orientations.diminfo[0].strides = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_orientations.diminfo[0].shape = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_orientations.diminfo[1].strides = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_orientations.diminfo[1].shape = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_orientations = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":267
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 *         cdef unsigned int num_particles = <unsigned int> orientations.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_orientations, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_num_particles = ((unsigned int)__pyx_t_7);

  /* "freud/order.pxi":269
 *         cdef unsigned int num_particles = <unsigned int> orientations.shape[0]
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.compute(<quat[float]*> l_orientations.data,
 *                                  num_particles)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/order.pxi":270
 * 
 *         with nogil:
 *             self.thisptr.compute(<quat[float]*> l_orientations.data,             # <<<<<<<<<<<<<<
 *                                  num_particles)
 * 
 */
        try {
          __pyx_v_self->thisptr->compute(((quat<float>  *)__pyx_v_l_orientations->data), __pyx_v_num_particles);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 270, __pyx_L5_error)
        }
      }

      /* "freud/order.pxi":269
 *         cdef unsigned int num_particles = <unsigned int> orientations.shape[0]
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.compute(<quat[float]*> l_orientations.data,
 *                                  num_particles)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "freud/order.pxi":252
 *             (<vec3[float]*> l_u.data)[0])
 * 
 *     def compute(self, orientations):             # <<<<<<<<<<<<<<
 *         """Calculates the per-particle and global order parameter.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.NematicOrderParameter.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_orientations);
  __Pyx_XDECREF(__pyx_v_orientations);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":273
 *                                  num_particles)
 * 
 *     def get_nematic_order_parameter(self):             # <<<<<<<<<<<<<<
 *         """The nematic order parameter.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_5get_nematic_order_parameter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21NematicOrderParameter_4get_nematic_order_parameter[] = "NematicOrderParameter.get_nematic_order_parameter(self)\nThe nematic order parameter.\n\n        Returns:\n            float: Nematic order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_5get_nematic_order_parameter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_nematic_order_parameter (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21NematicOrderParameter_4get_nematic_order_parameter(((struct __pyx_obj_5freud_6_freud_NematicOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_4get_nematic_order_parameter(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_nematic_order_parameter", 0);

  /* "freud/order.pxi":279
 *             float: Nematic order parameter.
 *         """
 *         return self.thisptr.getNematicOrderParameter()             # <<<<<<<<<<<<<<
 * 
 *     def get_director(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getNematicOrderParameter()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":273
 *                                  num_particles)
 * 
 *     def get_nematic_order_parameter(self):             # <<<<<<<<<<<<<<
 *         """The nematic order parameter.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.NematicOrderParameter.get_nematic_order_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":281
 *         return self.thisptr.getNematicOrderParameter()
 * 
 *     def get_director(self):             # <<<<<<<<<<<<<<
 *         """The director (eigenvector corresponding to the order parameter).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_7get_director(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21NematicOrderParameter_6get_director[] = "NematicOrderParameter.get_director(self)\nThe director (eigenvector corresponding to the order parameter).\n\n        Returns:\n            :math:`\\left(3 \\right)` :class:`numpy.ndarray`:\n                The average nematic director.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_7get_director(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_director (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21NematicOrderParameter_6get_director(((struct __pyx_obj_5freud_6_freud_NematicOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_6get_director(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self) {
  vec3<float>  __pyx_v_n;
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("get_director", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":288
 *                 The average nematic director.
 *         """
 *         cdef vec3[float] n = self.thisptr.getNematicDirector()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=1] result = np.array(
 *             [n.x, n.y, n.z], dtype=np.float32)
 */
  __pyx_v_n = __pyx_v_self->thisptr->getNematicDirector();

  /* "freud/order.pxi":289
 *         """
 *         cdef vec3[float] n = self.thisptr.getNematicDirector()
 *         cdef np.ndarray[np.float32_t, ndim=1] result = np.array(             # <<<<<<<<<<<<<<
 *             [n.x, n.y, n.z], dtype=np.float32)
 *         return result
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":290
 *         cdef vec3[float] n = self.thisptr.getNematicDirector()
 *         cdef np.ndarray[np.float32_t, ndim=1] result = np.array(
 *             [n.x, n.y, n.z], dtype=np.float32)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_n.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_n.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_n.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;

  /* "freud/order.pxi":289
 *         """
 *         cdef vec3[float] n = self.thisptr.getNematicDirector()
 *         cdef np.ndarray[np.float32_t, ndim=1] result = np.array(             # <<<<<<<<<<<<<<
 *             [n.x, n.y, n.z], dtype=np.float32)
 *         return result
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":290
 *         cdef vec3[float] n = self.thisptr.getNematicDirector()
 *         cdef np.ndarray[np.float32_t, ndim=1] result = np.array(
 *             [n.x, n.y, n.z], dtype=np.float32)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":289
 *         """
 *         cdef vec3[float] n = self.thisptr.getNematicDirector()
 *         cdef np.ndarray[np.float32_t, ndim=1] result = np.array(             # <<<<<<<<<<<<<<
 *             [n.x, n.y, n.z], dtype=np.float32)
 *         return result
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 289, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 289, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":291
 *         cdef np.ndarray[np.float32_t, ndim=1] result = np.array(
 *             [n.x, n.y, n.z], dtype=np.float32)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def get_particle_tensor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":281
 *         return self.thisptr.getNematicOrderParameter()
 * 
 *     def get_director(self):             # <<<<<<<<<<<<<<
 *         """The director (eigenvector corresponding to the order parameter).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.NematicOrderParameter.get_director", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":293
 *         return result
 * 
 *     def get_particle_tensor(self):             # <<<<<<<<<<<<<<
 *         """The full per-particle tensor of orientation information.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_9get_particle_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21NematicOrderParameter_8get_particle_tensor[] = "NematicOrderParameter.get_particle_tensor(self)\nThe full per-particle tensor of orientation information.\n\n        Returns:\n            :math:`\\left(N_{particles}, 3, 3 \\right)` :class:`numpy.ndarray`:\n                3x3 matrix corresponding to each individual particle\n                orientation.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_9get_particle_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_particle_tensor (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21NematicOrderParameter_8get_particle_tensor(((struct __pyx_obj_5freud_6_freud_NematicOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_8get_particle_tensor(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self) {
  float *__pyx_v_particle_tensor;
  npy_intp __pyx_v_nbins[3];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_particle_tensor", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":301
 *                 orientation.
 *         """
 *         cdef float *particle_tensor = self.thisptr.getParticleTensor().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[3]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 */
  __pyx_v_particle_tensor = __pyx_v_self->thisptr->getParticleTensor().get();

  /* "freud/order.pxi":303
 *         cdef float *particle_tensor = self.thisptr.getParticleTensor().get()
 *         cdef np.npy_intp nbins[3]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()             # <<<<<<<<<<<<<<
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNumParticles());

  /* "freud/order.pxi":304
 *         cdef np.npy_intp nbins[3]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 *         nbins[1] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[2] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=3] result = \
 */
  (__pyx_v_nbins[1]) = ((npy_intp)3);

  /* "freud/order.pxi":305
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 *         nbins[1] = <np.npy_intp> 3
 *         nbins[2] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=3] result = \
 *             np.PyArray_SimpleNewFromData(3, nbins, np.NPY_FLOAT32,
 */
  (__pyx_v_nbins[2]) = ((npy_intp)3);

  /* "freud/order.pxi":307
 *         nbins[2] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=3] result = \
 *             np.PyArray_SimpleNewFromData(3, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> particle_tensor)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(3, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_particle_tensor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 307, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 3, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 306, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_result.diminfo[2].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_result.diminfo[2].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[2];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":309
 *             np.PyArray_SimpleNewFromData(3, nbins, np.NPY_FLOAT32,
 *                                          <void*> particle_tensor)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def get_nematic_tensor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":293
 *         return result
 * 
 *     def get_particle_tensor(self):             # <<<<<<<<<<<<<<
 *         """The full per-particle tensor of orientation information.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.NematicOrderParameter.get_particle_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":311
 *         return result
 * 
 *     def get_nematic_tensor(self):             # <<<<<<<<<<<<<<
 *         """The nematic Q tensor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_11get_nematic_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21NematicOrderParameter_10get_nematic_tensor[] = "NematicOrderParameter.get_nematic_tensor(self)\nThe nematic Q tensor.\n\n        Returns:\n            :math:`\\left(3, 3 \\right)` :class:`numpy.ndarray`:\n                3x3 matrix corresponding to the average particle orientation.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_11get_nematic_tensor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_nematic_tensor (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21NematicOrderParameter_10get_nematic_tensor(((struct __pyx_obj_5freud_6_freud_NematicOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_10get_nematic_tensor(struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self) {
  float *__pyx_v_nematic_tensor;
  npy_intp __pyx_v_nbins[2];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_nematic_tensor", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":318
 *                 3x3 matrix corresponding to the average particle orientation.
 *         """
 *         cdef float *nematic_tensor = self.thisptr.getNematicTensor().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> 3
 */
  __pyx_v_nematic_tensor = __pyx_v_self->thisptr->getNematicTensor().get();

  /* "freud/order.pxi":320
 *         cdef float *nematic_tensor = self.thisptr.getNematicTensor().get()
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         nbins[1] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=2] result = \
 */
  (__pyx_v_nbins[0]) = ((npy_intp)3);

  /* "freud/order.pxi":321
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> 3
 *         nbins[1] = <np.npy_intp> 3             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=2] result = \
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_FLOAT32,
 */
  (__pyx_v_nbins[1]) = ((npy_intp)3);

  /* "freud/order.pxi":323
 *         nbins[1] = <np.npy_intp> 3
 *         cdef np.ndarray[np.float32_t, ndim=2] result = \
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> nematic_tensor)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(2, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_nematic_tensor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 323, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 322, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":325
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_FLOAT32,
 *                                          <void*> nematic_tensor)
 *         return result             # <<<<<<<<<<<<<<
 * 
 * cdef class HexOrderParameter:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":311
 *         return result
 * 
 *     def get_nematic_tensor(self):             # <<<<<<<<<<<<<<
 *         """The nematic Q tensor.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.NematicOrderParameter.get_nematic_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_21NematicOrderParameter_12__reduce_cython__[] = "NematicOrderParameter.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21NematicOrderParameter_12__reduce_cython__(((struct __pyx_obj_5freud_6_freud_NematicOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.NematicOrderParameter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_21NematicOrderParameter_14__setstate_cython__[] = "NematicOrderParameter.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_21NematicOrderParameter_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_21NematicOrderParameter_14__setstate_cython__(((struct __pyx_obj_5freud_6_freud_NematicOrderParameter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_21NematicOrderParameter_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_NematicOrderParameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.NematicOrderParameter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":371
 *     cdef rmax
 * 
 *     def __cinit__(self, rmax, k=int(6), n=int(0)):             # <<<<<<<<<<<<<<
 *         self.thisptr = new order.HexOrderParameter(rmax, k, n)
 *         self.rmax = rmax
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_17HexOrderParameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_17HexOrderParameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_n = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rmax,&__pyx_n_s_k,&__pyx_n_s_n,0};
    PyObject* values[3] = {0,0,0};
    values[1] = __pyx_k__11;
    values[2] = __pyx_k__12;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 371, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rmax = values[0];
    __pyx_v_k = values[1];
    __pyx_v_n = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 371, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter___cinit__(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self), __pyx_v_rmax, __pyx_v_k, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_17HexOrderParameter___cinit__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self, PyObject *__pyx_v_rmax, PyObject *__pyx_v_k, PyObject *__pyx_v_n) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  unsigned int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "freud/order.pxi":372
 * 
 *     def __cinit__(self, rmax, k=int(6), n=int(0)):
 *         self.thisptr = new order.HexOrderParameter(rmax, k, n)             # <<<<<<<<<<<<<<
 *         self.rmax = rmax
 *         self.num_neigh = (n if n else int(k))
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_rmax); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_k); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_n); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
  __pyx_v_self->thisptr = new freud::order::HexOrderParameter(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "freud/order.pxi":373
 *     def __cinit__(self, rmax, k=int(6), n=int(0)):
 *         self.thisptr = new order.HexOrderParameter(rmax, k, n)
 *         self.rmax = rmax             # <<<<<<<<<<<<<<
 *         self.num_neigh = (n if n else int(k))
 * 
 */
  __Pyx_INCREF(__pyx_v_rmax);
  __Pyx_GIVEREF(__pyx_v_rmax);
  __Pyx_GOTREF(__pyx_v_self->rmax);
  __Pyx_DECREF(__pyx_v_self->rmax);
  __pyx_v_self->rmax = __pyx_v_rmax;

  /* "freud/order.pxi":374
 *         self.thisptr = new order.HexOrderParameter(rmax, k, n)
 *         self.rmax = rmax
 *         self.num_neigh = (n if n else int(k))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_n); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 374, __pyx_L1_error)
  if (__pyx_t_5) {
    __Pyx_INCREF(__pyx_v_n);
    __pyx_t_4 = __pyx_v_n;
  } else {
    __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_v_k); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __pyx_t_6;
    __pyx_t_6 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->num_neigh);
  __Pyx_DECREF(__pyx_v_self->num_neigh);
  __pyx_v_self->num_neigh = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "freud/order.pxi":371
 *     cdef rmax
 * 
 *     def __cinit__(self, rmax, k=int(6), n=int(0)):             # <<<<<<<<<<<<<<
 *         self.thisptr = new order.HexOrderParameter(rmax, k, n)
 *         self.rmax = rmax
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":376
 *         self.num_neigh = (n if n else int(k))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_17HexOrderParameter_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_17HexOrderParameter_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_17HexOrderParameter_2__dealloc__(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_17HexOrderParameter_2__dealloc__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/order.pxi":377
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, box, points, nlist=None):
 */
  delete __pyx_v_self->thisptr;

  /* "freud/order.pxi":376
 *         self.num_neigh = (n if n else int(k))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/order.pxi":379
 *         del self.thisptr
 * 
 *     def compute(self, box, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Calculates the correlation function and adds to the current
 *         histogram.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_5compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_17HexOrderParameter_4compute[] = "HexOrderParameter.compute(self, box, points, nlist=None)\nCalculates the correlation function and adds to the current\n        histogram.\n\n        Args:\n            box (:class:`freud.box.Box`):\n                Simulation box.\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`):\n                Neighborlist to use to find bonds.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_5compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute", 0, 2, 3, 1); __PYX_ERR(0, 379, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute") < 0)) __PYX_ERR(0, 379, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_points = values[1];
    __pyx_v_nlist = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 379, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter_4compute(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self), __pyx_v_box, __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_4compute(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  freud::box::Box __pyx_v_l_box;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  float __pyx_t_13;
  float __pyx_t_14;
  bool __pyx_t_15;
  __Pyx_RefNannySetupContext("compute", 0);
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/order.pxi":391
 *                 Neighborlist to use to find bonds.
 *         """
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":392
 *         """
 *         box = freud.common.convert_box(box)
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":393
 *         box = freud.common.convert_box(box)
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(0, 393, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(0, 393, __pyx_L1_error)

  /* "freud/order.pxi":392
 *         """
 *         box = freud.common.convert_box(box)
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":394
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/order.pxi":395
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 395, __pyx_L1_error)

    /* "freud/order.pxi":394
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/order.pxi":397
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 397, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_5), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 397, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":398
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_7);

  /* "freud/order.pxi":400
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "freud/order.pxi":401
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[8] = {__pyx_t_2, __pyx_v_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->rmax};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 7+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[8] = {__pyx_t_2, __pyx_v_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->rmax};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 7+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(7+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_box);
    __Pyx_GIVEREF(__pyx_v_box);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_v_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_8, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_8, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_8, Py_True);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_1, 6+__pyx_t_8, __pyx_v_self->rmax);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "freud/order.pxi":402
 *         defaulted_nlist = make_default_nlist_nn(
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 402, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/order.pxi":403
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         cdef _box.Box l_box = _box.Box(
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/order.pxi":406
 * 
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         with nogil:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/order.pxi":407
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.compute(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_15 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/order.pxi":405
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15);

  /* "freud/order.pxi":408
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.compute(
 *                 l_box, nlist_ptr, <vec3[float]*> l_points.data, nP)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/order.pxi":409
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         with nogil:
 *             self.thisptr.compute(             # <<<<<<<<<<<<<<
 *                 l_box, nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self
 */
        try {
          __pyx_v_self->thisptr->compute(__pyx_v_l_box, __pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 409, __pyx_L5_error)
        }
      }

      /* "freud/order.pxi":408
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.compute(
 *                 l_box, nlist_ptr, <vec3[float]*> l_points.data, nP)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "freud/order.pxi":411
 *             self.thisptr.compute(
 *                 l_box, nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/order.pxi":379
 *         del self.thisptr
 * 
 *     def compute(self, box, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Calculates the correlation function and adds to the current
 *         histogram.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":414
 * 
 *     @property
 *     def psi(self):             # <<<<<<<<<<<<<<
 *         return self.getPsi()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_3psi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_3psi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter_3psi___get__(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_3psi___get__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":415
 *     @property
 *     def psi(self):
 *         return self.getPsi()             # <<<<<<<<<<<<<<
 * 
 *     def getPsi(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPsi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":414
 * 
 *     @property
 *     def psi(self):             # <<<<<<<<<<<<<<
 *         return self.getPsi()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.psi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":417
 *         return self.getPsi()
 * 
 *     def getPsi(self):             # <<<<<<<<<<<<<<
 *         """Get the order parameter.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_7getPsi(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17HexOrderParameter_6getPsi[] = "HexOrderParameter.getPsi(self)\nGet the order parameter.\n\n        Returns:\n            :math:`\\left(N_{particles} \\right)` :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_7getPsi(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPsi (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter_6getPsi(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_6getPsi(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self) {
  __pyx_t_float_complex *__pyx_v_psi;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getPsi", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":424
 *                 Order parameter.
 *         """
 *         cdef float complex * psi = self.thisptr.getPsi().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 */
  __pyx_v_psi = __pyx_v_self->thisptr->getPsi().get();

  /* "freud/order.pxi":426
 *         cdef float complex * psi = self.thisptr.getPsi().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNP());

  /* "freud/order.pxi":428
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,             # <<<<<<<<<<<<<<
 *                                          <void*> psi)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_COMPLEX64, ((void *)__pyx_v_psi)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 428, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo___pyx_t_float_complex, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 427, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":430
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 *                                          <void*> psi)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":417
 *         return self.getPsi()
 * 
 *     def getPsi(self):             # <<<<<<<<<<<<<<
 *         """Get the order parameter.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.getPsi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":433
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_3box_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_3box_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter_3box___get__(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_3box___get__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":434
 *     @property
 *     def box(self):
 *         return self.getBox()             # <<<<<<<<<<<<<<
 * 
 *     def getBox(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getBox); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":433
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.box.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":436
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_9getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17HexOrderParameter_8getBox[] = "HexOrderParameter.getBox(self)\nGet the box used in the calculation.\n\n        Returns:\n          :class:`freud.box.Box`: freud Box.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_9getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBox (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter_8getBox(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_8getBox(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getBox", 0);

  /* "freud/order.pxi":442
 *           :class:`freud.box.Box`: freud Box.
 *         """
 *         return BoxFromCPP(< _box.Box > self.thisptr.getBox())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5freud_3box_BoxFromCPP(((freud::box::Box)__pyx_v_self->thisptr->getBox())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":436
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.getBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":445
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_13num_particles_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_13num_particles_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter_13num_particles___get__(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_13num_particles___get__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":446
 *     @property
 *     def num_particles(self):
 *         return self.getNP()             # <<<<<<<<<<<<<<
 * 
 *     def getNP(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":445
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.num_particles.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":448
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_11getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17HexOrderParameter_10getNP[] = "HexOrderParameter.getNP(self)\nGet the number of particles.\n\n        Returns:\n          unsigned int: :math:`N_{particles}`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_11getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNP (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter_10getNP(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_10getNP(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self) {
  unsigned int __pyx_v_np;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNP", 0);

  /* "freud/order.pxi":454
 *           unsigned int: :math:`N_{particles}`.
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         return np
 * 
 */
  __pyx_v_np = __pyx_v_self->thisptr->getNP();

  /* "freud/order.pxi":455
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()
 *         return np             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":448
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.getNP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":458
 * 
 *     @property
 *     def k(self):             # <<<<<<<<<<<<<<
 *         return self.getK()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_1k_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_1k_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter_1k___get__(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_1k___get__(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":459
 *     @property
 *     def k(self):
 *         return self.getK()             # <<<<<<<<<<<<<<
 * 
 *     def getK(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getK); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":458
 * 
 *     @property
 *     def k(self):             # <<<<<<<<<<<<<<
 *         return self.getK()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.k.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":461
 *         return self.getK()
 * 
 *     def getK(self):             # <<<<<<<<<<<<<<
 *         """Get the symmetry of the order parameter.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_13getK(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17HexOrderParameter_12getK[] = "HexOrderParameter.getK(self)\nGet the symmetry of the order parameter.\n\n        Returns:\n          unsigned int: :math:`k`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_13getK(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getK (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter_12getK(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_12getK(struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self) {
  unsigned int __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getK", 0);

  /* "freud/order.pxi":467
 *           unsigned int: :math:`k`.
 *         """
 *         cdef unsigned int k = self.thisptr.getK()             # <<<<<<<<<<<<<<
 *         return k
 * 
 */
  __pyx_v_k = __pyx_v_self->thisptr->getK();

  /* "freud/order.pxi":468
 *         """
 *         cdef unsigned int k = self.thisptr.getK()
 *         return k             # <<<<<<<<<<<<<<
 * 
 * cdef class TransOrderParameter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_k); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":461
 *         return self.getK()
 * 
 *     def getK(self):             # <<<<<<<<<<<<<<
 *         """Get the symmetry of the order parameter.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.getK", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17HexOrderParameter_14__reduce_cython__[] = "HexOrderParameter.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter_14__reduce_cython__(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_17HexOrderParameter_16__setstate_cython__[] = "HexOrderParameter.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_17HexOrderParameter_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17HexOrderParameter_16__setstate_cython__(((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17HexOrderParameter_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_HexOrderParameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.HexOrderParameter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":495
 *     cdef rmax
 * 
 *     def __cinit__(self, rmax, k=6.0, n=0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new order.TransOrderParameter(rmax, k)
 *         self.rmax = rmax
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_19TransOrderParameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_19TransOrderParameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_n = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rmax,&__pyx_n_s_k,&__pyx_n_s_n,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_float_6_0);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 495, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rmax = values[0];
    __pyx_v_k = values[1];
    __pyx_v_n = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 495, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_19TransOrderParameter___cinit__(((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)__pyx_v_self), __pyx_v_rmax, __pyx_v_k, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_19TransOrderParameter___cinit__(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self, PyObject *__pyx_v_rmax, PyObject *__pyx_v_k, PyObject *__pyx_v_n) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "freud/order.pxi":496
 * 
 *     def __cinit__(self, rmax, k=6.0, n=0):
 *         self.thisptr = new order.TransOrderParameter(rmax, k)             # <<<<<<<<<<<<<<
 *         self.rmax = rmax
 *         self.num_neigh = (n if n else int(k))
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_rmax); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 496, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_k); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 496, __pyx_L1_error)
  __pyx_v_self->thisptr = new freud::order::TransOrderParameter(__pyx_t_1, __pyx_t_2);

  /* "freud/order.pxi":497
 *     def __cinit__(self, rmax, k=6.0, n=0):
 *         self.thisptr = new order.TransOrderParameter(rmax, k)
 *         self.rmax = rmax             # <<<<<<<<<<<<<<
 *         self.num_neigh = (n if n else int(k))
 * 
 */
  __Pyx_INCREF(__pyx_v_rmax);
  __Pyx_GIVEREF(__pyx_v_rmax);
  __Pyx_GOTREF(__pyx_v_self->rmax);
  __Pyx_DECREF(__pyx_v_self->rmax);
  __pyx_v_self->rmax = __pyx_v_rmax;

  /* "freud/order.pxi":498
 *         self.thisptr = new order.TransOrderParameter(rmax, k)
 *         self.rmax = rmax
 *         self.num_neigh = (n if n else int(k))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_n); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 498, __pyx_L1_error)
  if (__pyx_t_4) {
    __Pyx_INCREF(__pyx_v_n);
    __pyx_t_3 = __pyx_v_n;
  } else {
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->num_neigh);
  __Pyx_DECREF(__pyx_v_self->num_neigh);
  __pyx_v_self->num_neigh = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "freud/order.pxi":495
 *     cdef rmax
 * 
 *     def __cinit__(self, rmax, k=6.0, n=0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new order.TransOrderParameter(rmax, k)
 *         self.rmax = rmax
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":500
 *         self.num_neigh = (n if n else int(k))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_19TransOrderParameter_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_19TransOrderParameter_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_19TransOrderParameter_2__dealloc__(((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_19TransOrderParameter_2__dealloc__(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/order.pxi":501
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, box, points, nlist=None):
 */
  delete __pyx_v_self->thisptr;

  /* "freud/order.pxi":500
 *         self.num_neigh = (n if n else int(k))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/order.pxi":503
 *         del self.thisptr
 * 
 *     def compute(self, box, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Calculates the local descriptors.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_5compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_19TransOrderParameter_4compute[] = "TransOrderParameter.compute(self, box, points, nlist=None)\nCalculates the local descriptors.\n\n        Args:\n            box (:class:`freud.box.Box`):\n                Simulation box.\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`):\n                Neighborlist to use to find bonds.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_5compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute", 0, 2, 3, 1); __PYX_ERR(0, 503, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute") < 0)) __PYX_ERR(0, 503, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_points = values[1];
    __pyx_v_nlist = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 503, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_19TransOrderParameter_4compute(((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)__pyx_v_self), __pyx_v_box, __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_4compute(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  freud::box::Box __pyx_v_l_box;
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  bool __pyx_t_13;
  unsigned int __pyx_t_14;
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("compute", 0);
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/order.pxi":514
 *                 Neighborlist to use to find bonds.
 *         """
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":515
 *         """
 *         box = freud.common.convert_box(box)
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":516
 *         box = freud.common.convert_box(box)
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(0, 516, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(0, 516, __pyx_L1_error)

  /* "freud/order.pxi":515
 *         """
 *         box = freud.common.convert_box(box)
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":517
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/order.pxi":518
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef _box.Box l_box = _box.Box(
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 518, __pyx_L1_error)

    /* "freud/order.pxi":517
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/order.pxi":521
 * 
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 521, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 521, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 521, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 521, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "freud/order.pxi":522
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 522, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 522, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 522, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 522, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 522, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 522, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "freud/order.pxi":520
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13);

  /* "freud/order.pxi":523
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_5), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 523, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":524
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_14 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_14 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_14);

  /* "freud/order.pxi":526
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "freud/order.pxi":527
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[8] = {__pyx_t_2, __pyx_v_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->rmax};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_15, 7+__pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[8] = {__pyx_t_2, __pyx_v_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->rmax};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_15, 7+__pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(7+__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_box);
    __Pyx_GIVEREF(__pyx_v_box);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_15, __pyx_v_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_15, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_15, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_15, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_15, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_15, Py_True);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_1, 6+__pyx_t_15, __pyx_v_self->rmax);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "freud/order.pxi":528
 *         defaulted_nlist = make_default_nlist_nn(
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 528, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/order.pxi":529
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/order.pxi":531
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.compute(
 *                 l_box, nlist_ptr, <vec3[float]*> l_points.data, nP)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/order.pxi":532
 * 
 *         with nogil:
 *             self.thisptr.compute(             # <<<<<<<<<<<<<<
 *                 l_box, nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self
 */
        try {
          __pyx_v_self->thisptr->compute(__pyx_v_l_box, __pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 532, __pyx_L5_error)
        }
      }

      /* "freud/order.pxi":531
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.compute(
 *                 l_box, nlist_ptr, <vec3[float]*> l_points.data, nP)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "freud/order.pxi":534
 *             self.thisptr.compute(
 *                 l_box, nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/order.pxi":503
 *         del self.thisptr
 * 
 *     def compute(self, box, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Calculates the local descriptors.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":537
 * 
 *     @property
 *     def d_r(self):             # <<<<<<<<<<<<<<
 *         return self.getDr()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_3d_r_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_3d_r_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_19TransOrderParameter_3d_r___get__(((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_3d_r___get__(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":538
 *     @property
 *     def d_r(self):
 *         return self.getDr()             # <<<<<<<<<<<<<<
 * 
 *     def getDr(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getDr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":537
 * 
 *     @property
 *     def d_r(self):             # <<<<<<<<<<<<<<
 *         return self.getDr()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.d_r.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":540
 *         return self.getDr()
 * 
 *     def getDr(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed spherical harmonic array.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_7getDr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_19TransOrderParameter_6getDr[] = "TransOrderParameter.getDr(self)\nGet a reference to the last computed spherical harmonic array.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_7getDr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDr (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_19TransOrderParameter_6getDr(((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_6getDr(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self) {
  __pyx_t_float_complex *__pyx_v_dr;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getDr", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":547
 *                 Order parameter.
 *         """
 *         cdef float complex * dr = self.thisptr.getDr().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 */
  __pyx_v_dr = __pyx_v_self->thisptr->getDr().get();

  /* "freud/order.pxi":549
 *         cdef float complex * dr = self.thisptr.getDr().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNP());

  /* "freud/order.pxi":551
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,             # <<<<<<<<<<<<<<
 *                                          <void*> dr)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_COMPLEX64, ((void *)__pyx_v_dr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 551, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo___pyx_t_float_complex, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 550, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":553
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 *                                          <void*> dr)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":540
 *         return self.getDr()
 * 
 *     def getDr(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed spherical harmonic array.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.getDr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":556
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_3box_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_3box_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_19TransOrderParameter_3box___get__(((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_3box___get__(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":557
 *     @property
 *     def box(self):
 *         return self.getBox()             # <<<<<<<<<<<<<<
 * 
 *     def getBox(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getBox); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":556
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.box.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":559
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_9getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_19TransOrderParameter_8getBox[] = "TransOrderParameter.getBox(self)\nGet the box used in the calculation.\n\n        Returns:\n            :class:`freud.box.Box`: freud Box.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_9getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBox (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_19TransOrderParameter_8getBox(((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_8getBox(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getBox", 0);

  /* "freud/order.pxi":565
 *             :class:`freud.box.Box`: freud Box.
 *         """
 *         return BoxFromCPP(< _box.Box > self.thisptr.getBox())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5freud_3box_BoxFromCPP(((freud::box::Box)__pyx_v_self->thisptr->getBox())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":559
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.getBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":568
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_13num_particles_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_13num_particles_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_19TransOrderParameter_13num_particles___get__(((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_13num_particles___get__(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":569
 *     @property
 *     def num_particles(self):
 *         return self.getNP()             # <<<<<<<<<<<<<<
 * 
 *     def getNP(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":568
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.num_particles.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":571
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_11getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_19TransOrderParameter_10getNP[] = "TransOrderParameter.getNP(self)\nGet the number of particles.\n\n        Returns:\n            unsigned int: :math:`N_{particles}`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_11getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNP (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_19TransOrderParameter_10getNP(((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_10getNP(struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self) {
  unsigned int __pyx_v_np;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNP", 0);

  /* "freud/order.pxi":577
 *             unsigned int: :math:`N_{particles}`.
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         return np
 * 
 */
  __pyx_v_np = __pyx_v_self->thisptr->getNP();

  /* "freud/order.pxi":578
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()
 *         return np             # <<<<<<<<<<<<<<
 * 
 * cdef class LocalQl:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":571
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.getNP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_19TransOrderParameter_12__reduce_cython__[] = "TransOrderParameter.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_19TransOrderParameter_12__reduce_cython__(((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_19TransOrderParameter_14__setstate_cython__[] = "TransOrderParameter.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_19TransOrderParameter_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_19TransOrderParameter_14__setstate_cython__(((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_19TransOrderParameter_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_TransOrderParameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.TransOrderParameter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":646
 *     cdef rmax
 * 
 *     def __cinit__(self, box, rmax, l, rmin=0):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_7LocalQl_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_7LocalQl_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_rmin = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_rmax,&__pyx_n_s_l,&__pyx_n_s_rmin,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(0, 646, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(0, 646, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmin);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 646, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_rmax = values[1];
    __pyx_v_l = values[2];
    __pyx_v_rmin = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 646, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalQl.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl___cinit__(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self), __pyx_v_box, __pyx_v_rmax, __pyx_v_l, __pyx_v_rmin);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_7LocalQl___cinit__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_l, PyObject *__pyx_v_rmin) {
  freud::box::Box __pyx_v_l_box;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  bool __pyx_t_13;
  unsigned int __pyx_t_14;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/order.pxi":647
 * 
 *     def __cinit__(self, box, rmax, l, rmin=0):
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box
 *         if type(self) is LocalQl:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":649
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box
 *         if type(self) is LocalQl:             # <<<<<<<<<<<<<<
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_5 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5freud_6_freud_LocalQl));
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "freud/order.pxi":651
 *         if type(self) is LocalQl:
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *                 box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *             self.m_box = box
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "freud/order.pxi":652
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *                 box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *             self.m_box = box
 *             self.rmax = rmax
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "freud/order.pxi":650
 *         cdef _box.Box l_box
 *         if type(self) is LocalQl:
 *             l_box = _box.Box(             # <<<<<<<<<<<<<<
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *                 box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
    __pyx_v_l_box = freud::box::Box(__pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13);

    /* "freud/order.pxi":653
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *                 box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *             self.m_box = box             # <<<<<<<<<<<<<<
 *             self.rmax = rmax
 *             self.qlptr = new order.LocalQl(l_box, rmax, l, rmin)
 */
    __Pyx_INCREF(__pyx_v_box);
    __Pyx_GIVEREF(__pyx_v_box);
    __Pyx_GOTREF(__pyx_v_self->m_box);
    __Pyx_DECREF(__pyx_v_self->m_box);
    __pyx_v_self->m_box = __pyx_v_box;

    /* "freud/order.pxi":654
 *                 box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *             self.m_box = box
 *             self.rmax = rmax             # <<<<<<<<<<<<<<
 *             self.qlptr = new order.LocalQl(l_box, rmax, l, rmin)
 * 
 */
    __Pyx_INCREF(__pyx_v_rmax);
    __Pyx_GIVEREF(__pyx_v_rmax);
    __Pyx_GOTREF(__pyx_v_self->rmax);
    __Pyx_DECREF(__pyx_v_self->rmax);
    __pyx_v_self->rmax = __pyx_v_rmax;

    /* "freud/order.pxi":655
 *             self.m_box = box
 *             self.rmax = rmax
 *             self.qlptr = new order.LocalQl(l_box, rmax, l, rmin)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_v_rmax); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 655, __pyx_L1_error)
    __pyx_t_14 = __Pyx_PyInt_As_unsigned_int(__pyx_v_l); if (unlikely((__pyx_t_14 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 655, __pyx_L1_error)
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_v_rmin); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 655, __pyx_L1_error)
    __pyx_v_self->qlptr = new freud::order::LocalQl(__pyx_v_l_box, __pyx_t_12, __pyx_t_14, __pyx_t_11);

    /* "freud/order.pxi":649
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box
 *         if type(self) is LocalQl:             # <<<<<<<<<<<<<<
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  }

  /* "freud/order.pxi":646
 *     cdef rmax
 * 
 *     def __cinit__(self, box, rmax, l, rmin=0):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.LocalQl.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":657
 *             self.qlptr = new order.LocalQl(l_box, rmax, l, rmin)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is LocalQl:
 *             del self.qlptr
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_7LocalQl_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_7LocalQl_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_7LocalQl_2__dealloc__(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_7LocalQl_2__dealloc__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/order.pxi":658
 * 
 *     def __dealloc__(self):
 *         if type(self) is LocalQl:             # <<<<<<<<<<<<<<
 *             del self.qlptr
 *             self.qlptr = NULL
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5freud_6_freud_LocalQl));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "freud/order.pxi":659
 *     def __dealloc__(self):
 *         if type(self) is LocalQl:
 *             del self.qlptr             # <<<<<<<<<<<<<<
 *             self.qlptr = NULL
 * 
 */
    delete __pyx_v_self->qlptr;

    /* "freud/order.pxi":660
 *         if type(self) is LocalQl:
 *             del self.qlptr
 *             self.qlptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_v_self->qlptr = NULL;

    /* "freud/order.pxi":658
 * 
 *     def __dealloc__(self):
 *         if type(self) is LocalQl:             # <<<<<<<<<<<<<<
 *             del self.qlptr
 *             self.qlptr = NULL
 */
  }

  /* "freud/order.pxi":657
 *             self.qlptr = new order.LocalQl(l_box, rmax, l, rmin)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is LocalQl:
 *             del self.qlptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/order.pxi":663
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_3box_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_3box_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_3box___get__(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_3box___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":664
 *     @property
 *     def box(self):
 *         return self.getBox()             # <<<<<<<<<<<<<<
 * 
 *     @box.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getBox); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":663
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalQl.box.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":667
 * 
 *     @box.setter
 *     def box(self, value):             # <<<<<<<<<<<<<<
 *         self.setBox(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_7LocalQl_3box_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5freud_6_freud_7LocalQl_3box_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_3box_2__set__(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_7LocalQl_3box_2__set__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "freud/order.pxi":668
 *     @box.setter
 *     def box(self, value):
 *         self.setBox(value)             # <<<<<<<<<<<<<<
 * 
 *     def getBox(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setBox); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 668, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 668, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_value);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":667
 * 
 *     @box.setter
 *     def box(self, value):             # <<<<<<<<<<<<<<
 *         self.setBox(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.LocalQl.box.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":670
 *         self.setBox(value)
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_5getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_4getBox[] = "LocalQl.getBox(self)\nGet the box used in the calculation.\n\n        Returns:\n            :class:`freud.box.Box`: freud Box.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_5getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBox (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_4getBox(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_4getBox(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getBox", 0);

  /* "freud/order.pxi":676
 *             :class:`freud.box.Box`: freud Box.
 *         """
 *         return BoxFromCPP(< _box.Box > self.qlptr.getBox())             # <<<<<<<<<<<<<<
 * 
 *     def setBox(self, box):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5freud_3box_BoxFromCPP(((freud::box::Box)__pyx_v_self->qlptr->getBox())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":670
 *         self.setBox(value)
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalQl.getBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":678
 *         return BoxFromCPP(< _box.Box > self.qlptr.getBox())
 * 
 *     def setBox(self, box):             # <<<<<<<<<<<<<<
 *         """Reset the simulation box.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_7setBox(PyObject *__pyx_v_self, PyObject *__pyx_v_box); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_6setBox[] = "LocalQl.setBox(self, box)\nReset the simulation box.\n\n        Args:\n            box (:class:`freud.box.Box`): Simulation box.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_7setBox(PyObject *__pyx_v_self, PyObject *__pyx_v_box) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBox (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_6setBox(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self), ((PyObject *)__pyx_v_box));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_6setBox(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_box) {
  freud::box::Box __pyx_v_l_box;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  bool __pyx_t_11;
  __Pyx_RefNannySetupContext("setBox", 0);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/order.pxi":684
 *             box (:class:`freud.box.Box`): Simulation box.
 *         """
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 684, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":686
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.qlptr.setBox(l_box)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":687
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *         self.qlptr.setBox(l_box)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":685
 *         """
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);

  /* "freud/order.pxi":688
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.qlptr.setBox(l_box)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->qlptr->setBox(__pyx_v_l_box);

  /* "freud/order.pxi":678
 *         return BoxFromCPP(< _box.Box > self.qlptr.getBox())
 * 
 *     def setBox(self, box):             # <<<<<<<<<<<<<<
 *         """Reset the simulation box.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.LocalQl.setBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":691
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_13num_particles_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_13num_particles_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_13num_particles___get__(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_13num_particles___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":692
 *     @property
 *     def num_particles(self):
 *         return self.getNP()             # <<<<<<<<<<<<<<
 * 
 *     def getNP(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":691
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalQl.num_particles.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":694
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_9getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_8getNP[] = "LocalQl.getNP(self)\nGet the number of particles.\n\n        Returns:\n            unsigned int: :math:`N_{particles}`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_9getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNP (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_8getNP(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_8getNP(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  unsigned int __pyx_v_np;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNP", 0);

  /* "freud/order.pxi":700
 *             unsigned int: :math:`N_{particles}`.
 *         """
 *         cdef unsigned int np = self.qlptr.getNP()             # <<<<<<<<<<<<<<
 *         return np
 * 
 */
  __pyx_v_np = __pyx_v_self->qlptr->getNP();

  /* "freud/order.pxi":701
 *         """
 *         cdef unsigned int np = self.qlptr.getNP()
 *         return np             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":694
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalQl.getNP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":704
 * 
 *     @property
 *     def Ql(self):             # <<<<<<<<<<<<<<
 *         return self.getQl()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_2Ql_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_2Ql_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_2Ql___get__(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_2Ql___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":705
 *     @property
 *     def Ql(self):
 *         return self.getQl()             # <<<<<<<<<<<<<<
 * 
 *     def getQl(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getQl); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 705, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":704
 * 
 *     @property
 *     def Ql(self):             # <<<<<<<<<<<<<<
 *         return self.getQl()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalQl.Ql.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":707
 *         return self.getQl()
 * 
 *     def getQl(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`Q_l` for each particle.
 *         Returns NaN instead of :math:`Q_l` for particles with no neighbors.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_11getQl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_10getQl[] = "LocalQl.getQl(self)\nGet a reference to the last computed :math:`Q_l` for each particle.\n        Returns NaN instead of :math:`Q_l` for particles with no neighbors.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_11getQl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQl (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_10getQl(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_10getQl(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  float *__pyx_v_Ql;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getQl", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":715
 *                 Order parameter.
 *         """
 *         cdef float * Ql = self.qlptr.getQl().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 */
  __pyx_v_Ql = __pyx_v_self->qlptr->getQl().get();

  /* "freud/order.pxi":717
 *         cdef float * Ql = self.qlptr.getQl().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->qlptr->getNP());

  /* "freud/order.pxi":719
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_Ql)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 719, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 718, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":720
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":707
 *         return self.getQl()
 * 
 *     def getQl(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`Q_l` for each particle.
 *         Returns NaN instead of :math:`Q_l` for particles with no neighbors.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalQl.getQl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":723
 * 
 *     @property
 *     def ave_Ql(self):             # <<<<<<<<<<<<<<
 *         return self.getAveQl()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_6ave_Ql_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_6ave_Ql_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_6ave_Ql___get__(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_6ave_Ql___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":724
 *     @property
 *     def ave_Ql(self):
 *         return self.getAveQl()             # <<<<<<<<<<<<<<
 * 
 *     def getAveQl(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getAveQl); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":723
 * 
 *     @property
 *     def ave_Ql(self):             # <<<<<<<<<<<<<<
 *         return self.getAveQl()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalQl.ave_Ql.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":726
 *         return self.getAveQl()
 * 
 *     def getAveQl(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`Q_l` for each particle.
 *         Returns NaN instead of :math:`Q_l` for particles with no neighbors.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_13getAveQl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_12getAveQl[] = "LocalQl.getAveQl(self)\nGet a reference to the last computed :math:`Q_l` for each particle.\n        Returns NaN instead of :math:`Q_l` for particles with no neighbors.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_13getAveQl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAveQl (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_12getAveQl(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_12getAveQl(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  float *__pyx_v_Ql;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getAveQl", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":734
 *                 Order parameter.
 *         """
 *         cdef float * Ql = self.qlptr.getAveQl().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 */
  __pyx_v_Ql = __pyx_v_self->qlptr->getAveQl().get();

  /* "freud/order.pxi":736
 *         cdef float * Ql = self.qlptr.getAveQl().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->qlptr->getNP());

  /* "freud/order.pxi":738
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_Ql)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 738, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 737, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":739
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":726
 *         return self.getAveQl()
 * 
 *     def getAveQl(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`Q_l` for each particle.
 *         Returns NaN instead of :math:`Q_l` for particles with no neighbors.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalQl.getAveQl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":742
 * 
 *     @property
 *     def norm_Ql(self):             # <<<<<<<<<<<<<<
 *         return self.getQlNorm()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_7norm_Ql_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_7norm_Ql_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_7norm_Ql___get__(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_7norm_Ql___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":743
 *     @property
 *     def norm_Ql(self):
 *         return self.getQlNorm()             # <<<<<<<<<<<<<<
 * 
 *     def getQlNorm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getQlNorm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 743, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":742
 * 
 *     @property
 *     def norm_Ql(self):             # <<<<<<<<<<<<<<
 *         return self.getQlNorm()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalQl.norm_Ql.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":745
 *         return self.getQlNorm()
 * 
 *     def getQlNorm(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`Q_l` for each particle.
 *         Returns NaN instead of :math:`Q_l` for particles with no neighbors.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_15getQlNorm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_14getQlNorm[] = "LocalQl.getQlNorm(self)\nGet a reference to the last computed :math:`Q_l` for each particle.\n        Returns NaN instead of :math:`Q_l` for particles with no neighbors.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_15getQlNorm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQlNorm (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_14getQlNorm(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_14getQlNorm(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  float *__pyx_v_Ql;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getQlNorm", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":753
 *                 Order parameter.
 *         """
 *         cdef float * Ql = self.qlptr.getQlNorm().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 */
  __pyx_v_Ql = __pyx_v_self->qlptr->getQlNorm().get();

  /* "freud/order.pxi":755
 *         cdef float * Ql = self.qlptr.getQlNorm().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->qlptr->getNP());

  /* "freud/order.pxi":757
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_Ql)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 757, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 756, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":758
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":745
 *         return self.getQlNorm()
 * 
 *     def getQlNorm(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`Q_l` for each particle.
 *         Returns NaN instead of :math:`Q_l` for particles with no neighbors.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalQl.getQlNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":761
 * 
 *     @property
 *     def ave_norm_Ql(self):             # <<<<<<<<<<<<<<
 *         return self.getQlAveNorm()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_11ave_norm_Ql_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_11ave_norm_Ql_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_11ave_norm_Ql___get__(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_11ave_norm_Ql___get__(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":762
 *     @property
 *     def ave_norm_Ql(self):
 *         return self.getQlAveNorm()             # <<<<<<<<<<<<<<
 * 
 *     def getQlAveNorm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getQlAveNorm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 762, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":761
 * 
 *     @property
 *     def ave_norm_Ql(self):             # <<<<<<<<<<<<<<
 *         return self.getQlAveNorm()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalQl.ave_norm_Ql.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":764
 *         return self.getQlAveNorm()
 * 
 *     def getQlAveNorm(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`Q_l` for each particle.
 *         Returns NaN instead of :math:`Q_l` for particles with no neighbors.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_17getQlAveNorm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_16getQlAveNorm[] = "LocalQl.getQlAveNorm(self)\nGet a reference to the last computed :math:`Q_l` for each particle.\n        Returns NaN instead of :math:`Q_l` for particles with no neighbors.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_17getQlAveNorm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQlAveNorm (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_16getQlAveNorm(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_16getQlAveNorm(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  float *__pyx_v_Ql;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getQlAveNorm", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":772
 *                 Order parameter.
 *         """
 *         cdef float * Ql = self.qlptr.getQlAveNorm().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 */
  __pyx_v_Ql = __pyx_v_self->qlptr->getQlAveNorm().get();

  /* "freud/order.pxi":774
 *         cdef float * Ql = self.qlptr.getQlAveNorm().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->qlptr->getNP());

  /* "freud/order.pxi":776
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_Ql)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 776, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 775, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":777
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> Ql)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":764
 *         return self.getQlAveNorm()
 * 
 *     def getQlAveNorm(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`Q_l` for each particle.
 *         Returns NaN instead of :math:`Q_l` for particles with no neighbors.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalQl.getQlAveNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":779
 *         return result
 * 
 *     def compute(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_19compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_18compute[] = "LocalQl.compute(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_19compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute") < 0)) __PYX_ERR(0, 779, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 779, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalQl.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_18compute(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_18compute(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("compute", 0);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/order.pxi":789
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":790
 *         """
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(0, 790, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(0, 790, __pyx_L1_error)

  /* "freud/order.pxi":789
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":791
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/order.pxi":792
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 792, __pyx_L1_error)

    /* "freud/order.pxi":791
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  }

  /* "freud/order.pxi":793
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 793, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_5), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 793, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":794
 *             raise TypeError('points should be an Nx3 array')
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_7);

  /* "freud/order.pxi":796
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 *         defaulted_nlist = make_default_nlist(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "freud/order.pxi":797
 * 
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->m_box);
    __Pyx_GIVEREF(__pyx_v_self->m_box);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_v_self->m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_8, __pyx_v_self->rmax);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_8, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_8, Py_True);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "freud/order.pxi":798
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 798, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/order.pxi":799
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/order.pxi":801
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  try {
    __pyx_v_self->qlptr->compute(__pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 801, __pyx_L1_error)
  }

  /* "freud/order.pxi":802
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def computeAve(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/order.pxi":779
 *         return result
 * 
 *     def compute(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalQl.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":804
 *         return self
 * 
 *     def computeAve(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_21computeAve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_20computeAve[] = "LocalQl.computeAve(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_21computeAve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeAve (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeAve") < 0)) __PYX_ERR(0, 804, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeAve", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 804, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalQl.computeAve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_20computeAve(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_20computeAve(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("computeAve", 0);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/order.pxi":814
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":815
 *         """
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(0, 815, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(0, 815, __pyx_L1_error)

  /* "freud/order.pxi":814
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":816
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/order.pxi":817
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 817, __pyx_L1_error)

    /* "freud/order.pxi":816
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/order.pxi":819
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 819, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_5), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 819, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":820
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_7);

  /* "freud/order.pxi":822
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 *         defaulted_nlist = make_default_nlist(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "freud/order.pxi":823
 * 
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 822, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 822, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->m_box);
    __Pyx_GIVEREF(__pyx_v_self->m_box);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_v_self->m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_8, __pyx_v_self->rmax);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_8, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_8, Py_True);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "freud/order.pxi":824
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 824, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/order.pxi":825
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/order.pxi":827
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)             # <<<<<<<<<<<<<<
 *         self.qlptr.computeAve(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self
 */
  try {
    __pyx_v_self->qlptr->compute(__pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 827, __pyx_L1_error)
  }

  /* "freud/order.pxi":828
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         self.qlptr.computeAve(nlist_ptr, <vec3[float]*> l_points.data, nP)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  try {
    __pyx_v_self->qlptr->computeAve(__pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 828, __pyx_L1_error)
  }

  /* "freud/order.pxi":829
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         self.qlptr.computeAve(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def computeNorm(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/order.pxi":804
 *         return self
 * 
 *     def computeAve(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalQl.computeAve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":831
 *         return self
 * 
 *     def computeNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_23computeNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_22computeNorm[] = "LocalQl.computeNorm(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_23computeNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeNorm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeNorm") < 0)) __PYX_ERR(0, 831, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeNorm", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 831, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalQl.computeNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_22computeNorm(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_22computeNorm(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("computeNorm", 0);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/order.pxi":841
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":842
 *         """
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(0, 842, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(0, 842, __pyx_L1_error)

  /* "freud/order.pxi":841
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":843
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/order.pxi":844
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 844, __pyx_L1_error)

    /* "freud/order.pxi":843
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/order.pxi":846
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 846, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_5), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 846, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":847
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_7);

  /* "freud/order.pxi":849
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 *         defaulted_nlist = make_default_nlist(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "freud/order.pxi":850
 * 
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->m_box);
    __Pyx_GIVEREF(__pyx_v_self->m_box);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_v_self->m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_8, __pyx_v_self->rmax);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_8, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_8, Py_True);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "freud/order.pxi":851
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 851, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/order.pxi":852
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/order.pxi":854
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)             # <<<<<<<<<<<<<<
 *         self.qlptr.computeNorm(<vec3[float]*> l_points.data, nP)
 *         return self
 */
  try {
    __pyx_v_self->qlptr->compute(__pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 854, __pyx_L1_error)
  }

  /* "freud/order.pxi":855
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         self.qlptr.computeNorm(<vec3[float]*> l_points.data, nP)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  try {
    __pyx_v_self->qlptr->computeNorm(((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 855, __pyx_L1_error)
  }

  /* "freud/order.pxi":856
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         self.qlptr.computeNorm(<vec3[float]*> l_points.data, nP)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def computeAveNorm(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/order.pxi":831
 *         return self
 * 
 *     def computeNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalQl.computeNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":858
 *         return self
 * 
 *     def computeAveNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_25computeAveNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_24computeAveNorm[] = "LocalQl.computeAveNorm(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_25computeAveNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeAveNorm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeAveNorm") < 0)) __PYX_ERR(0, 858, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeAveNorm", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 858, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalQl.computeAveNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_24computeAveNorm(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_24computeAveNorm(struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("computeAveNorm", 0);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/order.pxi":868
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":869
 *         """
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(0, 869, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(0, 869, __pyx_L1_error)

  /* "freud/order.pxi":868
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":870
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/order.pxi":871
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 871, __pyx_L1_error)

    /* "freud/order.pxi":870
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/order.pxi":873
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 873, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_5), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 873, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":874
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_7);

  /* "freud/order.pxi":876
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 *         defaulted_nlist = make_default_nlist(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "freud/order.pxi":877
 * 
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->m_box);
    __Pyx_GIVEREF(__pyx_v_self->m_box);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_v_self->m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_8, __pyx_v_self->rmax);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_8, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_8, Py_True);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "freud/order.pxi":878
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 878, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/order.pxi":879
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/order.pxi":881
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)             # <<<<<<<<<<<<<<
 *         self.qlptr.computeAve(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         self.qlptr.computeAveNorm(<vec3[float]*> l_points.data, nP)
 */
  try {
    __pyx_v_self->qlptr->compute(__pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 881, __pyx_L1_error)
  }

  /* "freud/order.pxi":882
 * 
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         self.qlptr.computeAve(nlist_ptr, <vec3[float]*> l_points.data, nP)             # <<<<<<<<<<<<<<
 *         self.qlptr.computeAveNorm(<vec3[float]*> l_points.data, nP)
 *         return self
 */
  try {
    __pyx_v_self->qlptr->computeAve(__pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 882, __pyx_L1_error)
  }

  /* "freud/order.pxi":883
 *         self.qlptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         self.qlptr.computeAve(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         self.qlptr.computeAveNorm(<vec3[float]*> l_points.data, nP)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  try {
    __pyx_v_self->qlptr->computeAveNorm(((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 883, __pyx_L1_error)
  }

  /* "freud/order.pxi":884
 *         self.qlptr.computeAve(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         self.qlptr.computeAveNorm(<vec3[float]*> l_points.data, nP)
 *         return self             # <<<<<<<<<<<<<<
 * 
 * cdef class LocalQlNear(LocalQl):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/order.pxi":858
 *         return self
 * 
 *     def computeAveNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalQl.computeAveNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_27__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_26__reduce_cython__[] = "LocalQl.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_27__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_26__reduce_cython__(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_26__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalQl.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_29__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalQl_28__setstate_cython__[] = "LocalQl.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_7LocalQl_29__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalQl_28__setstate_cython__(((struct __pyx_obj_5freud_6_freud_LocalQl *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalQl_28__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalQl *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalQl.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":950
 *     cdef num_neigh
 * 
 *     def __cinit__(self, box, rmax, l, kn=12):             # <<<<<<<<<<<<<<
 *         # Note that we cannot leverage super here because the
 *         # type conditional in the parent will prevent it.
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_11LocalQlNear_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_11LocalQlNear_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_kn = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_rmax,&__pyx_n_s_l,&__pyx_n_s_kn,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_12);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(0, 950, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(0, 950, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kn);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 950, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_rmax = values[1];
    __pyx_v_l = values[2];
    __pyx_v_kn = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 950, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalQlNear.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalQlNear___cinit__(((struct __pyx_obj_5freud_6_freud_LocalQlNear *)__pyx_v_self), __pyx_v_box, __pyx_v_rmax, __pyx_v_l, __pyx_v_kn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_11LocalQlNear___cinit__(struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_l, PyObject *__pyx_v_kn) {
  freud::box::Box __pyx_v_l_box;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  bool __pyx_t_12;
  unsigned int __pyx_t_13;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/order.pxi":956
 *         # management in this inheritance structure.
 *         cdef _box.Box l_box
 *         if type(self) == LocalQlNear:             # <<<<<<<<<<<<<<
 *             box = freud.common.convert_box(box)
 *             l_box = _box.Box(
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_5freud_6_freud_LocalQlNear), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "freud/order.pxi":957
 *         cdef _box.Box l_box
 *         if type(self) == LocalQlNear:
 *             box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(),
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_common); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_box};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_box};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 957, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_box);
        __Pyx_GIVEREF(__pyx_v_box);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_box);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "freud/order.pxi":959
 *             box = freud.common.convert_box(box)
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(),             # <<<<<<<<<<<<<<
 *                 box.getTiltFactorXY(), box.getTiltFactorXZ(),
 *                 box.getTiltFactorYZ(), box.is2D())
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "freud/order.pxi":960
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(),
 *                 box.getTiltFactorXY(), box.getTiltFactorXZ(),             # <<<<<<<<<<<<<<
 *                 box.getTiltFactorYZ(), box.is2D())
 *             self.qlptr = new order.LocalQl(l_box, rmax, l, 0)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "freud/order.pxi":961
 *                 box.getLx(), box.getLy(), box.getLz(),
 *                 box.getTiltFactorXY(), box.getTiltFactorXZ(),
 *                 box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *             self.qlptr = new order.LocalQl(l_box, rmax, l, 0)
 *             self.m_box = box
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 961, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 961, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 961, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 961, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_12 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "freud/order.pxi":958
 *         if type(self) == LocalQlNear:
 *             box = freud.common.convert_box(box)
 *             l_box = _box.Box(             # <<<<<<<<<<<<<<
 *                 box.getLx(), box.getLy(), box.getLz(),
 *                 box.getTiltFactorXY(), box.getTiltFactorXZ(),
 */
    __pyx_v_l_box = freud::box::Box(__pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12);

    /* "freud/order.pxi":962
 *                 box.getTiltFactorXY(), box.getTiltFactorXZ(),
 *                 box.getTiltFactorYZ(), box.is2D())
 *             self.qlptr = new order.LocalQl(l_box, rmax, l, 0)             # <<<<<<<<<<<<<<
 *             self.m_box = box
 *             self.rmax = rmax
 */
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_v_rmax); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 962, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_v_l); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 962, __pyx_L1_error)
    __pyx_v_self->__pyx_base.qlptr = new freud::order::LocalQl(__pyx_v_l_box, __pyx_t_11, __pyx_t_13, 0.0);

    /* "freud/order.pxi":963
 *                 box.getTiltFactorYZ(), box.is2D())
 *             self.qlptr = new order.LocalQl(l_box, rmax, l, 0)
 *             self.m_box = box             # <<<<<<<<<<<<<<
 *             self.rmax = rmax
 *             self.num_neigh = kn
 */
    __Pyx_INCREF(__pyx_v_box);
    __Pyx_GIVEREF(__pyx_v_box);
    __Pyx_GOTREF(__pyx_v_self->__pyx_base.m_box);
    __Pyx_DECREF(__pyx_v_self->__pyx_base.m_box);
    __pyx_v_self->__pyx_base.m_box = __pyx_v_box;

    /* "freud/order.pxi":964
 *             self.qlptr = new order.LocalQl(l_box, rmax, l, 0)
 *             self.m_box = box
 *             self.rmax = rmax             # <<<<<<<<<<<<<<
 *             self.num_neigh = kn
 * 
 */
    __Pyx_INCREF(__pyx_v_rmax);
    __Pyx_GIVEREF(__pyx_v_rmax);
    __Pyx_GOTREF(__pyx_v_self->__pyx_base.rmax);
    __Pyx_DECREF(__pyx_v_self->__pyx_base.rmax);
    __pyx_v_self->__pyx_base.rmax = __pyx_v_rmax;

    /* "freud/order.pxi":965
 *             self.m_box = box
 *             self.rmax = rmax
 *             self.num_neigh = kn             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __Pyx_INCREF(__pyx_v_kn);
    __Pyx_GIVEREF(__pyx_v_kn);
    __Pyx_GOTREF(__pyx_v_self->num_neigh);
    __Pyx_DECREF(__pyx_v_self->num_neigh);
    __pyx_v_self->num_neigh = __pyx_v_kn;

    /* "freud/order.pxi":956
 *         # management in this inheritance structure.
 *         cdef _box.Box l_box
 *         if type(self) == LocalQlNear:             # <<<<<<<<<<<<<<
 *             box = freud.common.convert_box(box)
 *             l_box = _box.Box(
 */
  }

  /* "freud/order.pxi":950
 *     cdef num_neigh
 * 
 *     def __cinit__(self, box, rmax, l, kn=12):             # <<<<<<<<<<<<<<
 *         # Note that we cannot leverage super here because the
 *         # type conditional in the parent will prevent it.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.LocalQlNear.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":967
 *             self.num_neigh = kn
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) == LocalQlNear:
 *             del self.qlptr
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_11LocalQlNear_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_11LocalQlNear_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_11LocalQlNear_2__dealloc__(((struct __pyx_obj_5freud_6_freud_LocalQlNear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_11LocalQlNear_2__dealloc__(struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/order.pxi":968
 * 
 *     def __dealloc__(self):
 *         if type(self) == LocalQlNear:             # <<<<<<<<<<<<<<
 *             del self.qlptr
 *             self.qlptr = NULL
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_5freud_6_freud_LocalQlNear), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 968, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "freud/order.pxi":969
 *     def __dealloc__(self):
 *         if type(self) == LocalQlNear:
 *             del self.qlptr             # <<<<<<<<<<<<<<
 *             self.qlptr = NULL
 * 
 */
    delete __pyx_v_self->__pyx_base.qlptr;

    /* "freud/order.pxi":970
 *         if type(self) == LocalQlNear:
 *             del self.qlptr
 *             self.qlptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def computeAve(self, points, nlist=None):
 */
    __pyx_v_self->__pyx_base.qlptr = NULL;

    /* "freud/order.pxi":968
 * 
 *     def __dealloc__(self):
 *         if type(self) == LocalQlNear:             # <<<<<<<<<<<<<<
 *             del self.qlptr
 *             self.qlptr = NULL
 */
  }

  /* "freud/order.pxi":967
 *             self.num_neigh = kn
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) == LocalQlNear:
 *             del self.qlptr
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("freud._freud.LocalQlNear.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "freud/order.pxi":972
 *             self.qlptr = NULL
 * 
 *     def computeAve(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_11LocalQlNear_5computeAve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_11LocalQlNear_4computeAve[] = "LocalQlNear.computeAve(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_11LocalQlNear_5computeAve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeAve (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeAve") < 0)) __PYX_ERR(0, 972, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeAve", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 972, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalQlNear.computeAve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalQlNear_4computeAve(((struct __pyx_obj_5freud_6_freud_LocalQlNear *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_11LocalQlNear_4computeAve(struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("computeAve", 0);

  /* "freud/order.pxi":982
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "freud/order.pxi":983
 *         """
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalQlNear, self).computeAve(points, nlist_)
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->__pyx_base.m_box);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.m_box);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self->__pyx_base.m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_4, Py_True);
    __Pyx_INCREF(__pyx_v_self->__pyx_base.rmax);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.rmax);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_4, __pyx_v_self->__pyx_base.rmax);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/order.pxi":984
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         return super(LocalQlNear, self).computeAve(points, nlist_)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 984, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":985
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalQlNear, self).computeAve(points, nlist_)             # <<<<<<<<<<<<<<
 * 
 *     def computeNorm(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalQlNear));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalQlNear));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5freud_6_freud_LocalQlNear));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_computeAve); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(((PyObject *)__pyx_v_nlist_));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_nlist_));
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, ((PyObject *)__pyx_v_nlist_));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":972
 *             self.qlptr = NULL
 * 
 *     def computeAve(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.LocalQlNear.computeAve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":987
 *         return super(LocalQlNear, self).computeAve(points, nlist_)
 * 
 *     def computeNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_11LocalQlNear_7computeNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_11LocalQlNear_6computeNorm[] = "LocalQlNear.computeNorm(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_11LocalQlNear_7computeNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeNorm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeNorm") < 0)) __PYX_ERR(0, 987, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeNorm", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 987, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalQlNear.computeNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalQlNear_6computeNorm(((struct __pyx_obj_5freud_6_freud_LocalQlNear *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_11LocalQlNear_6computeNorm(struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("computeNorm", 0);

  /* "freud/order.pxi":997
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "freud/order.pxi":998
 *         """
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalQlNear, self).computeNorm(points, nlist_)
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->__pyx_base.m_box);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.m_box);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self->__pyx_base.m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_4, Py_True);
    __Pyx_INCREF(__pyx_v_self->__pyx_base.rmax);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.rmax);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_4, __pyx_v_self->__pyx_base.rmax);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/order.pxi":999
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         return super(LocalQlNear, self).computeNorm(points, nlist_)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 999, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1000
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalQlNear, self).computeNorm(points, nlist_)             # <<<<<<<<<<<<<<
 * 
 *     def computeAveNorm(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalQlNear));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalQlNear));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5freud_6_freud_LocalQlNear));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_computeNorm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(((PyObject *)__pyx_v_nlist_));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_nlist_));
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, ((PyObject *)__pyx_v_nlist_));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":987
 *         return super(LocalQlNear, self).computeAve(points, nlist_)
 * 
 *     def computeNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.LocalQlNear.computeNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1002
 *         return super(LocalQlNear, self).computeNorm(points, nlist_)
 * 
 *     def computeAveNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_11LocalQlNear_9computeAveNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_11LocalQlNear_8computeAveNorm[] = "LocalQlNear.computeAveNorm(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_11LocalQlNear_9computeAveNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeAveNorm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeAveNorm") < 0)) __PYX_ERR(0, 1002, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeAveNorm", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1002, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalQlNear.computeAveNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalQlNear_8computeAveNorm(((struct __pyx_obj_5freud_6_freud_LocalQlNear *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_11LocalQlNear_8computeAveNorm(struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("computeAveNorm", 0);

  /* "freud/order.pxi":1012
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "freud/order.pxi":1013
 *         """
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalQlNear, self).computeAveNorm(points, nlist_)
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->__pyx_base.m_box);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.m_box);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self->__pyx_base.m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_4, Py_True);
    __Pyx_INCREF(__pyx_v_self->__pyx_base.rmax);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.rmax);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_4, __pyx_v_self->__pyx_base.rmax);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1014
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         return super(LocalQlNear, self).computeAveNorm(points, nlist_)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 1014, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1015
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalQlNear, self).computeAveNorm(points, nlist_)             # <<<<<<<<<<<<<<
 * 
 * cdef class LocalWl(LocalQl):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalQlNear));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalQlNear));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5freud_6_freud_LocalQlNear));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_computeAveNorm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1015, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(((PyObject *)__pyx_v_nlist_));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_nlist_));
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, ((PyObject *)__pyx_v_nlist_));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1002
 *         return super(LocalQlNear, self).computeNorm(points, nlist_)
 * 
 *     def computeAveNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.LocalQlNear.computeAveNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_11LocalQlNear_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_11LocalQlNear_10__reduce_cython__[] = "LocalQlNear.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_11LocalQlNear_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalQlNear_10__reduce_cython__(((struct __pyx_obj_5freud_6_freud_LocalQlNear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_11LocalQlNear_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalQlNear.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_11LocalQlNear_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_11LocalQlNear_12__setstate_cython__[] = "LocalQlNear.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_11LocalQlNear_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalQlNear_12__setstate_cython__(((struct __pyx_obj_5freud_6_freud_LocalQlNear *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_11LocalQlNear_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalQlNear *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalQlNear.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1096
 *                 'ave_norm_Ql', 'getQlAveNorm']
 * 
 *     def __cinit__(self, box, rmax, l, rmin=0, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box
 *         if type(self) is LocalWl:
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_7LocalWl_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_7LocalWl_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_rmin = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 4) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 4, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_rmax,&__pyx_n_s_l,&__pyx_n_s_rmin,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(0, 1096, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(0, 1096, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmin);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 4) ? pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1096, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  2:
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_rmax = values[1];
    __pyx_v_l = values[2];
    __pyx_v_rmin = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1096, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("freud._freud.LocalWl.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl___cinit__(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self), __pyx_v_box, __pyx_v_rmax, __pyx_v_l, __pyx_v_rmin, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_7LocalWl___cinit__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_l, PyObject *__pyx_v_rmin, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  freud::box::Box __pyx_v_l_box;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  bool __pyx_t_12;
  unsigned int __pyx_t_13;
  freud::order::LocalWl *__pyx_t_14;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "freud/order.pxi":1098
 *     def __cinit__(self, box, rmax, l, rmin=0, *args, **kwargs):
 *         cdef _box.Box l_box
 *         if type(self) is LocalWl:             # <<<<<<<<<<<<<<
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5freud_6_freud_LocalWl));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "freud/order.pxi":1100
 *         if type(self) is LocalWl:
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *                 box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *             self.thisptr = self.qlptr = new order.LocalWl(l_box, rmax, l, rmin)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "freud/order.pxi":1101
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *                 box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *             self.thisptr = self.qlptr = new order.LocalWl(l_box, rmax, l, rmin)
 *             self.m_box = box
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1101, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1101, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1101, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1101, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1101, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1101, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_12 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "freud/order.pxi":1099
 *         cdef _box.Box l_box
 *         if type(self) is LocalWl:
 *             l_box = _box.Box(             # <<<<<<<<<<<<<<
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *                 box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
    __pyx_v_l_box = freud::box::Box(__pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12);

    /* "freud/order.pxi":1102
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *                 box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *             self.thisptr = self.qlptr = new order.LocalWl(l_box, rmax, l, rmin)             # <<<<<<<<<<<<<<
 *             self.m_box = box
 *             self.rmax = rmax
 */
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_v_rmax); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1102, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_v_l); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1102, __pyx_L1_error)
    __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_rmin); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1102, __pyx_L1_error)
    __pyx_t_14 = new freud::order::LocalWl(__pyx_v_l_box, __pyx_t_11, __pyx_t_13, __pyx_t_10);
    __pyx_v_self->thisptr = __pyx_t_14;
    __pyx_v_self->__pyx_base.qlptr = __pyx_t_14;

    /* "freud/order.pxi":1103
 *                 box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *             self.thisptr = self.qlptr = new order.LocalWl(l_box, rmax, l, rmin)
 *             self.m_box = box             # <<<<<<<<<<<<<<
 *             self.rmax = rmax
 * 
 */
    __Pyx_INCREF(__pyx_v_box);
    __Pyx_GIVEREF(__pyx_v_box);
    __Pyx_GOTREF(__pyx_v_self->__pyx_base.m_box);
    __Pyx_DECREF(__pyx_v_self->__pyx_base.m_box);
    __pyx_v_self->__pyx_base.m_box = __pyx_v_box;

    /* "freud/order.pxi":1104
 *             self.thisptr = self.qlptr = new order.LocalWl(l_box, rmax, l, rmin)
 *             self.m_box = box
 *             self.rmax = rmax             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __Pyx_INCREF(__pyx_v_rmax);
    __Pyx_GIVEREF(__pyx_v_rmax);
    __Pyx_GOTREF(__pyx_v_self->__pyx_base.rmax);
    __Pyx_DECREF(__pyx_v_self->__pyx_base.rmax);
    __pyx_v_self->__pyx_base.rmax = __pyx_v_rmax;

    /* "freud/order.pxi":1098
 *     def __cinit__(self, box, rmax, l, rmin=0, *args, **kwargs):
 *         cdef _box.Box l_box
 *         if type(self) is LocalWl:             # <<<<<<<<<<<<<<
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  }

  /* "freud/order.pxi":1096
 *                 'ave_norm_Ql', 'getQlAveNorm']
 * 
 *     def __cinit__(self, box, rmax, l, rmin=0, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box
 *         if type(self) is LocalWl:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.LocalWl.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1106
 *             self.rmax = rmax
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is LocalWl:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_7LocalWl_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_7LocalWl_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_7LocalWl_2__dealloc__(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_7LocalWl_2__dealloc__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/order.pxi":1107
 * 
 *     def __dealloc__(self):
 *         if type(self) is LocalWl:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *             self.thisptr = NULL
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5freud_6_freud_LocalWl));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "freud/order.pxi":1108
 *     def __dealloc__(self):
 *         if type(self) is LocalWl:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr = NULL
 * 
 */
    delete __pyx_v_self->thisptr;

    /* "freud/order.pxi":1109
 *         if type(self) is LocalWl:
 *             del self.thisptr
 *             self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __getattribute__(self, name):
 */
    __pyx_v_self->thisptr = NULL;

    /* "freud/order.pxi":1107
 * 
 *     def __dealloc__(self):
 *         if type(self) is LocalWl:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *             self.thisptr = NULL
 */
  }

  /* "freud/order.pxi":1106
 *             self.rmax = rmax
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) is LocalWl:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/order.pxi":1111
 *             self.thisptr = NULL
 * 
 *     def __getattribute__(self, name):             # <<<<<<<<<<<<<<
 *         # Remove access to Ql methods from this class, their values may be
 *         # uninitialized and are not dependable.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_5__getattribute__(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_5__getattribute__(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattribute__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_4__getattribute__(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_4__getattribute__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__getattribute__", 0);

  /* "freud/order.pxi":1114
 *         # Remove access to Ql methods from this class, their values may be
 *         # uninitialized and are not dependable.
 *         if name in LocalWl.delattrs:             # <<<<<<<<<<<<<<
 *             raise AttributeError(name)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5freud_6_freud_LocalWl), __pyx_n_s_delattrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_name, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "freud/order.pxi":1115
 *         # uninitialized and are not dependable.
 *         if name in LocalWl.delattrs:
 *             raise AttributeError(name)             # <<<<<<<<<<<<<<
 *         else:
 *             return super(LocalWl, self).__getattribute__(name)
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_AttributeError, __pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1115, __pyx_L1_error)

    /* "freud/order.pxi":1114
 *         # Remove access to Ql methods from this class, their values may be
 *         # uninitialized and are not dependable.
 *         if name in LocalWl.delattrs:             # <<<<<<<<<<<<<<
 *             raise AttributeError(name)
 *         else:
 */
  }

  /* "freud/order.pxi":1117
 *             raise AttributeError(name)
 *         else:
 *             return super(LocalWl, self).__getattribute__(name)             # <<<<<<<<<<<<<<
 * 
 *     def __dir__(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalWl));
    __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalWl));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_ptype_5freud_6_freud_LocalWl));
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_self));
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_getattribute); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_name};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_name};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1117, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_v_name);
        __Pyx_GIVEREF(__pyx_v_name);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_name);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "freud/order.pxi":1111
 *             self.thisptr = NULL
 * 
 *     def __getattribute__(self, name):             # <<<<<<<<<<<<<<
 *         # Remove access to Ql methods from this class, their values may be
 *         # uninitialized and are not dependable.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("freud._freud.LocalWl.__getattribute__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1119
 *             return super(LocalWl, self).__getattribute__(name)
 * 
 *     def __dir__(self):             # <<<<<<<<<<<<<<
 *         # Prevent unwanted Ql methods from appearing in dir output
 *         return sorted(set(dir(self.__class__)) -
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_7__dir__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalWl_6__dir__[] = "LocalWl.__dir__(self)";
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_7__dir__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dir__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_6__dir__(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_6__dir__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__dir__", 0);

  /* "freud/order.pxi":1121
 *     def __dir__(self):
 *         # Prevent unwanted Ql methods from appearing in dir output
 *         return sorted(set(dir(self.__class__)) -             # <<<<<<<<<<<<<<
 *                       set(self.__class__.delattrs))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Dir(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/order.pxi":1122
 *         # Prevent unwanted Ql methods from appearing in dir output
 *         return sorted(set(dir(self.__class__)) -
 *                       set(self.__class__.delattrs))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_delattrs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/order.pxi":1121
 *     def __dir__(self):
 *         # Prevent unwanted Ql methods from appearing in dir output
 *         return sorted(set(dir(self.__class__)) -             # <<<<<<<<<<<<<<
 *                       set(self.__class__.delattrs))
 * 
 */
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_List(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_5 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1121, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1119
 *             return super(LocalWl, self).__getattribute__(name)
 * 
 *     def __dir__(self):             # <<<<<<<<<<<<<<
 *         # Prevent unwanted Ql methods from appearing in dir output
 *         return sorted(set(dir(self.__class__)) -
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.LocalWl.__dir__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1125
 * 
 *     @property
 *     def Wl(self):             # <<<<<<<<<<<<<<
 *         return self.getWl()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_2Wl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_2Wl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_2Wl___get__(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_2Wl___get__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1126
 *     @property
 *     def Wl(self):
 *         return self.getWl()             # <<<<<<<<<<<<<<
 * 
 *     def getWl(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getWl); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1125
 * 
 *     @property
 *     def Wl(self):             # <<<<<<<<<<<<<<
 *         return self.getWl()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalWl.Wl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1128
 *         return self.getWl()
 * 
 *     def getWl(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`W_l` for each particle.
 *         Returns NaN instead of :math:`W_l` for particles with no neighbors.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_9getWl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalWl_8getWl[] = "LocalWl.getWl(self)\nGet a reference to the last computed :math:`W_l` for each particle.\n        Returns NaN instead of :math:`W_l` for particles with no neighbors.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_9getWl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getWl (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_8getWl(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_8getWl(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self) {
  __pyx_t_float_complex *__pyx_v_Wl;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getWl", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":1136
 *                 Order parameter.
 *         """
 *         cdef float complex * Wl = self.thisptr.getWl().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 */
  __pyx_v_Wl = __pyx_v_self->thisptr->getWl().get();

  /* "freud/order.pxi":1138
 *         cdef float complex * Wl = self.thisptr.getWl().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->__pyx_base.qlptr->getNP());

  /* "freud/order.pxi":1140
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,             # <<<<<<<<<<<<<<
 *                                          <void*> Wl)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_COMPLEX64, ((void *)__pyx_v_Wl)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1140, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo___pyx_t_float_complex, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1139, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1142
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 *                                          <void*> Wl)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":1128
 *         return self.getWl()
 * 
 *     def getWl(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`W_l` for each particle.
 *         Returns NaN instead of :math:`W_l` for particles with no neighbors.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalWl.getWl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1145
 * 
 *     @property
 *     def ave_Wl(self):             # <<<<<<<<<<<<<<
 *         return self.getAveWl()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_6ave_Wl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_6ave_Wl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_6ave_Wl___get__(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_6ave_Wl___get__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1146
 *     @property
 *     def ave_Wl(self):
 *         return self.getAveWl()             # <<<<<<<<<<<<<<
 * 
 *     def getAveWl(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getAveWl); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1146, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1145
 * 
 *     @property
 *     def ave_Wl(self):             # <<<<<<<<<<<<<<
 *         return self.getAveWl()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalWl.ave_Wl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1148
 *         return self.getAveWl()
 * 
 *     def getAveWl(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`W_l` for each particle.
 *         Returns NaN instead of :math:`W_l` for particles with no neighbors.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_11getAveWl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalWl_10getAveWl[] = "LocalWl.getAveWl(self)\nGet a reference to the last computed :math:`W_l` for each particle.\n        Returns NaN instead of :math:`W_l` for particles with no neighbors.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_11getAveWl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAveWl (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_10getAveWl(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_10getAveWl(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self) {
  __pyx_t_float_complex *__pyx_v_Wl;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getAveWl", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":1156
 *                 Order parameter.
 *         """
 *         cdef float complex * Wl = self.thisptr.getAveWl().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 */
  __pyx_v_Wl = __pyx_v_self->thisptr->getAveWl().get();

  /* "freud/order.pxi":1158
 *         cdef float complex * Wl = self.thisptr.getAveWl().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->__pyx_base.qlptr->getNP());

  /* "freud/order.pxi":1160
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,             # <<<<<<<<<<<<<<
 *                                          <void*> Wl)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_COMPLEX64, ((void *)__pyx_v_Wl)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1160, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo___pyx_t_float_complex, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1159, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1162
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 *                                          <void*> Wl)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":1148
 *         return self.getAveWl()
 * 
 *     def getAveWl(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`W_l` for each particle.
 *         Returns NaN instead of :math:`W_l` for particles with no neighbors.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalWl.getAveWl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1165
 * 
 *     @property
 *     def norm_Wl(self):             # <<<<<<<<<<<<<<
 *         return self.getWlNorm()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_7norm_Wl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_7norm_Wl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_7norm_Wl___get__(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_7norm_Wl___get__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1166
 *     @property
 *     def norm_Wl(self):
 *         return self.getWlNorm()             # <<<<<<<<<<<<<<
 * 
 *     def getWlNorm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getWlNorm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1165
 * 
 *     @property
 *     def norm_Wl(self):             # <<<<<<<<<<<<<<
 *         return self.getWlNorm()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalWl.norm_Wl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1168
 *         return self.getWlNorm()
 * 
 *     def getWlNorm(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`W_l` for each particle.
 *         Returns NaN instead of :math:`W_l` for particles with no neighbors.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_13getWlNorm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalWl_12getWlNorm[] = "LocalWl.getWlNorm(self)\nGet a reference to the last computed :math:`W_l` for each particle.\n        Returns NaN instead of :math:`W_l` for particles with no neighbors.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_13getWlNorm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getWlNorm (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_12getWlNorm(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_12getWlNorm(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self) {
  __pyx_t_float_complex *__pyx_v_Wl;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getWlNorm", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":1176
 *                 Order parameter.
 *         """
 *         cdef float complex * Wl = self.thisptr.getWlNorm().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 */
  __pyx_v_Wl = __pyx_v_self->thisptr->getWlNorm().get();

  /* "freud/order.pxi":1178
 *         cdef float complex * Wl = self.thisptr.getWlNorm().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->__pyx_base.qlptr->getNP());

  /* "freud/order.pxi":1180
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,             # <<<<<<<<<<<<<<
 *                                          <void*> Wl)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_COMPLEX64, ((void *)__pyx_v_Wl)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1180, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo___pyx_t_float_complex, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1179, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1182
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 *                                          <void*> Wl)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":1168
 *         return self.getWlNorm()
 * 
 *     def getWlNorm(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`W_l` for each particle.
 *         Returns NaN instead of :math:`W_l` for particles with no neighbors.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalWl.getWlNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1185
 * 
 *     @property
 *     def ave_norm_Wl(self):             # <<<<<<<<<<<<<<
 *         return self.getWlAveNorm()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_11ave_norm_Wl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_11ave_norm_Wl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_11ave_norm_Wl___get__(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_11ave_norm_Wl___get__(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1186
 *     @property
 *     def ave_norm_Wl(self):
 *         return self.getWlAveNorm()             # <<<<<<<<<<<<<<
 * 
 *     def getWlAveNorm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getWlAveNorm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1185
 * 
 *     @property
 *     def ave_norm_Wl(self):             # <<<<<<<<<<<<<<
 *         return self.getWlAveNorm()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalWl.ave_norm_Wl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1188
 *         return self.getWlAveNorm()
 * 
 *     def getWlAveNorm(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`W_l` for each particle.
 *         Returns NaN instead of :math:`W_l` for particles with no neighbors.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_15getWlAveNorm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalWl_14getWlAveNorm[] = "LocalWl.getWlAveNorm(self)\nGet a reference to the last computed :math:`W_l` for each particle.\n        Returns NaN instead of :math:`W_l` for particles with no neighbors.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_15getWlAveNorm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getWlAveNorm (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_14getWlAveNorm(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_14getWlAveNorm(struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self) {
  __pyx_t_float_complex *__pyx_v_Wl;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getWlAveNorm", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":1196
 *                 Order parameter.
 *         """
 *         cdef float complex * Wl = self.thisptr.getAveNormWl().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 */
  __pyx_v_Wl = __pyx_v_self->thisptr->getAveNormWl().get();

  /* "freud/order.pxi":1198
 *         cdef float complex * Wl = self.thisptr.getAveNormWl().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->__pyx_base.qlptr->getNP());

  /* "freud/order.pxi":1200
 *         nbins[0] = <np.npy_intp> self.qlptr.getNP()
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,             # <<<<<<<<<<<<<<
 *                                          <void*> Wl)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_COMPLEX64, ((void *)__pyx_v_Wl)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1200, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo___pyx_t_float_complex, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1199, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1202
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 *                                          <void*> Wl)
 *         return result             # <<<<<<<<<<<<<<
 * 
 * cdef class LocalWlNear(LocalWl):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":1188
 *         return self.getWlAveNorm()
 * 
 *     def getWlAveNorm(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`W_l` for each particle.
 *         Returns NaN instead of :math:`W_l` for particles with no neighbors.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalWl.getWlAveNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalWl_16__reduce_cython__[] = "LocalWl.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_16__reduce_cython__(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalWl.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_7LocalWl_18__setstate_cython__[] = "LocalWl.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_7LocalWl_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7LocalWl_18__setstate_cython__(((struct __pyx_obj_5freud_6_freud_LocalWl *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7LocalWl_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalWl *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalWl.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1276
 *     cdef num_neigh
 * 
 *     def __cinit__(self, box, rmax, l, kn=12):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_11LocalWlNear_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_11LocalWlNear_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_kn = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_rmax,&__pyx_n_s_l,&__pyx_n_s_kn,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_12);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(0, 1276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(0, 1276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kn);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1276, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_rmax = values[1];
    __pyx_v_l = values[2];
    __pyx_v_kn = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1276, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalWlNear.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalWlNear___cinit__(((struct __pyx_obj_5freud_6_freud_LocalWlNear *)__pyx_v_self), __pyx_v_box, __pyx_v_rmax, __pyx_v_l, __pyx_v_kn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_11LocalWlNear___cinit__(struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_l, PyObject *__pyx_v_kn) {
  freud::box::Box __pyx_v_l_box;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  bool __pyx_t_13;
  unsigned int __pyx_t_14;
  freud::order::LocalWl *__pyx_t_15;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/order.pxi":1277
 * 
 *     def __cinit__(self, box, rmax, l, kn=12):
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box
 *         if type(self) is LocalWlNear:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1279
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box
 *         if type(self) is LocalWlNear:             # <<<<<<<<<<<<<<
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(),
 */
  __pyx_t_5 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5freud_6_freud_LocalWlNear));
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "freud/order.pxi":1281
 *         if type(self) is LocalWlNear:
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(),             # <<<<<<<<<<<<<<
 *                 box.getTiltFactorXY(), box.getTiltFactorXZ(),
 *                 box.getTiltFactorYZ(), box.is2D())
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1281, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1281, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1281, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1281, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1281, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1281, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "freud/order.pxi":1282
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(),
 *                 box.getTiltFactorXY(), box.getTiltFactorXZ(),             # <<<<<<<<<<<<<<
 *                 box.getTiltFactorYZ(), box.is2D())
 *             self.thisptr = self.qlptr = new order.LocalWl(l_box, rmax, l, 0)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1282, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1282, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1282, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1282, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "freud/order.pxi":1283
 *                 box.getLx(), box.getLy(), box.getLz(),
 *                 box.getTiltFactorXY(), box.getTiltFactorXZ(),
 *                 box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *             self.thisptr = self.qlptr = new order.LocalWl(l_box, rmax, l, 0)
 *             self.m_box = box
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1283, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1283, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1283, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1283, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "freud/order.pxi":1280
 *         cdef _box.Box l_box
 *         if type(self) is LocalWlNear:
 *             l_box = _box.Box(             # <<<<<<<<<<<<<<
 *                 box.getLx(), box.getLy(), box.getLz(),
 *                 box.getTiltFactorXY(), box.getTiltFactorXZ(),
 */
    __pyx_v_l_box = freud::box::Box(__pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13);

    /* "freud/order.pxi":1284
 *                 box.getTiltFactorXY(), box.getTiltFactorXZ(),
 *                 box.getTiltFactorYZ(), box.is2D())
 *             self.thisptr = self.qlptr = new order.LocalWl(l_box, rmax, l, 0)             # <<<<<<<<<<<<<<
 *             self.m_box = box
 *             self.rmax = rmax
 */
    __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_v_rmax); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1284, __pyx_L1_error)
    __pyx_t_14 = __Pyx_PyInt_As_unsigned_int(__pyx_v_l); if (unlikely((__pyx_t_14 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1284, __pyx_L1_error)
    __pyx_t_15 = new freud::order::LocalWl(__pyx_v_l_box, __pyx_t_12, __pyx_t_14, 0.0);
    __pyx_v_self->__pyx_base.thisptr = __pyx_t_15;
    __pyx_v_self->__pyx_base.__pyx_base.qlptr = __pyx_t_15;

    /* "freud/order.pxi":1285
 *                 box.getTiltFactorYZ(), box.is2D())
 *             self.thisptr = self.qlptr = new order.LocalWl(l_box, rmax, l, 0)
 *             self.m_box = box             # <<<<<<<<<<<<<<
 *             self.rmax = rmax
 *             self.num_neigh = kn
 */
    __Pyx_INCREF(__pyx_v_box);
    __Pyx_GIVEREF(__pyx_v_box);
    __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base.m_box);
    __Pyx_DECREF(__pyx_v_self->__pyx_base.__pyx_base.m_box);
    __pyx_v_self->__pyx_base.__pyx_base.m_box = __pyx_v_box;

    /* "freud/order.pxi":1286
 *             self.thisptr = self.qlptr = new order.LocalWl(l_box, rmax, l, 0)
 *             self.m_box = box
 *             self.rmax = rmax             # <<<<<<<<<<<<<<
 *             self.num_neigh = kn
 * 
 */
    __Pyx_INCREF(__pyx_v_rmax);
    __Pyx_GIVEREF(__pyx_v_rmax);
    __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base.rmax);
    __Pyx_DECREF(__pyx_v_self->__pyx_base.__pyx_base.rmax);
    __pyx_v_self->__pyx_base.__pyx_base.rmax = __pyx_v_rmax;

    /* "freud/order.pxi":1287
 *             self.m_box = box
 *             self.rmax = rmax
 *             self.num_neigh = kn             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __Pyx_INCREF(__pyx_v_kn);
    __Pyx_GIVEREF(__pyx_v_kn);
    __Pyx_GOTREF(__pyx_v_self->num_neigh);
    __Pyx_DECREF(__pyx_v_self->num_neigh);
    __pyx_v_self->num_neigh = __pyx_v_kn;

    /* "freud/order.pxi":1279
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box
 *         if type(self) is LocalWlNear:             # <<<<<<<<<<<<<<
 *             l_box = _box.Box(
 *                 box.getLx(), box.getLy(), box.getLz(),
 */
  }

  /* "freud/order.pxi":1276
 *     cdef num_neigh
 * 
 *     def __cinit__(self, box, rmax, l, kn=12):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.LocalWlNear.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1289
 *             self.num_neigh = kn
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_11LocalWlNear_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_11LocalWlNear_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_11LocalWlNear_2__dealloc__(((struct __pyx_obj_5freud_6_freud_LocalWlNear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_11LocalWlNear_2__dealloc__(struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/order.pxi":1290
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->__pyx_base.thisptr;

  /* "freud/order.pxi":1291
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def computeAve(self, points, nlist=None):
 */
  __pyx_v_self->__pyx_base.thisptr = NULL;

  /* "freud/order.pxi":1289
 *             self.num_neigh = kn
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/order.pxi":1293
 *         self.thisptr = NULL
 * 
 *     def computeAve(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_11LocalWlNear_5computeAve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_11LocalWlNear_4computeAve[] = "LocalWlNear.computeAve(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_11LocalWlNear_5computeAve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeAve (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeAve") < 0)) __PYX_ERR(0, 1293, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeAve", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1293, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalWlNear.computeAve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalWlNear_4computeAve(((struct __pyx_obj_5freud_6_freud_LocalWlNear *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_11LocalWlNear_4computeAve(struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("computeAve", 0);

  /* "freud/order.pxi":1303
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "freud/order.pxi":1304
 *         """
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalWlNear, self).computeAve(points, nlist_)
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.m_box);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.m_box);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self->__pyx_base.__pyx_base.m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_4, Py_True);
    __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.rmax);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.rmax);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_4, __pyx_v_self->__pyx_base.__pyx_base.rmax);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1305
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         return super(LocalWlNear, self).computeAve(points, nlist_)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 1305, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1306
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalWlNear, self).computeAve(points, nlist_)             # <<<<<<<<<<<<<<
 * 
 *     def computeNorm(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalWlNear));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalWlNear));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5freud_6_freud_LocalWlNear));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_computeAve); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1306, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1306, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(((PyObject *)__pyx_v_nlist_));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_nlist_));
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, ((PyObject *)__pyx_v_nlist_));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1293
 *         self.thisptr = NULL
 * 
 *     def computeAve(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.LocalWlNear.computeAve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1308
 *         return super(LocalWlNear, self).computeAve(points, nlist_)
 * 
 *     def computeNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_11LocalWlNear_7computeNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_11LocalWlNear_6computeNorm[] = "LocalWlNear.computeNorm(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_11LocalWlNear_7computeNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeNorm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeNorm") < 0)) __PYX_ERR(0, 1308, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeNorm", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1308, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalWlNear.computeNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalWlNear_6computeNorm(((struct __pyx_obj_5freud_6_freud_LocalWlNear *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_11LocalWlNear_6computeNorm(struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("computeNorm", 0);

  /* "freud/order.pxi":1318
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "freud/order.pxi":1319
 *         """
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalWlNear, self).computeNorm(points, nlist_)
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.m_box);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.m_box);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self->__pyx_base.__pyx_base.m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_4, Py_True);
    __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.rmax);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.rmax);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_4, __pyx_v_self->__pyx_base.__pyx_base.rmax);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1320
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         return super(LocalWlNear, self).computeNorm(points, nlist_)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 1320, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1321
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalWlNear, self).computeNorm(points, nlist_)             # <<<<<<<<<<<<<<
 * 
 *     def computeAveNorm(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalWlNear));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalWlNear));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5freud_6_freud_LocalWlNear));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_computeNorm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1321, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1321, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(((PyObject *)__pyx_v_nlist_));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_nlist_));
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, ((PyObject *)__pyx_v_nlist_));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1308
 *         return super(LocalWlNear, self).computeAve(points, nlist_)
 * 
 *     def computeNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.LocalWlNear.computeNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1323
 *         return super(LocalWlNear, self).computeNorm(points, nlist_)
 * 
 *     def computeAveNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_11LocalWlNear_9computeAveNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_11LocalWlNear_8computeAveNorm[] = "LocalWlNear.computeAveNorm(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_11LocalWlNear_9computeAveNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeAveNorm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeAveNorm") < 0)) __PYX_ERR(0, 1323, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeAveNorm", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1323, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalWlNear.computeAveNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalWlNear_8computeAveNorm(((struct __pyx_obj_5freud_6_freud_LocalWlNear *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_11LocalWlNear_8computeAveNorm(struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("computeAveNorm", 0);

  /* "freud/order.pxi":1333
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "freud/order.pxi":1334
 *         """
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalWlNear, self).computeAveNorm(points, nlist_)
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.m_box);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.m_box);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self->__pyx_base.__pyx_base.m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_4, Py_True);
    __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.rmax);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.rmax);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_4, __pyx_v_self->__pyx_base.__pyx_base.rmax);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1335
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         return super(LocalWlNear, self).computeAveNorm(points, nlist_)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 1335, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1336
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return super(LocalWlNear, self).computeAveNorm(points, nlist_)             # <<<<<<<<<<<<<<
 * 
 * cdef class SolLiq:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalWlNear));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5freud_6_freud_LocalWlNear));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5freud_6_freud_LocalWlNear));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_computeAveNorm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1336, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1336, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(((PyObject *)__pyx_v_nlist_));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_nlist_));
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, ((PyObject *)__pyx_v_nlist_));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1323
 *         return super(LocalWlNear, self).computeNorm(points, nlist_)
 * 
 *     def computeAveNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.LocalWlNear.computeAveNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_11LocalWlNear_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_11LocalWlNear_10__reduce_cython__[] = "LocalWlNear.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_11LocalWlNear_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalWlNear_10__reduce_cython__(((struct __pyx_obj_5freud_6_freud_LocalWlNear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_11LocalWlNear_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalWlNear.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_11LocalWlNear_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_11LocalWlNear_12__setstate_cython__[] = "LocalWlNear.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_11LocalWlNear_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_11LocalWlNear_12__setstate_cython__(((struct __pyx_obj_5freud_6_freud_LocalWlNear *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_11LocalWlNear_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalWlNear *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalWlNear.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1392
 *     cdef rmax
 * 
 *     def __init__(self, box, rmax, Qthreshold, Sthreshold, l):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_6SolLiq_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_6SolLiq_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_Qthreshold = 0;
  PyObject *__pyx_v_Sthreshold = 0;
  PyObject *__pyx_v_l = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_rmax,&__pyx_n_s_Qthreshold,&__pyx_n_s_Sthreshold,&__pyx_n_s_l,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 1); __PYX_ERR(0, 1392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Qthreshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 2); __PYX_ERR(0, 1392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Sthreshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 3); __PYX_ERR(0, 1392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 4); __PYX_ERR(0, 1392, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1392, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_box = values[0];
    __pyx_v_rmax = values[1];
    __pyx_v_Qthreshold = values[2];
    __pyx_v_Sthreshold = values[3];
    __pyx_v_l = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1392, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.SolLiq.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq___init__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self), __pyx_v_box, __pyx_v_rmax, __pyx_v_Qthreshold, __pyx_v_Sthreshold, __pyx_v_l);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_6SolLiq___init__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_Qthreshold, PyObject *__pyx_v_Sthreshold, PyObject *__pyx_v_l) {
  freud::box::Box __pyx_v_l_box;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  bool __pyx_t_11;
  unsigned int __pyx_t_12;
  unsigned int __pyx_t_13;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/order.pxi":1393
 * 
 *     def __init__(self, box, rmax, Qthreshold, Sthreshold, l):
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1393, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1393, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1393, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1393, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1395
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr = new order.SolLiq(l_box, rmax, Qthreshold, Sthreshold, l)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":1396
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *         self.thisptr = new order.SolLiq(l_box, rmax, Qthreshold, Sthreshold, l)
 *         self.m_box = box
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1396, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1396, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1396, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":1394
 *     def __init__(self, box, rmax, Qthreshold, Sthreshold, l):
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);

  /* "freud/order.pxi":1397
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr = new order.SolLiq(l_box, rmax, Qthreshold, Sthreshold, l)             # <<<<<<<<<<<<<<
 *         self.m_box = box
 *         self.rmax = rmax
 */
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_rmax); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1397, __pyx_L1_error)
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_Qthreshold); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1397, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyInt_As_unsigned_int(__pyx_v_Sthreshold); if (unlikely((__pyx_t_12 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1397, __pyx_L1_error)
  __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_v_l); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1397, __pyx_L1_error)
  __pyx_v_self->thisptr = new freud::order::SolLiq(__pyx_v_l_box, __pyx_t_10, __pyx_t_9, __pyx_t_12, __pyx_t_13);

  /* "freud/order.pxi":1398
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr = new order.SolLiq(l_box, rmax, Qthreshold, Sthreshold, l)
 *         self.m_box = box             # <<<<<<<<<<<<<<
 *         self.rmax = rmax
 * 
 */
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_GIVEREF(__pyx_v_box);
  __Pyx_GOTREF(__pyx_v_self->m_box);
  __Pyx_DECREF(__pyx_v_self->m_box);
  __pyx_v_self->m_box = __pyx_v_box;

  /* "freud/order.pxi":1399
 *         self.thisptr = new order.SolLiq(l_box, rmax, Qthreshold, Sthreshold, l)
 *         self.m_box = box
 *         self.rmax = rmax             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(__pyx_v_rmax);
  __Pyx_GIVEREF(__pyx_v_rmax);
  __Pyx_GOTREF(__pyx_v_self->rmax);
  __Pyx_DECREF(__pyx_v_self->rmax);
  __pyx_v_self->rmax = __pyx_v_rmax;

  /* "freud/order.pxi":1392
 *     cdef rmax
 * 
 *     def __init__(self, box, rmax, Qthreshold, Sthreshold, l):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.SolLiq.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1401
 *         self.rmax = rmax
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_6SolLiq_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_6SolLiq_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_6SolLiq_2__dealloc__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_6SolLiq_2__dealloc__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/order.pxi":1402
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "freud/order.pxi":1403
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, points, nlist=None):
 */
  __pyx_v_self->thisptr = NULL;

  /* "freud/order.pxi":1401
 *         self.rmax = rmax
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/order.pxi":1405
 *         self.thisptr = NULL
 * 
 *     def compute(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_5compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_4compute[] = "SolLiq.compute(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_5compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute") < 0)) __PYX_ERR(0, 1405, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1405, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.SolLiq.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_4compute(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_4compute(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("compute", 0);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/order.pxi":1415
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":1416
 *         """
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1416, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(0, 1416, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(0, 1416, __pyx_L1_error)

  /* "freud/order.pxi":1415
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":1417
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/order.pxi":1418
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1418, __pyx_L1_error)

    /* "freud/order.pxi":1417
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/order.pxi":1420
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1420, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_5), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1420, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":1421
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_7);

  /* "freud/order.pxi":1423
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 *         defaulted_nlist = make_default_nlist(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "freud/order.pxi":1424
 * 
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1423, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1423, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->m_box);
    __Pyx_GIVEREF(__pyx_v_self->m_box);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_v_self->m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_8, __pyx_v_self->rmax);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_8, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_8, Py_True);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "freud/order.pxi":1425
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 1425, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/order.pxi":1426
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/order.pxi":1428
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         self.thisptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  try {
    __pyx_v_self->thisptr->compute(__pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1428, __pyx_L1_error)
  }

  /* "freud/order.pxi":1429
 * 
 *         self.thisptr.compute(nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def computeSolLiqVariant(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/order.pxi":1405
 *         self.thisptr = NULL
 * 
 *     def compute(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.SolLiq.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1431
 *         return self
 * 
 *     def computeSolLiqVariant(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_7computeSolLiqVariant(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_6computeSolLiqVariant[] = "SolLiq.computeSolLiqVariant(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_7computeSolLiqVariant(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeSolLiqVariant (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeSolLiqVariant") < 0)) __PYX_ERR(0, 1431, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeSolLiqVariant", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1431, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.SolLiq.computeSolLiqVariant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_6computeSolLiqVariant(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_6computeSolLiqVariant(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("computeSolLiqVariant", 0);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/order.pxi":1441
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":1442
 *         """
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(0, 1442, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(0, 1442, __pyx_L1_error)

  /* "freud/order.pxi":1441
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":1443
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/order.pxi":1444
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1444, __pyx_L1_error)

    /* "freud/order.pxi":1443
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/order.pxi":1446
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1446, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_5), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1446, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":1447
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_7);

  /* "freud/order.pxi":1449
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 *         defaulted_nlist = make_default_nlist(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "freud/order.pxi":1450
 * 
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1449, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1449, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->m_box);
    __Pyx_GIVEREF(__pyx_v_self->m_box);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_v_self->m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_8, __pyx_v_self->rmax);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_8, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_8, Py_True);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "freud/order.pxi":1451
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 1451, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/order.pxi":1452
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.computeSolLiqVariant(
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/order.pxi":1454
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         self.thisptr.computeSolLiqVariant(             # <<<<<<<<<<<<<<
 *             nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self
 */
  try {
    __pyx_v_self->thisptr->computeSolLiqVariant(__pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1454, __pyx_L1_error)
  }

  /* "freud/order.pxi":1456
 *         self.thisptr.computeSolLiqVariant(
 *             nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def computeSolLiqNoNorm(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/order.pxi":1431
 *         return self
 * 
 *     def computeSolLiqVariant(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.SolLiq.computeSolLiqVariant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1458
 *         return self
 * 
 *     def computeSolLiqNoNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_9computeSolLiqNoNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_8computeSolLiqNoNorm[] = "SolLiq.computeSolLiqNoNorm(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_9computeSolLiqNoNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeSolLiqNoNorm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeSolLiqNoNorm") < 0)) __PYX_ERR(0, 1458, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeSolLiqNoNorm", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1458, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.SolLiq.computeSolLiqNoNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_8computeSolLiqNoNorm(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_8computeSolLiqNoNorm(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("computeSolLiqNoNorm", 0);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/order.pxi":1468
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":1469
 *         """
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(0, 1469, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(0, 1469, __pyx_L1_error)

  /* "freud/order.pxi":1468
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":1470
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/order.pxi":1471
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1471, __pyx_L1_error)

    /* "freud/order.pxi":1470
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/order.pxi":1473
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1473, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_5), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1473, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/order.pxi":1474
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_7);

  /* "freud/order.pxi":1476
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 *         defaulted_nlist = make_default_nlist(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "freud/order.pxi":1477
 * 
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1476, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1476, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->m_box);
    __Pyx_GIVEREF(__pyx_v_self->m_box);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_v_self->m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_8, __pyx_v_self->rmax);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_8, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_8, Py_True);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "freud/order.pxi":1478
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 1478, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/order.pxi":1479
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.computeSolLiqNoNorm(
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/order.pxi":1481
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         self.thisptr.computeSolLiqNoNorm(             # <<<<<<<<<<<<<<
 *             nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self
 */
  try {
    __pyx_v_self->thisptr->computeSolLiqNoNorm(__pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1481, __pyx_L1_error)
  }

  /* "freud/order.pxi":1483
 *         self.thisptr.computeSolLiqNoNorm(
 *             nlist_ptr, <vec3[float]*> l_points.data, nP)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/order.pxi":1458
 *         return self
 * 
 *     def computeSolLiqNoNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.SolLiq.computeSolLiqNoNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1486
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_3box_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_3box_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_3box___get__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_3box___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1487
 *     @property
 *     def box(self):
 *         return self.getBox()             # <<<<<<<<<<<<<<
 * 
 *     @box.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getBox); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1487, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1487, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1486
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.SolLiq.box.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1490
 * 
 *     @box.setter
 *     def box(self, value):             # <<<<<<<<<<<<<<
 *         self.setBox(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_6SolLiq_3box_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5freud_6_freud_6SolLiq_3box_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_3box_2__set__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_6SolLiq_3box_2__set__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "freud/order.pxi":1491
 *     @box.setter
 *     def box(self, value):
 *         self.setBox(value)             # <<<<<<<<<<<<<<
 * 
 *     def getBox(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setBox); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1491, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1491, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_value);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":1490
 * 
 *     @box.setter
 *     def box(self, value):             # <<<<<<<<<<<<<<
 *         self.setBox(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.SolLiq.box.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1493
 *         self.setBox(value)
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_11getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_10getBox[] = "SolLiq.getBox(self)\nGet the box used in the calculation.\n\n        Returns:\n            :class:`freud.box.Box`: freud Box.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_11getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBox (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_10getBox(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_10getBox(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getBox", 0);

  /* "freud/order.pxi":1499
 *             :class:`freud.box.Box`: freud Box.
 *         """
 *         return BoxFromCPP(< _box.Box > self.thisptr.getBox())             # <<<<<<<<<<<<<<
 * 
 *     def setClusteringRadius(self, rcutCluster):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5freud_3box_BoxFromCPP(((freud::box::Box)__pyx_v_self->thisptr->getBox())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1493
 *         self.setBox(value)
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.SolLiq.getBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1501
 *         return BoxFromCPP(< _box.Box > self.thisptr.getBox())
 * 
 *     def setClusteringRadius(self, rcutCluster):             # <<<<<<<<<<<<<<
 *         """Reset the clustering radius.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_13setClusteringRadius(PyObject *__pyx_v_self, PyObject *__pyx_v_rcutCluster); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_12setClusteringRadius[] = "SolLiq.setClusteringRadius(self, rcutCluster)\nReset the clustering radius.\n\n        Args:\n            rcutCluster (float): Radius for the cluster finding.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_13setClusteringRadius(PyObject *__pyx_v_self, PyObject *__pyx_v_rcutCluster) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setClusteringRadius (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_12setClusteringRadius(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self), ((PyObject *)__pyx_v_rcutCluster));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_12setClusteringRadius(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_rcutCluster) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  __Pyx_RefNannySetupContext("setClusteringRadius", 0);

  /* "freud/order.pxi":1507
 *             rcutCluster (float): Radius for the cluster finding.
 *         """
 *         self.thisptr.setClusteringRadius(rcutCluster)             # <<<<<<<<<<<<<<
 * 
 *     def setBox(self, box):
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_rcutCluster); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1507, __pyx_L1_error)
  __pyx_v_self->thisptr->setClusteringRadius(__pyx_t_1);

  /* "freud/order.pxi":1501
 *         return BoxFromCPP(< _box.Box > self.thisptr.getBox())
 * 
 *     def setClusteringRadius(self, rcutCluster):             # <<<<<<<<<<<<<<
 *         """Reset the clustering radius.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("freud._freud.SolLiq.setClusteringRadius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1509
 *         self.thisptr.setClusteringRadius(rcutCluster)
 * 
 *     def setBox(self, box):             # <<<<<<<<<<<<<<
 *         """Reset the simulation box.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_15setBox(PyObject *__pyx_v_self, PyObject *__pyx_v_box); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_14setBox[] = "SolLiq.setBox(self, box)\nReset the simulation box.\n\n        Args:\n            box(:class:`freud.box.Box`): Simulation box.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_15setBox(PyObject *__pyx_v_self, PyObject *__pyx_v_box) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBox (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_14setBox(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self), ((PyObject *)__pyx_v_box));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_14setBox(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, PyObject *__pyx_v_box) {
  freud::box::Box __pyx_v_l_box;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  bool __pyx_t_11;
  __Pyx_RefNannySetupContext("setBox", 0);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/order.pxi":1515
 *             box(:class:`freud.box.Box`): Simulation box.
 *         """
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1515, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1515, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1515, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1515, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1517
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr.setBox(l_box)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":1518
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *         self.thisptr.setBox(l_box)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":1516
 *         """
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);

  /* "freud/order.pxi":1519
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr.setBox(l_box)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->thisptr->setBox(__pyx_v_l_box);

  /* "freud/order.pxi":1509
 *         self.thisptr.setClusteringRadius(rcutCluster)
 * 
 *     def setBox(self, box):             # <<<<<<<<<<<<<<
 *         """Reset the simulation box.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.SolLiq.setBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1522
 * 
 *     @property
 *     def largest_cluster_size(self):             # <<<<<<<<<<<<<<
 *         return self.getLargestClusterSize()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_20largest_cluster_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_20largest_cluster_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_20largest_cluster_size___get__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_20largest_cluster_size___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1523
 *     @property
 *     def largest_cluster_size(self):
 *         return self.getLargestClusterSize()             # <<<<<<<<<<<<<<
 * 
 *     def getLargestClusterSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getLargestClusterSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1523, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1523, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1522
 * 
 *     @property
 *     def largest_cluster_size(self):             # <<<<<<<<<<<<<<
 *         return self.getLargestClusterSize()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.SolLiq.largest_cluster_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1525
 *         return self.getLargestClusterSize()
 * 
 *     def getLargestClusterSize(self):             # <<<<<<<<<<<<<<
 *         """Returns the largest cluster size. Must call a compute method first.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_17getLargestClusterSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_16getLargestClusterSize[] = "SolLiq.getLargestClusterSize(self)\nReturns the largest cluster size. Must call a compute method first.\n\n        Returns:\n            unsigned int: Largest cluster size.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_17getLargestClusterSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLargestClusterSize (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_16getLargestClusterSize(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_16getLargestClusterSize(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  unsigned int __pyx_v_clusterSize;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getLargestClusterSize", 0);

  /* "freud/order.pxi":1531
 *             unsigned int: Largest cluster size.
 *         """
 *         cdef unsigned int clusterSize = self.thisptr.getLargestClusterSize()             # <<<<<<<<<<<<<<
 *         return clusterSize
 * 
 */
  __pyx_v_clusterSize = __pyx_v_self->thisptr->getLargestClusterSize();

  /* "freud/order.pxi":1532
 *         """
 *         cdef unsigned int clusterSize = self.thisptr.getLargestClusterSize()
 *         return clusterSize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_clusterSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1525
 *         return self.getLargestClusterSize()
 * 
 *     def getLargestClusterSize(self):             # <<<<<<<<<<<<<<
 *         """Returns the largest cluster size. Must call a compute method first.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.SolLiq.getLargestClusterSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1535
 * 
 *     @property
 *     def cluster_sizes(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterSizes()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_13cluster_sizes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_13cluster_sizes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_13cluster_sizes___get__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_13cluster_sizes___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1536
 *     @property
 *     def cluster_sizes(self):
 *         return self.getClusterSizes()             # <<<<<<<<<<<<<<
 * 
 *     def getClusterSizes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getClusterSizes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1536, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1536, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1535
 * 
 *     @property
 *     def cluster_sizes(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterSizes()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.SolLiq.cluster_sizes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1538
 *         return self.getClusterSizes()
 * 
 *     def getClusterSizes(self):             # <<<<<<<<<<<<<<
 *         """Return the sizes of all clusters.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_19getClusterSizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_18getClusterSizes[] = "SolLiq.getClusterSizes(self)\nReturn the sizes of all clusters.\n\n        Returns:\n            :math:`\\left(N_{clusters}\\right)` :class:`numpy.ndarray`:\n                The cluster sizes.\n\n        .. todo:: unsure of the best way to pass back, as this doesn't do\n                  what I want\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_19getClusterSizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClusterSizes (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_18getClusterSizes(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_18getClusterSizes(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  std::vector<unsigned int>  __pyx_v_clusterSizes;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getClusterSizes", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":1548
 *                   what I want
 *         """
 *         cdef vector[unsigned int] clusterSizes = self.thisptr.getClusterSizes()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumClusters()
 */
  __pyx_v_clusterSizes = __pyx_v_self->thisptr->getClusterSizes();

  /* "freud/order.pxi":1550
 *         cdef vector[unsigned int] clusterSizes = self.thisptr.getClusterSizes()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumClusters()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNumClusters());

  /* "freud/order.pxi":1552
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumClusters()
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,             # <<<<<<<<<<<<<<
 *                                          <void*> &clusterSizes)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_UINT32, ((void *)(&__pyx_v_clusterSizes))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1552, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1551, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1554
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,
 *                                          <void*> &clusterSizes)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":1538
 *         return self.getClusterSizes()
 * 
 *     def getClusterSizes(self):             # <<<<<<<<<<<<<<
 *         """Return the sizes of all clusters.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.SolLiq.getClusterSizes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1557
 * 
 *     @property
 *     def Ql_mi(self):             # <<<<<<<<<<<<<<
 *         return self.getQlmi()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_5Ql_mi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_5Ql_mi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_5Ql_mi___get__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_5Ql_mi___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1558
 *     @property
 *     def Ql_mi(self):
 *         return self.getQlmi()             # <<<<<<<<<<<<<<
 * 
 *     def getQlmi(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getQlmi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1558, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1558, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1557
 * 
 *     @property
 *     def Ql_mi(self):             # <<<<<<<<<<<<<<
 *         return self.getQlmi()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.SolLiq.Ql_mi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1560
 *         return self.getQlmi()
 * 
 *     def getQlmi(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`Q_{lmi}` for each
 *         particle.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_21getQlmi(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_20getQlmi[] = "SolLiq.getQlmi(self)\nGet a reference to the last computed :math:`Q_{lmi}` for each\n        particle.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_21getQlmi(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQlmi (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_20getQlmi(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_20getQlmi(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  __pyx_t_float_complex *__pyx_v_Qlmi;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getQlmi", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":1568
 *                 Order parameter.
 *         """
 *         cdef float complex * Qlmi = self.thisptr.getQlmi().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 */
  __pyx_v_Qlmi = __pyx_v_self->thisptr->getQlmi().get();

  /* "freud/order.pxi":1570
 *         cdef float complex * Qlmi = self.thisptr.getQlmi().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNP());

  /* "freud/order.pxi":1572
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,             # <<<<<<<<<<<<<<
 *                                          <void*> Qlmi)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_COMPLEX64, ((void *)__pyx_v_Qlmi)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1572, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo___pyx_t_float_complex, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1571, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1574
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 *                                          <void*> Qlmi)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":1560
 *         return self.getQlmi()
 * 
 *     def getQlmi(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed :math:`Q_{lmi}` for each
 *         particle.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.SolLiq.getQlmi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1577
 * 
 *     @property
 *     def clusters(self):             # <<<<<<<<<<<<<<
 *         return self.getClusters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_8clusters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_8clusters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_8clusters___get__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_8clusters___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1578
 *     @property
 *     def clusters(self):
 *         return self.getClusters()             # <<<<<<<<<<<<<<
 * 
 *     def getClusters(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getClusters); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1578, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1577
 * 
 *     @property
 *     def clusters(self):             # <<<<<<<<<<<<<<
 *         return self.getClusters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.SolLiq.clusters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1580
 *         return self.getClusters()
 * 
 *     def getClusters(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed set of solid-like cluster
 *         indices for each particle.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_23getClusters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_22getClusters[] = "SolLiq.getClusters(self)\nGet a reference to the last computed set of solid-like cluster\n        indices for each particle.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Clusters.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_23getClusters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClusters (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_22getClusters(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_22getClusters(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  unsigned int *__pyx_v_clusters;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getClusters", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":1588
 *                 Clusters.
 *         """
 *         cdef unsigned int * clusters = self.thisptr.getClusters().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         # this is the correct number
 */
  __pyx_v_clusters = __pyx_v_self->thisptr->getClusters().get();

  /* "freud/order.pxi":1591
 *         cdef np.npy_intp nbins[1]
 *         # this is the correct number
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNP());

  /* "freud/order.pxi":1593
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,             # <<<<<<<<<<<<<<
 *                                          <void*> clusters)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_UINT32, ((void *)__pyx_v_clusters)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1593, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1592, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1595
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,
 *                                          <void*> clusters)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":1580
 *         return self.getClusters()
 * 
 *     def getClusters(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed set of solid-like cluster
 *         indices for each particle.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.SolLiq.getClusters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1598
 * 
 *     @property
 *     def num_connections(self):             # <<<<<<<<<<<<<<
 *         return self.getNumberOfConnections()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_15num_connections_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_15num_connections_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_15num_connections___get__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_15num_connections___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1599
 *     @property
 *     def num_connections(self):
 *         return self.getNumberOfConnections()             # <<<<<<<<<<<<<<
 * 
 *     def getNumberOfConnections(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNumberOfConnections); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1599, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1599, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1598
 * 
 *     @property
 *     def num_connections(self):             # <<<<<<<<<<<<<<
 *         return self.getNumberOfConnections()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.SolLiq.num_connections.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1601
 *         return self.getNumberOfConnections()
 * 
 *     def getNumberOfConnections(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the number of connections per particle.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_25getNumberOfConnections(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_24getNumberOfConnections[] = "SolLiq.getNumberOfConnections(self)\nGet a reference to the number of connections per particle.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Clusters.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_25getNumberOfConnections(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumberOfConnections (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_24getNumberOfConnections(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_24getNumberOfConnections(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  unsigned int *__pyx_v_connections;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getNumberOfConnections", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":1609
 *         """
 *         cdef unsigned int * connections = \
 *             self.thisptr.getNumberOfConnections().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         # this is the correct number
 */
  __pyx_v_connections = __pyx_v_self->thisptr->getNumberOfConnections().get();

  /* "freud/order.pxi":1612
 *         cdef np.npy_intp nbins[1]
 *         # this is the correct number
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNP());

  /* "freud/order.pxi":1614
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,             # <<<<<<<<<<<<<<
 *                                          <void*> connections)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_UINT32, ((void *)__pyx_v_connections)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1614, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1613, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1616
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,
 *                                          <void*> connections)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":1601
 *         return self.getNumberOfConnections()
 * 
 *     def getNumberOfConnections(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the number of connections per particle.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.SolLiq.getNumberOfConnections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1619
 * 
 *     @property
 *     def Ql_dot_ij(self):             # <<<<<<<<<<<<<<
 *         return self.getNumberOfConnections()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_9Ql_dot_ij_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_9Ql_dot_ij_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_9Ql_dot_ij___get__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_9Ql_dot_ij___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1620
 *     @property
 *     def Ql_dot_ij(self):
 *         return self.getNumberOfConnections()             # <<<<<<<<<<<<<<
 * 
 *     def getQldot_ij(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNumberOfConnections); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1620, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1620, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1619
 * 
 *     @property
 *     def Ql_dot_ij(self):             # <<<<<<<<<<<<<<
 *         return self.getNumberOfConnections()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.SolLiq.Ql_dot_ij.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1622
 *         return self.getNumberOfConnections()
 * 
 *     def getQldot_ij(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the qldot_ij values.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_27getQldot_ij(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_26getQldot_ij[] = "SolLiq.getQldot_ij(self)\nGet a reference to the qldot_ij values.\n\n        Returns:\n            :math:`\\left(N_{clusters}\\right)` :class:`numpy.ndarray`:\n                The qldot values.\n\n        .. todo:: Figure out the size of this because apparently its size is\n                  just its size\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_27getQldot_ij(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQldot_ij (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_26getQldot_ij(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_26getQldot_ij(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  std::vector<__pyx_t_float_complex>  __pyx_v_Qldot;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getQldot_ij", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/order.pxi":1632
 *                   just its size
 *         """
 *         cdef vector[float complex] Qldot = self.thisptr.getQldot_ij()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumClusters()
 */
  __pyx_v_Qldot = __pyx_v_self->thisptr->getQldot_ij();

  /* "freud/order.pxi":1634
 *         cdef vector[float complex] Qldot = self.thisptr.getQldot_ij()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumClusters()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNumClusters());

  /* "freud/order.pxi":1636
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumClusters()
 *         cdef np.ndarray[np.complex64_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,             # <<<<<<<<<<<<<<
 *                                          <void*> &Qldot)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_COMPLEX64, ((void *)(&__pyx_v_Qldot))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1636, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo___pyx_t_float_complex, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1635, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1638
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_COMPLEX64,
 *                                          <void*> &Qldot)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/order.pxi":1622
 *         return self.getNumberOfConnections()
 * 
 *     def getQldot_ij(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the qldot_ij values.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.SolLiq.getQldot_ij", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1641
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_13num_particles_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_13num_particles_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_13num_particles___get__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_13num_particles___get__(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/order.pxi":1642
 *     @property
 *     def num_particles(self):
 *         return self.getNP()             # <<<<<<<<<<<<<<
 * 
 *     def getNP(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1642, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1642, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1641
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.SolLiq.num_particles.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1644
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_29getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_28getNP[] = "SolLiq.getNP(self)\nGet the number of particles.\n\n        Returns:\n          unsigned int: :math:`N_p`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_29getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNP (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_28getNP(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_28getNP(struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  unsigned int __pyx_v_np;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNP", 0);

  /* "freud/order.pxi":1650
 *           unsigned int: :math:`N_p`.
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         return np
 * 
 */
  __pyx_v_np = __pyx_v_self->thisptr->getNP();

  /* "freud/order.pxi":1651
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()
 *         return np             # <<<<<<<<<<<<<<
 * 
 * cdef class SolLiqNear(SolLiq):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1644
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.SolLiq.getNP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_31__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_30__reduce_cython__[] = "SolLiq.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_31__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_30__reduce_cython__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_30__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.SolLiq.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_33__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_6SolLiq_32__setstate_cython__[] = "SolLiq.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_6SolLiq_33__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_6SolLiq_32__setstate_cython__(((struct __pyx_obj_5freud_6_freud_SolLiq *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_6SolLiq_32__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_SolLiq *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.SolLiq.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1707
 *     cdef num_neigh
 * 
 *     def __init__(self, box, rmax, Qthreshold, Sthreshold, l, kn=12):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_10SolLiqNear_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_10SolLiqNear_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_Qthreshold = 0;
  PyObject *__pyx_v_Sthreshold = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_kn = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_rmax,&__pyx_n_s_Qthreshold,&__pyx_n_s_Sthreshold,&__pyx_n_s_l,&__pyx_n_s_kn,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = ((PyObject *)__pyx_int_12);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 6, 1); __PYX_ERR(0, 1707, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Qthreshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 6, 2); __PYX_ERR(0, 1707, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Sthreshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 6, 3); __PYX_ERR(0, 1707, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 6, 4); __PYX_ERR(0, 1707, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kn);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1707, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_rmax = values[1];
    __pyx_v_Qthreshold = values[2];
    __pyx_v_Sthreshold = values[3];
    __pyx_v_l = values[4];
    __pyx_v_kn = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1707, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.SolLiqNear.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_10SolLiqNear___init__(((struct __pyx_obj_5freud_6_freud_SolLiqNear *)__pyx_v_self), __pyx_v_box, __pyx_v_rmax, __pyx_v_Qthreshold, __pyx_v_Sthreshold, __pyx_v_l, __pyx_v_kn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_10SolLiqNear___init__(struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_Qthreshold, PyObject *__pyx_v_Sthreshold, PyObject *__pyx_v_l, PyObject *__pyx_v_kn) {
  freud::box::Box __pyx_v_l_box;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  bool __pyx_t_11;
  unsigned int __pyx_t_12;
  unsigned int __pyx_t_13;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/order.pxi":1708
 * 
 *     def __init__(self, box, rmax, Qthreshold, Sthreshold, l, kn=12):
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1708, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1708, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1710
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr = new order.SolLiq(l_box, rmax, Qthreshold, Sthreshold, l)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":1711
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *         self.thisptr = new order.SolLiq(l_box, rmax, Qthreshold, Sthreshold, l)
 *         self.m_box = box
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1711, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1711, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1711, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/order.pxi":1709
 *     def __init__(self, box, rmax, Qthreshold, Sthreshold, l, kn=12):
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);

  /* "freud/order.pxi":1712
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr = new order.SolLiq(l_box, rmax, Qthreshold, Sthreshold, l)             # <<<<<<<<<<<<<<
 *         self.m_box = box
 *         self.rmax = rmax
 */
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_rmax); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1712, __pyx_L1_error)
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_Qthreshold); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1712, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyInt_As_unsigned_int(__pyx_v_Sthreshold); if (unlikely((__pyx_t_12 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1712, __pyx_L1_error)
  __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_v_l); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1712, __pyx_L1_error)
  __pyx_v_self->__pyx_base.thisptr = new freud::order::SolLiq(__pyx_v_l_box, __pyx_t_10, __pyx_t_9, __pyx_t_12, __pyx_t_13);

  /* "freud/order.pxi":1713
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr = new order.SolLiq(l_box, rmax, Qthreshold, Sthreshold, l)
 *         self.m_box = box             # <<<<<<<<<<<<<<
 *         self.rmax = rmax
 *         self.num_neigh = kn
 */
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_GIVEREF(__pyx_v_box);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.m_box);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.m_box);
  __pyx_v_self->__pyx_base.m_box = __pyx_v_box;

  /* "freud/order.pxi":1714
 *         self.thisptr = new order.SolLiq(l_box, rmax, Qthreshold, Sthreshold, l)
 *         self.m_box = box
 *         self.rmax = rmax             # <<<<<<<<<<<<<<
 *         self.num_neigh = kn
 * 
 */
  __Pyx_INCREF(__pyx_v_rmax);
  __Pyx_GIVEREF(__pyx_v_rmax);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.rmax);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.rmax);
  __pyx_v_self->__pyx_base.rmax = __pyx_v_rmax;

  /* "freud/order.pxi":1715
 *         self.m_box = box
 *         self.rmax = rmax
 *         self.num_neigh = kn             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(__pyx_v_kn);
  __Pyx_GIVEREF(__pyx_v_kn);
  __Pyx_GOTREF(__pyx_v_self->num_neigh);
  __Pyx_DECREF(__pyx_v_self->num_neigh);
  __pyx_v_self->num_neigh = __pyx_v_kn;

  /* "freud/order.pxi":1707
 *     cdef num_neigh
 * 
 *     def __init__(self, box, rmax, Qthreshold, Sthreshold, l, kn=12):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.SolLiqNear.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1717
 *         self.num_neigh = kn
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_10SolLiqNear_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_10SolLiqNear_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_10SolLiqNear_2__dealloc__(((struct __pyx_obj_5freud_6_freud_SolLiqNear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_10SolLiqNear_2__dealloc__(struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/order.pxi":1718
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->__pyx_base.thisptr;

  /* "freud/order.pxi":1719
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, points, nlist=None):
 */
  __pyx_v_self->__pyx_base.thisptr = NULL;

  /* "freud/order.pxi":1717
 *         self.num_neigh = kn
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/order.pxi":1721
 *         self.thisptr = NULL
 * 
 *     def compute(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_10SolLiqNear_5compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_10SolLiqNear_4compute[] = "SolLiqNear.compute(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`):\n                Neighborlist to use to find bonds.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_10SolLiqNear_5compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute") < 0)) __PYX_ERR(0, 1721, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1721, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.SolLiqNear.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_10SolLiqNear_4compute(((struct __pyx_obj_5freud_6_freud_SolLiqNear *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_10SolLiqNear_4compute(struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("compute", 0);

  /* "freud/order.pxi":1731
 *                 Neighborlist to use to find bonds.
 *         """
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "freud/order.pxi":1732
 *         """
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return SolLiq.compute(self, points, nlist_)
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->__pyx_base.m_box);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.m_box);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self->__pyx_base.m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_4, Py_True);
    __Pyx_INCREF(__pyx_v_self->__pyx_base.rmax);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.rmax);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_4, __pyx_v_self->__pyx_base.rmax);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1733
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         return SolLiq.compute(self, points, nlist_)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 1733, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1734
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return SolLiq.compute(self, points, nlist_)             # <<<<<<<<<<<<<<
 * 
 *     def computeSolLiqVariant(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5freud_6_freud_SolLiq), __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(((PyObject *)__pyx_v_nlist_));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_nlist_));
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, ((PyObject *)__pyx_v_nlist_));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1721
 *         self.thisptr = NULL
 * 
 *     def compute(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.SolLiqNear.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1736
 *         return SolLiq.compute(self, points, nlist_)
 * 
 *     def computeSolLiqVariant(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_10SolLiqNear_7computeSolLiqVariant(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_10SolLiqNear_6computeSolLiqVariant[] = "SolLiqNear.computeSolLiqVariant(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`):\n                Neighborlist to use to find bonds.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_10SolLiqNear_7computeSolLiqVariant(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeSolLiqVariant (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeSolLiqVariant") < 0)) __PYX_ERR(0, 1736, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeSolLiqVariant", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1736, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.SolLiqNear.computeSolLiqVariant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_10SolLiqNear_6computeSolLiqVariant(((struct __pyx_obj_5freud_6_freud_SolLiqNear *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_10SolLiqNear_6computeSolLiqVariant(struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("computeSolLiqVariant", 0);

  /* "freud/order.pxi":1746
 *                 Neighborlist to use to find bonds.
 *         """
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "freud/order.pxi":1747
 *         """
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return SolLiq.computeSolLiqVariant(self, points, nlist_)
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1746, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1746, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->__pyx_base.m_box);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.m_box);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self->__pyx_base.m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_4, Py_True);
    __Pyx_INCREF(__pyx_v_self->__pyx_base.rmax);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.rmax);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_4, __pyx_v_self->__pyx_base.rmax);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1748
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         return SolLiq.computeSolLiqVariant(self, points, nlist_)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 1748, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1749
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return SolLiq.computeSolLiqVariant(self, points, nlist_)             # <<<<<<<<<<<<<<
 * 
 *     def computeSolLiqNoNorm(self, points, nlist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5freud_6_freud_SolLiq), __pyx_n_s_computeSolLiqVariant); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1749, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1749, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(((PyObject *)__pyx_v_nlist_));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_nlist_));
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, ((PyObject *)__pyx_v_nlist_));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1736
 *         return SolLiq.compute(self, points, nlist_)
 * 
 *     def computeSolLiqVariant(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.SolLiqNear.computeSolLiqVariant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/order.pxi":1751
 *         return SolLiq.computeSolLiqVariant(self, points, nlist_)
 * 
 *     def computeSolLiqNoNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_10SolLiqNear_9computeSolLiqNoNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_10SolLiqNear_8computeSolLiqNoNorm[] = "SolLiqNear.computeSolLiqNoNorm(self, points, nlist=None)\nCompute the local rotationally invariant :math:`Q_l` order\n        parameter.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`):\n                Neighborlist to use to find bonds.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_10SolLiqNear_9computeSolLiqNoNorm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeSolLiqNoNorm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeSolLiqNoNorm") < 0)) __PYX_ERR(0, 1751, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeSolLiqNoNorm", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1751, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.SolLiqNear.computeSolLiqNoNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_10SolLiqNear_8computeSolLiqNoNorm(((struct __pyx_obj_5freud_6_freud_SolLiqNear *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_10SolLiqNear_8computeSolLiqNoNorm(struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist) {
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("computeSolLiqNoNorm", 0);

  /* "freud/order.pxi":1761
 *                 Neighborlist to use to find bonds.
 *         """
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "freud/order.pxi":1762
 *         """
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return SolLiq.computeSolLiqNoNorm(self, points, nlist_)
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1761, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->__pyx_base.m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->__pyx_base.rmax};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1761, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->__pyx_base.m_box);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.m_box);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self->__pyx_base.m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_4, Py_True);
    __Pyx_INCREF(__pyx_v_self->__pyx_base.rmax);
    __Pyx_GIVEREF(__pyx_v_self->__pyx_base.rmax);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_4, __pyx_v_self->__pyx_base.rmax);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1763
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         return SolLiq.computeSolLiqNoNorm(self, points, nlist_)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(0, 1763, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/order.pxi":1764
 *             self.m_box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         return SolLiq.computeSolLiqNoNorm(self, points, nlist_)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5freud_6_freud_SolLiq), __pyx_n_s_computeSolLiqNoNorm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_points, ((PyObject *)__pyx_v_nlist_)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(((PyObject *)__pyx_v_nlist_));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_nlist_));
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, ((PyObject *)__pyx_v_nlist_));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/order.pxi":1751
 *         return SolLiq.computeSolLiqVariant(self, points, nlist_)
 * 
 *     def computeSolLiqNoNorm(self, points, nlist=None):             # <<<<<<<<<<<<<<
 *         """Compute the local rotationally invariant :math:`Q_l` order
 *         parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.SolLiqNear.computeSolLiqNoNorm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_10SolLiqNear_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_10SolLiqNear_10__reduce_cython__[] = "SolLiqNear.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_10SolLiqNear_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_10SolLiqNear_10__reduce_cython__(((struct __pyx_obj_5freud_6_freud_SolLiqNear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_10SolLiqNear_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.SolLiqNear.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_10SolLiqNear_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_10SolLiqNear_12__setstate_cython__[] = "SolLiqNear.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_10SolLiqNear_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_10SolLiqNear_12__setstate_cython__(((struct __pyx_obj_5freud_6_freud_SolLiqNear *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_10SolLiqNear_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_SolLiqNear *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.SolLiqNear.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":91
 *     cdef rmax
 * 
 *     def __cinit__(self, float rmax, float k, unsigned int n,             # <<<<<<<<<<<<<<
 *                   unsigned int n_bins_t, unsigned int n_bins_p):
 *         self.thisptr = new environment.BondOrder(
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_9BondOrder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_9BondOrder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_rmax;
  float __pyx_v_k;
  unsigned int __pyx_v_n;
  unsigned int __pyx_v_n_bins_t;
  unsigned int __pyx_v_n_bins_p;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rmax,&__pyx_n_s_k,&__pyx_n_s_n,&__pyx_n_s_n_bins_t,&__pyx_n_s_n_bins_p,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 1); __PYX_ERR(1, 91, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 2); __PYX_ERR(1, 91, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_bins_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 3); __PYX_ERR(1, 91, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_bins_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 4); __PYX_ERR(1, 91, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 91, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_rmax = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_rmax == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L3_error)
    __pyx_v_k = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_k == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_n == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L3_error)
    __pyx_v_n_bins_t = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_n_bins_t == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 92, __pyx_L3_error)
    __pyx_v_n_bins_p = __Pyx_PyInt_As_unsigned_int(values[4]); if (unlikely((__pyx_v_n_bins_p == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 92, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 91, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.BondOrder.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder___cinit__(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self), __pyx_v_rmax, __pyx_v_k, __pyx_v_n, __pyx_v_n_bins_t, __pyx_v_n_bins_p);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_9BondOrder___cinit__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self, float __pyx_v_rmax, float __pyx_v_k, unsigned int __pyx_v_n, unsigned int __pyx_v_n_bins_t, unsigned int __pyx_v_n_bins_p) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "freud/environment.pxi":93
 *     def __cinit__(self, float rmax, float k, unsigned int n,
 *                   unsigned int n_bins_t, unsigned int n_bins_p):
 *         self.thisptr = new environment.BondOrder(             # <<<<<<<<<<<<<<
 *             rmax, k, n, n_bins_t, n_bins_p)
 *         self.rmax = rmax
 */
  __pyx_v_self->thisptr = new freud::environment::BondOrder(__pyx_v_rmax, __pyx_v_k, __pyx_v_n, __pyx_v_n_bins_t, __pyx_v_n_bins_p);

  /* "freud/environment.pxi":95
 *         self.thisptr = new environment.BondOrder(
 *             rmax, k, n, n_bins_t, n_bins_p)
 *         self.rmax = rmax             # <<<<<<<<<<<<<<
 *         self.num_neigh = n
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_rmax); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rmax);
  __Pyx_DECREF(__pyx_v_self->rmax);
  __pyx_v_self->rmax = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":96
 *             rmax, k, n, n_bins_t, n_bins_p)
 *         self.rmax = rmax
 *         self.num_neigh = n             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->num_neigh);
  __Pyx_DECREF(__pyx_v_self->num_neigh);
  __pyx_v_self->num_neigh = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":91
 *     cdef rmax
 * 
 *     def __cinit__(self, float rmax, float k, unsigned int n,             # <<<<<<<<<<<<<<
 *                   unsigned int n_bins_t, unsigned int n_bins_p):
 *         self.thisptr = new environment.BondOrder(
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.BondOrder.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":98
 *         self.num_neigh = n
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_9BondOrder_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_9BondOrder_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_9BondOrder_2__dealloc__(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_9BondOrder_2__dealloc__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/environment.pxi":99
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def accumulate(self, box, ref_points, ref_orientations, points,
 */
  delete __pyx_v_self->thisptr;

  /* "freud/environment.pxi":98
 *         self.num_neigh = n
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/environment.pxi":101
 *         del self.thisptr
 * 
 *     def accumulate(self, box, ref_points, ref_orientations, points,             # <<<<<<<<<<<<<<
 *                    orientations, str mode="bod", nlist=None):
 *         """Calculates the correlation function and adds to the current
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_5accumulate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_4accumulate[] = "BondOrder.accumulate(self, box, ref_points, ref_orientations, points, orientations, str mode='bod', nlist=None)\nCalculates the correlation function and adds to the current\n        histogram.\n\n        Args:\n            box (:class:`freud.box.Box`):\n                Simulation box.\n            ref_points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Reference points to calculate bonds.\n            ref_orientations ((:math:`N_{particles}`, 4)             :class:`numpy.ndarray`):\n                Reference orientations to calculate bonds.\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the bonding.\n            orientations ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Orientations to calculate the bonding.\n            mode (str, optional):\n                Mode to calculate bond order. Options are :code:`'bod'`,\n                :code:`'lbod'`, :code:`'obcd'`, or :code:`'oocd'`\n                (Default value = :code:`'bod'`).\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                NeighborList to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_5accumulate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_ref_points = 0;
  PyObject *__pyx_v_ref_orientations = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_orientations = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("accumulate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_ref_points,&__pyx_n_s_ref_orientations,&__pyx_n_s_points,&__pyx_n_s_orientations,&__pyx_n_s_mode,&__pyx_n_s_nlist,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_n_s_bod);

    /* "freud/environment.pxi":102
 * 
 *     def accumulate(self, box, ref_points, ref_orientations, points,
 *                    orientations, str mode="bod", nlist=None):             # <<<<<<<<<<<<<<
 *         """Calculates the correlation function and adds to the current
 *         histogram.
 */
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ref_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("accumulate", 0, 5, 7, 1); __PYX_ERR(1, 101, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ref_orientations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("accumulate", 0, 5, 7, 2); __PYX_ERR(1, 101, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("accumulate", 0, 5, 7, 3); __PYX_ERR(1, 101, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orientations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("accumulate", 0, 5, 7, 4); __PYX_ERR(1, 101, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "accumulate") < 0)) __PYX_ERR(1, 101, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_ref_points = values[1];
    __pyx_v_ref_orientations = values[2];
    __pyx_v_points = values[3];
    __pyx_v_orientations = values[4];
    __pyx_v_mode = ((PyObject*)values[5]);
    __pyx_v_nlist = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("accumulate", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 101, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.BondOrder.accumulate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mode), (&PyString_Type), 1, "mode", 1))) __PYX_ERR(1, 102, __pyx_L1_error)
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_4accumulate(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self), __pyx_v_box, __pyx_v_ref_points, __pyx_v_ref_orientations, __pyx_v_points, __pyx_v_orientations, __pyx_v_mode, __pyx_v_nlist);

  /* "freud/environment.pxi":101
 *         del self.thisptr
 * 
 *     def accumulate(self, box, ref_points, ref_orientations, points,             # <<<<<<<<<<<<<<
 *                    orientations, str mode="bod", nlist=None):
 *         """Calculates the correlation function and adds to the current
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_4accumulate(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_ref_points, PyObject *__pyx_v_ref_orientations, PyObject *__pyx_v_points, PyObject *__pyx_v_orientations, PyObject *__pyx_v_mode, PyObject *__pyx_v_nlist) {
  unsigned int __pyx_v_index;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  PyArrayObject *__pyx_v_l_ref_points = 0;
  PyArrayObject *__pyx_v_l_points = 0;
  PyArrayObject *__pyx_v_l_ref_orientations = 0;
  PyArrayObject *__pyx_v_l_orientations = 0;
  unsigned int __pyx_v_n_ref;
  unsigned int __pyx_v_n_p;
  freud::box::Box __pyx_v_l_box;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_orientations;
  __Pyx_Buffer __pyx_pybuffer_l_orientations;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_ref_orientations;
  __Pyx_Buffer __pyx_pybuffer_l_ref_orientations;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_ref_points;
  __Pyx_Buffer __pyx_pybuffer_l_ref_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  unsigned int __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  float __pyx_t_13;
  float __pyx_t_14;
  float __pyx_t_15;
  bool __pyx_t_16;
  __Pyx_RefNannySetupContext("accumulate", 0);
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_INCREF(__pyx_v_ref_points);
  __Pyx_INCREF(__pyx_v_ref_orientations);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_INCREF(__pyx_v_orientations);
  __pyx_pybuffer_l_ref_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_ref_points.refcount = 0;
  __pyx_pybuffernd_l_ref_points.data = NULL;
  __pyx_pybuffernd_l_ref_points.rcbuffer = &__pyx_pybuffer_l_ref_points;
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;
  __pyx_pybuffer_l_ref_orientations.pybuffer.buf = NULL;
  __pyx_pybuffer_l_ref_orientations.refcount = 0;
  __pyx_pybuffernd_l_ref_orientations.data = NULL;
  __pyx_pybuffernd_l_ref_orientations.rcbuffer = &__pyx_pybuffer_l_ref_orientations;
  __pyx_pybuffer_l_orientations.pybuffer.buf = NULL;
  __pyx_pybuffer_l_orientations.refcount = 0;
  __pyx_pybuffernd_l_orientations.data = NULL;
  __pyx_pybuffernd_l_orientations.rcbuffer = &__pyx_pybuffer_l_orientations;

  /* "freud/environment.pxi":125
 *                 NeighborList to use to find bonds (Default value = None).
 *         """
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         ref_points = freud.common.convert_array(
 *             ref_points, 2, dtype=np.float32, contiguous=True,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 125, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 125, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":126
 *         """
 *         box = freud.common.convert_box(box)
 *         ref_points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ref_points, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_points")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":127
 *         box = freud.common.convert_box(box)
 *         ref_points = freud.common.convert_array(
 *             ref_points, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="ref_points")
 *         if ref_points.shape[1] != 3:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_ref_points);
  __Pyx_GIVEREF(__pyx_v_ref_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ref_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 127, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_array_name, __pyx_n_s_ref_points) < 0) __PYX_ERR(1, 127, __pyx_L1_error)

  /* "freud/environment.pxi":126
 *         """
 *         box = freud.common.convert_box(box)
 *         ref_points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ref_points, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_points")
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_ref_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":129
 *             ref_points, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_points")
 *         if ref_points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('ref_points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":130
 *             array_name="ref_points")
 *         if ref_points.shape[1] != 3:
 *             raise TypeError('ref_points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         points = freud.common.convert_array(
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 130, __pyx_L1_error)

    /* "freud/environment.pxi":129
 *             ref_points, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_points")
 *         if ref_points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('ref_points should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":132
 *             raise TypeError('ref_points should be an Nx3 array')
 * 
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_common); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/environment.pxi":133
 * 
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 133, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(1, 133, __pyx_L1_error)

  /* "freud/environment.pxi":132
 *             raise TypeError('ref_points should be an Nx3 array')
 * 
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/environment.pxi":134
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":135
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         ref_orientations = freud.common.convert_array(
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 135, __pyx_L1_error)

    /* "freud/environment.pxi":134
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":137
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         ref_orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ref_orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_orientations")
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":138
 * 
 *         ref_orientations = freud.common.convert_array(
 *             ref_orientations, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="ref_orientations")
 *         if ref_orientations.shape[1] != 4:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_ref_orientations);
  __Pyx_GIVEREF(__pyx_v_ref_orientations);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ref_orientations);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(1, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 138, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_array_name, __pyx_n_s_ref_orientations) < 0) __PYX_ERR(1, 138, __pyx_L1_error)

  /* "freud/environment.pxi":137
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         ref_orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ref_orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_orientations")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_ref_orientations, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":140
 *             ref_orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_orientations")
 *         if ref_orientations.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('ref_orientations should be an Nx4 array')
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref_orientations, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":141
 *             array_name="ref_orientations")
 *         if ref_orientations.shape[1] != 4:
 *             raise TypeError('ref_orientations should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         orientations = freud.common.convert_array(
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 141, __pyx_L1_error)

    /* "freud/environment.pxi":140
 *             ref_orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_orientations")
 *         if ref_orientations.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('ref_orientations should be an Nx4 array')
 * 
 */
  }

  /* "freud/environment.pxi":143
 *             raise TypeError('ref_orientations should be an Nx4 array')
 * 
 *         orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/environment.pxi":144
 * 
 *         orientations = freud.common.convert_array(
 *             orientations, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_orientations);
  __Pyx_GIVEREF(__pyx_v_orientations);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_orientations);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_array_name, __pyx_n_s_orientations) < 0) __PYX_ERR(1, 144, __pyx_L1_error)

  /* "freud/environment.pxi":143
 *             raise TypeError('ref_orientations should be an Nx4 array')
 * 
 *         orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_orientations, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":146
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('orientations should be an Nx4 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_orientations, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":147
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:
 *             raise TypeError('orientations should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef unsigned int index = 0
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 147, __pyx_L1_error)

    /* "freud/environment.pxi":146
 *             orientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('orientations should be an Nx4 array')
 * 
 */
  }

  /* "freud/environment.pxi":149
 *             raise TypeError('orientations should be an Nx4 array')
 * 
 *         cdef unsigned int index = 0             # <<<<<<<<<<<<<<
 *         if mode == "bod":
 *             index = 0
 */
  __pyx_v_index = 0;

  /* "freud/environment.pxi":150
 * 
 *         cdef unsigned int index = 0
 *         if mode == "bod":             # <<<<<<<<<<<<<<
 *             index = 0
 *         elif mode == "lbod":
 */
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_bod, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 150, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "freud/environment.pxi":151
 *         cdef unsigned int index = 0
 *         if mode == "bod":
 *             index = 0             # <<<<<<<<<<<<<<
 *         elif mode == "lbod":
 *             index = 1
 */
    __pyx_v_index = 0;

    /* "freud/environment.pxi":150
 * 
 *         cdef unsigned int index = 0
 *         if mode == "bod":             # <<<<<<<<<<<<<<
 *             index = 0
 *         elif mode == "lbod":
 */
    goto __pyx_L7;
  }

  /* "freud/environment.pxi":152
 *         if mode == "bod":
 *             index = 0
 *         elif mode == "lbod":             # <<<<<<<<<<<<<<
 *             index = 1
 *         elif mode == "obcd":
 */
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_lbod, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 152, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "freud/environment.pxi":153
 *             index = 0
 *         elif mode == "lbod":
 *             index = 1             # <<<<<<<<<<<<<<
 *         elif mode == "obcd":
 *             index = 2
 */
    __pyx_v_index = 1;

    /* "freud/environment.pxi":152
 *         if mode == "bod":
 *             index = 0
 *         elif mode == "lbod":             # <<<<<<<<<<<<<<
 *             index = 1
 *         elif mode == "obcd":
 */
    goto __pyx_L7;
  }

  /* "freud/environment.pxi":154
 *         elif mode == "lbod":
 *             index = 1
 *         elif mode == "obcd":             # <<<<<<<<<<<<<<
 *             index = 2
 *         elif mode == "oocd":
 */
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_obcd, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 154, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "freud/environment.pxi":155
 *             index = 1
 *         elif mode == "obcd":
 *             index = 2             # <<<<<<<<<<<<<<
 *         elif mode == "oocd":
 *             index = 3
 */
    __pyx_v_index = 2;

    /* "freud/environment.pxi":154
 *         elif mode == "lbod":
 *             index = 1
 *         elif mode == "obcd":             # <<<<<<<<<<<<<<
 *             index = 2
 *         elif mode == "oocd":
 */
    goto __pyx_L7;
  }

  /* "freud/environment.pxi":156
 *         elif mode == "obcd":
 *             index = 2
 *         elif mode == "oocd":             # <<<<<<<<<<<<<<
 *             index = 3
 *         else:
 */
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_oocd, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 156, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (likely(__pyx_t_6)) {

    /* "freud/environment.pxi":157
 *             index = 2
 *         elif mode == "oocd":
 *             index = 3             # <<<<<<<<<<<<<<
 *         else:
 *             raise RuntimeError(
 */
    __pyx_v_index = 3;

    /* "freud/environment.pxi":156
 *         elif mode == "obcd":
 *             index = 2
 *         elif mode == "oocd":             # <<<<<<<<<<<<<<
 *             index = 3
 *         else:
 */
    goto __pyx_L7;
  }

  /* "freud/environment.pxi":159
 *             index = 3
 *         else:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 ('Unknown BOD mode: {}. Options are:'
 *                     'bod, lbod, obcd, oocd.').format(mode))
 */
  /*else*/ {

    /* "freud/environment.pxi":161
 *             raise RuntimeError(
 *                 ('Unknown BOD mode: {}. Options are:'
 *                     'bod, lbod, obcd, oocd.').format(mode))             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_BOD_mode_Options_are_bod, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_mode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_mode};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 161, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_mode};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 161, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_mode);
        __Pyx_GIVEREF(__pyx_v_mode);
        PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_mode);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "freud/environment.pxi":159
 *             index = 3
 *         else:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 ('Unknown BOD mode: {}. Options are:'
 *                     'bod, lbod, obcd, oocd.').format(mode))
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 159, __pyx_L1_error)
  }
  __pyx_L7:;

  /* "freud/environment.pxi":163
 *                     'bod, lbod, obcd, oocd.').format(mode))
 * 
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             box, ref_points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "freud/environment.pxi":164
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 *             box, ref_points, points, self.num_neigh, nlist, None, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_1 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[8] = {__pyx_t_1, __pyx_v_box, __pyx_v_ref_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_None, __pyx_v_self->rmax};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 7+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 163, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[8] = {__pyx_t_1, __pyx_v_box, __pyx_v_ref_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_None, __pyx_v_self->rmax};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 7+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 163, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(7+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_box);
    __Pyx_GIVEREF(__pyx_v_box);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, __pyx_v_box);
    __Pyx_INCREF(__pyx_v_ref_points);
    __Pyx_GIVEREF(__pyx_v_ref_points);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_v_ref_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_8, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_8, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_4, 4+__pyx_t_8, __pyx_v_nlist);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 5+__pyx_t_8, Py_None);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_4, 6+__pyx_t_8, __pyx_v_self->rmax);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "freud/environment.pxi":165
 *         defaulted_nlist = make_default_nlist_nn(
 *             box, ref_points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(1, 165, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "freud/environment.pxi":166
 *             box, ref_points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_ref_points = ref_points
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/environment.pxi":168
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         cdef np.ndarray[float, ndim=2] l_ref_points = ref_points             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef np.ndarray[float, ndim=2] l_ref_orientations = ref_orientations
 */
  if (!(likely(((__pyx_v_ref_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ref_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 168, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_ref_points;
  __Pyx_INCREF(__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_ref_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_ref_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_ref_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 168, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_ref_points.diminfo[0].strides = __pyx_pybuffernd_l_ref_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_ref_points.diminfo[0].shape = __pyx_pybuffernd_l_ref_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_ref_points.diminfo[1].strides = __pyx_pybuffernd_l_ref_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_ref_points.diminfo[1].shape = __pyx_pybuffernd_l_ref_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_ref_points = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "freud/environment.pxi":169
 * 
 *         cdef np.ndarray[float, ndim=2] l_ref_points = ref_points
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_ref_orientations = ref_orientations
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 169, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "freud/environment.pxi":170
 *         cdef np.ndarray[float, ndim=2] l_ref_points = ref_points
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef np.ndarray[float, ndim=2] l_ref_orientations = ref_orientations             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 *         cdef unsigned int n_ref = <unsigned int> ref_points.shape[0]
 */
  if (!(likely(((__pyx_v_ref_orientations) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ref_orientations, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 170, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_ref_orientations;
  __Pyx_INCREF(__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_ref_orientations.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_ref_orientations = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_ref_orientations.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 170, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_ref_orientations.diminfo[0].strides = __pyx_pybuffernd_l_ref_orientations.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_ref_orientations.diminfo[0].shape = __pyx_pybuffernd_l_ref_orientations.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_ref_orientations.diminfo[1].strides = __pyx_pybuffernd_l_ref_orientations.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_ref_orientations.diminfo[1].shape = __pyx_pybuffernd_l_ref_orientations.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_ref_orientations = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "freud/environment.pxi":171
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef np.ndarray[float, ndim=2] l_ref_orientations = ref_orientations
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations             # <<<<<<<<<<<<<<
 *         cdef unsigned int n_ref = <unsigned int> ref_points.shape[0]
 *         cdef unsigned int n_p = <unsigned int> points.shape[0]
 */
  if (!(likely(((__pyx_v_orientations) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_orientations, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 171, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_orientations;
  __Pyx_INCREF(__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_orientations = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 171, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_orientations.diminfo[0].strides = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_orientations.diminfo[0].shape = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_orientations.diminfo[1].strides = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_orientations.diminfo[1].shape = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_orientations = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "freud/environment.pxi":172
 *         cdef np.ndarray[float, ndim=2] l_ref_orientations = ref_orientations
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 *         cdef unsigned int n_ref = <unsigned int> ref_points.shape[0]             # <<<<<<<<<<<<<<
 *         cdef unsigned int n_p = <unsigned int> points.shape[0]
 *         cdef _box.Box l_box = _box.Box(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_n_ref = ((unsigned int)__pyx_t_9);

  /* "freud/environment.pxi":173
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 *         cdef unsigned int n_ref = <unsigned int> ref_points.shape[0]
 *         cdef unsigned int n_p = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_n_p = ((unsigned int)__pyx_t_9);

  /* "freud/environment.pxi":175
 *         cdef unsigned int n_p = <unsigned int> points.shape[0]
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         with nogil:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":176
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.accumulate(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 176, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 176, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 176, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 176, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_15 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_15 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 176, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 176, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_16 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":174
 *         cdef unsigned int n_ref = <unsigned int> ref_points.shape[0]
 *         cdef unsigned int n_p = <unsigned int> points.shape[0]
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16);

  /* "freud/environment.pxi":177
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.accumulate(
 *                 l_box, nlist_ptr,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/environment.pxi":178
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         with nogil:
 *             self.thisptr.accumulate(             # <<<<<<<<<<<<<<
 *                 l_box, nlist_ptr,
 *                 <vec3[float]*> l_ref_points.data,
 */
        __pyx_v_self->thisptr->accumulate(__pyx_v_l_box, __pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_ref_points->data), ((quat<float>  *)__pyx_v_l_ref_orientations->data), __pyx_v_n_ref, ((vec3<float>  *)__pyx_v_l_points->data), ((quat<float>  *)__pyx_v_l_orientations->data), __pyx_v_n_p, __pyx_v_index);
      }

      /* "freud/environment.pxi":177
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.accumulate(
 *                 l_box, nlist_ptr,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L10;
        }
        __pyx_L10:;
      }
  }

  /* "freud/environment.pxi":187
 *                 n_p,
 *                 index)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/environment.pxi":101
 *         del self.thisptr
 * 
 *     def accumulate(self, box, ref_points, ref_orientations, points,             # <<<<<<<<<<<<<<
 *                    orientations, str mode="bod", nlist=None):
 *         """Calculates the correlation function and adds to the current
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_ref_orientations.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_ref_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.BondOrder.accumulate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_ref_orientations.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_ref_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_ref_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_ref_orientations);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_orientations);
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XDECREF(__pyx_v_ref_points);
  __Pyx_XDECREF(__pyx_v_ref_orientations);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_orientations);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":190
 * 
 *     @property
 *     def bond_order(self):             # <<<<<<<<<<<<<<
 *         return self.getBondOrder()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_10bond_order_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_10bond_order_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_10bond_order___get__(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_10bond_order___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":191
 *     @property
 *     def bond_order(self):
 *         return self.getBondOrder()             # <<<<<<<<<<<<<<
 * 
 *     def getBondOrder(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getBondOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":190
 * 
 *     @property
 *     def bond_order(self):             # <<<<<<<<<<<<<<
 *         return self.getBondOrder()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.BondOrder.bond_order.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":193
 *         return self.getBondOrder()
 * 
 *     def getBondOrder(self):             # <<<<<<<<<<<<<<
 *         """Get the bond order.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_7getBondOrder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_6getBondOrder[] = "BondOrder.getBondOrder(self)\nGet the bond order.\n\n        Returns:\n            :math:`\\left(N_{\\phi}, N_{\\theta} \\right)`             :class:`numpy.ndarray`:\n                Bond order.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_7getBondOrder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBondOrder (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_6getBondOrder(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_6getBondOrder(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  float *__pyx_v_bod;
  npy_intp __pyx_v_nbins[2];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getBondOrder", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/environment.pxi":201
 *                 Bond order.
 *         """
 *         cdef float * bod = self.thisptr.getBondOrder().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNBinsPhi()
 */
  __pyx_v_bod = __pyx_v_self->thisptr->getBondOrder().get();

  /* "freud/environment.pxi":203
 *         cdef float * bod = self.thisptr.getBondOrder().get()
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNBinsPhi()             # <<<<<<<<<<<<<<
 *         nbins[1] = <np.npy_intp> self.thisptr.getNBinsTheta()
 *         cdef np.ndarray[float, ndim=2] result = np.PyArray_SimpleNewFromData(
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNBinsPhi());

  /* "freud/environment.pxi":204
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNBinsPhi()
 *         nbins[1] = <np.npy_intp> self.thisptr.getNBinsTheta()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] result = np.PyArray_SimpleNewFromData(
 *             2, nbins, np.NPY_FLOAT32, <void*> bod)
 */
  (__pyx_v_nbins[1]) = ((npy_intp)__pyx_v_self->thisptr->getNBinsTheta());

  /* "freud/environment.pxi":205
 *         nbins[0] = <np.npy_intp> self.thisptr.getNBinsPhi()
 *         nbins[1] = <np.npy_intp> self.thisptr.getNBinsTheta()
 *         cdef np.ndarray[float, ndim=2] result = np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *             2, nbins, np.NPY_FLOAT32, <void*> bod)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(2, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_bod)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 205, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 205, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":207
 *         cdef np.ndarray[float, ndim=2] result = np.PyArray_SimpleNewFromData(
 *             2, nbins, np.NPY_FLOAT32, <void*> bod)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/environment.pxi":193
 *         return self.getBondOrder()
 * 
 *     def getBondOrder(self):             # <<<<<<<<<<<<<<
 *         """Get the bond order.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.BondOrder.getBondOrder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":210
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_3box_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_3box_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_3box___get__(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_3box___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":211
 *     @property
 *     def box(self):
 *         return self.getBox()             # <<<<<<<<<<<<<<
 * 
 *     def getBox(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getBox); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 211, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 211, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":210
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.BondOrder.box.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":213
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_9getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_8getBox[] = "BondOrder.getBox(self)\nGet the box used in the calculation.\n\n        Returns:\n            :class:`freud.box.Box`: freud Box.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_9getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBox (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_8getBox(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_8getBox(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getBox", 0);

  /* "freud/environment.pxi":219
 *             :class:`freud.box.Box`: freud Box.
 *         """
 *         return BoxFromCPP(< _box.Box > self.thisptr.getBox())             # <<<<<<<<<<<<<<
 * 
 *     def resetBondOrder(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5freud_3box_BoxFromCPP(((freud::box::Box)__pyx_v_self->thisptr->getBox())); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":213
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.BondOrder.getBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":221
 *         return BoxFromCPP(< _box.Box > self.thisptr.getBox())
 * 
 *     def resetBondOrder(self):             # <<<<<<<<<<<<<<
 *         """Resets the values of the bond order in memory."""
 *         self.thisptr.reset()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_11resetBondOrder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_10resetBondOrder[] = "BondOrder.resetBondOrder(self)\nResets the values of the bond order in memory.";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_11resetBondOrder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetBondOrder (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_10resetBondOrder(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_10resetBondOrder(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetBondOrder", 0);

  /* "freud/environment.pxi":223
 *     def resetBondOrder(self):
 *         """Resets the values of the bond order in memory."""
 *         self.thisptr.reset()             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, box, ref_points, ref_orientations, points, orientations,
 */
  __pyx_v_self->thisptr->reset();

  /* "freud/environment.pxi":221
 *         return BoxFromCPP(< _box.Box > self.thisptr.getBox())
 * 
 *     def resetBondOrder(self):             # <<<<<<<<<<<<<<
 *         """Resets the values of the bond order in memory."""
 *         self.thisptr.reset()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":225
 *         self.thisptr.reset()
 * 
 *     def compute(self, box, ref_points, ref_orientations, points, orientations,             # <<<<<<<<<<<<<<
 *                 mode="bod", nlist=None):
 *         """Calculates the bond order histogram. Will overwrite the current
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_13compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_12compute[] = "BondOrder.compute(self, box, ref_points, ref_orientations, points, orientations, mode='bod', nlist=None)\nCalculates the bond order histogram. Will overwrite the current\n        histogram.\n\n        Args:\n            box (:class:`freud.box.Box`):\n                Simulation box.\n            ref_points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Reference points to calculate bonds.\n            ref_orientations ((:math:`N_{particles}`, 4)             :class:`numpy.ndarray`):\n                Reference orientations to calculate bonds.\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the bonding.\n            orientations ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Orientations to calculate the bonding.\n            mode (str, optional):\n                Mode to calculate bond order. Options are :code:`'bod'`,\n                :code:`'lbod'`, :code:`'obcd'`, or :code:`'oocd'`\n                (Default value = :code:`'bod'`).\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                NeighborList to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_13compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_ref_points = 0;
  PyObject *__pyx_v_ref_orientations = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_orientations = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_ref_points,&__pyx_n_s_ref_orientations,&__pyx_n_s_points,&__pyx_n_s_orientations,&__pyx_n_s_mode,&__pyx_n_s_nlist,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = ((PyObject *)__pyx_n_s_bod);

    /* "freud/environment.pxi":226
 * 
 *     def compute(self, box, ref_points, ref_orientations, points, orientations,
 *                 mode="bod", nlist=None):             # <<<<<<<<<<<<<<
 *         """Calculates the bond order histogram. Will overwrite the current
 *         histogram.
 */
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ref_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute", 0, 5, 7, 1); __PYX_ERR(1, 225, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ref_orientations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute", 0, 5, 7, 2); __PYX_ERR(1, 225, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute", 0, 5, 7, 3); __PYX_ERR(1, 225, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orientations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute", 0, 5, 7, 4); __PYX_ERR(1, 225, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute") < 0)) __PYX_ERR(1, 225, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_ref_points = values[1];
    __pyx_v_ref_orientations = values[2];
    __pyx_v_points = values[3];
    __pyx_v_orientations = values[4];
    __pyx_v_mode = values[5];
    __pyx_v_nlist = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 225, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.BondOrder.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_12compute(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self), __pyx_v_box, __pyx_v_ref_points, __pyx_v_ref_orientations, __pyx_v_points, __pyx_v_orientations, __pyx_v_mode, __pyx_v_nlist);

  /* "freud/environment.pxi":225
 *         self.thisptr.reset()
 * 
 *     def compute(self, box, ref_points, ref_orientations, points, orientations,             # <<<<<<<<<<<<<<
 *                 mode="bod", nlist=None):
 *         """Calculates the bond order histogram. Will overwrite the current
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_12compute(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_ref_points, PyObject *__pyx_v_ref_orientations, PyObject *__pyx_v_points, PyObject *__pyx_v_orientations, PyObject *__pyx_v_mode, PyObject *__pyx_v_nlist) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("compute", 0);

  /* "freud/environment.pxi":249
 *                 NeighborList to use to find bonds (Default value = None).
 *         """
 *         self.thisptr.reset()             # <<<<<<<<<<<<<<
 *         self.accumulate(box, ref_points, ref_orientations,
 *                         points, orientations, mode, nlist)
 */
  __pyx_v_self->thisptr->reset();

  /* "freud/environment.pxi":250
 *         """
 *         self.thisptr.reset()
 *         self.accumulate(box, ref_points, ref_orientations,             # <<<<<<<<<<<<<<
 *                         points, orientations, mode, nlist)
 *         return self
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_accumulate); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "freud/environment.pxi":251
 *         self.thisptr.reset()
 *         self.accumulate(box, ref_points, ref_orientations,
 *                         points, orientations, mode, nlist)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_box, __pyx_v_ref_points, __pyx_v_ref_orientations, __pyx_v_points, __pyx_v_orientations, __pyx_v_mode, __pyx_v_nlist};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_box, __pyx_v_ref_points, __pyx_v_ref_orientations, __pyx_v_points, __pyx_v_orientations, __pyx_v_mode, __pyx_v_nlist};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_box);
    __Pyx_GIVEREF(__pyx_v_box);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_box);
    __Pyx_INCREF(__pyx_v_ref_points);
    __Pyx_GIVEREF(__pyx_v_ref_points);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_ref_points);
    __Pyx_INCREF(__pyx_v_ref_orientations);
    __Pyx_GIVEREF(__pyx_v_ref_orientations);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_ref_orientations);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_orientations);
    __Pyx_GIVEREF(__pyx_v_orientations);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_v_orientations);
    __Pyx_INCREF(__pyx_v_mode);
    __Pyx_GIVEREF(__pyx_v_mode);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_4, __pyx_v_mode);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_4, __pyx_v_nlist);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":252
 *         self.accumulate(box, ref_points, ref_orientations,
 *                         points, orientations, mode, nlist)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def reduceBondOrder(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/environment.pxi":225
 *         self.thisptr.reset()
 * 
 *     def compute(self, box, ref_points, ref_orientations, points, orientations,             # <<<<<<<<<<<<<<
 *                 mode="bod", nlist=None):
 *         """Calculates the bond order histogram. Will overwrite the current
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.BondOrder.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":254
 *         return self
 * 
 *     def reduceBondOrder(self):             # <<<<<<<<<<<<<<
 *         """Reduces the histogram in the values over N processors to a single
 *         histogram. This is called automatically by
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_15reduceBondOrder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_14reduceBondOrder[] = "BondOrder.reduceBondOrder(self)\nReduces the histogram in the values over N processors to a single\n        histogram. This is called automatically by\n        :py:meth:`freud.environment.BondOrder.getBondOrder()`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_15reduceBondOrder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reduceBondOrder (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_14reduceBondOrder(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_14reduceBondOrder(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reduceBondOrder", 0);

  /* "freud/environment.pxi":259
 *         :py:meth:`freud.environment.BondOrder.getBondOrder()`.
 *         """
 *         self.thisptr.reduceBondOrder()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->thisptr->reduceBondOrder();

  /* "freud/environment.pxi":254
 *         return self
 * 
 *     def reduceBondOrder(self):             # <<<<<<<<<<<<<<
 *         """Reduces the histogram in the values over N processors to a single
 *         histogram. This is called automatically by
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":262
 * 
 *     @property
 *     def theta(self):             # <<<<<<<<<<<<<<
 *         return self.getTheta()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_5theta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_5theta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_5theta___get__(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_5theta___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":263
 *     @property
 *     def theta(self):
 *         return self.getTheta()             # <<<<<<<<<<<<<<
 * 
 *     def getTheta(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getTheta); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 263, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":262
 * 
 *     @property
 *     def theta(self):             # <<<<<<<<<<<<<<
 *         return self.getTheta()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.BondOrder.theta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":265
 *         return self.getTheta()
 * 
 *     def getTheta(self):             # <<<<<<<<<<<<<<
 *         """Get :math:`\\theta`.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_17getTheta(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_16getTheta[] = "BondOrder.getTheta(self)\nGet :math:`\\theta`.\n\n        Returns:\n            :math:`\\left(N_{\\theta} \\right)` :class:`numpy.ndarray`:\n                Values of bin centers for :math:`\\theta`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_17getTheta(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTheta (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_16getTheta(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_16getTheta(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  float *__pyx_v_theta;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getTheta", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/environment.pxi":272
 *                 Values of bin centers for :math:`\\theta`.
 *         """
 *         cdef float * theta = self.thisptr.getTheta().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNBinsTheta()
 */
  __pyx_v_theta = __pyx_v_self->thisptr->getTheta().get();

  /* "freud/environment.pxi":274
 *         cdef float * theta = self.thisptr.getTheta().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNBinsTheta()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNBinsTheta());

  /* "freud/environment.pxi":276
 *         nbins[0] = <np.npy_intp> self.thisptr.getNBinsTheta()
 *         cdef np.ndarray[np.float32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> theta)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_theta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 276, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 275, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":278
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32,
 *                                          <void*> theta)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/environment.pxi":265
 *         return self.getTheta()
 * 
 *     def getTheta(self):             # <<<<<<<<<<<<<<
 *         """Get :math:`\\theta`.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.BondOrder.getTheta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":281
 * 
 *     @property
 *     def phi(self):             # <<<<<<<<<<<<<<
 *         return self.getPhi()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_3phi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_3phi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_3phi___get__(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_3phi___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":282
 *     @property
 *     def phi(self):
 *         return self.getPhi()             # <<<<<<<<<<<<<<
 * 
 *     def getPhi(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPhi); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 282, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":281
 * 
 *     @property
 *     def phi(self):             # <<<<<<<<<<<<<<
 *         return self.getPhi()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.BondOrder.phi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":284
 *         return self.getPhi()
 * 
 *     def getPhi(self):             # <<<<<<<<<<<<<<
 *         """Get :math:`\\phi`.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_19getPhi(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_18getPhi[] = "BondOrder.getPhi(self)\nGet :math:`\\phi`.\n\n        Returns:\n            :math:`\\left(N_{\\phi} \\right)` :class:`numpy.ndarray`:\n                Values of bin centers for :math:`\\phi`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_19getPhi(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPhi (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_18getPhi(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_18getPhi(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  float *__pyx_v_phi;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getPhi", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/environment.pxi":291
 *                 Values of bin centers for :math:`\\phi`.
 *         """
 *         cdef float * phi = self.thisptr.getPhi().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNBinsPhi()
 */
  __pyx_v_phi = __pyx_v_self->thisptr->getPhi().get();

  /* "freud/environment.pxi":293
 *         cdef float * phi = self.thisptr.getPhi().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNBinsPhi()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> phi)
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNBinsPhi());

  /* "freud/environment.pxi":295
 *         nbins[0] = <np.npy_intp> self.thisptr.getNBinsPhi()
 *         cdef np.ndarray[np.float32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> phi)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_phi)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 295, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 294, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":296
 *         cdef np.ndarray[np.float32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32, <void*> phi)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/environment.pxi":284
 *         return self.getPhi()
 * 
 *     def getPhi(self):             # <<<<<<<<<<<<<<
 *         """Get :math:`\\phi`.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.BondOrder.getPhi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":299
 * 
 *     @property
 *     def n_bins_theta(self):             # <<<<<<<<<<<<<<
 *         return self.getNBinsTheta()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_12n_bins_theta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_12n_bins_theta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_12n_bins_theta___get__(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_12n_bins_theta___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":300
 *     @property
 *     def n_bins_theta(self):
 *         return self.getNBinsTheta()             # <<<<<<<<<<<<<<
 * 
 *     def getNBinsTheta(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNBinsTheta); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 300, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 300, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":299
 * 
 *     @property
 *     def n_bins_theta(self):             # <<<<<<<<<<<<<<
 *         return self.getNBinsTheta()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.BondOrder.n_bins_theta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":302
 *         return self.getNBinsTheta()
 * 
 *     def getNBinsTheta(self):             # <<<<<<<<<<<<<<
 *         """Get the number of bins in the :math:`\\theta`-dimension of histogram.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_21getNBinsTheta(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_20getNBinsTheta[] = "BondOrder.getNBinsTheta(self)\nGet the number of bins in the :math:`\\theta`-dimension of histogram.\n\n        Returns:\n            unsigned int: :math:`N_{\\theta}`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_21getNBinsTheta(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNBinsTheta (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_20getNBinsTheta(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_20getNBinsTheta(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  unsigned int __pyx_v_nt;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNBinsTheta", 0);

  /* "freud/environment.pxi":308
 *             unsigned int: :math:`N_{\\theta}`.
 *         """
 *         cdef unsigned int nt = self.thisptr.getNBinsTheta()             # <<<<<<<<<<<<<<
 *         return nt
 * 
 */
  __pyx_v_nt = __pyx_v_self->thisptr->getNBinsTheta();

  /* "freud/environment.pxi":309
 *         """
 *         cdef unsigned int nt = self.thisptr.getNBinsTheta()
 *         return nt             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nt); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":302
 *         return self.getNBinsTheta()
 * 
 *     def getNBinsTheta(self):             # <<<<<<<<<<<<<<
 *         """Get the number of bins in the :math:`\\theta`-dimension of histogram.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.BondOrder.getNBinsTheta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":312
 * 
 *     @property
 *     def n_bins_phi(self):             # <<<<<<<<<<<<<<
 *         return self.getNBinsPhi()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_10n_bins_phi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_10n_bins_phi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_10n_bins_phi___get__(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_10n_bins_phi___get__(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":313
 *     @property
 *     def n_bins_phi(self):
 *         return self.getNBinsPhi()             # <<<<<<<<<<<<<<
 * 
 *     def getNBinsPhi(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNBinsPhi); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 313, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":312
 * 
 *     @property
 *     def n_bins_phi(self):             # <<<<<<<<<<<<<<
 *         return self.getNBinsPhi()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.BondOrder.n_bins_phi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":315
 *         return self.getNBinsPhi()
 * 
 *     def getNBinsPhi(self):             # <<<<<<<<<<<<<<
 *         """Get the number of bins in the :math:`\\phi`-dimension of histogram.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_23getNBinsPhi(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_22getNBinsPhi[] = "BondOrder.getNBinsPhi(self)\nGet the number of bins in the :math:`\\phi`-dimension of histogram.\n\n        Returns:\n            unsigned int: :math:`N_{\\phi}`\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_23getNBinsPhi(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNBinsPhi (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_22getNBinsPhi(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_22getNBinsPhi(struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  unsigned int __pyx_v_np;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNBinsPhi", 0);

  /* "freud/environment.pxi":321
 *             unsigned int: :math:`N_{\\phi}`
 *         """
 *         cdef unsigned int np = self.thisptr.getNBinsPhi()             # <<<<<<<<<<<<<<
 *         return np
 * 
 */
  __pyx_v_np = __pyx_v_self->thisptr->getNBinsPhi();

  /* "freud/environment.pxi":322
 *         """
 *         cdef unsigned int np = self.thisptr.getNBinsPhi()
 *         return np             # <<<<<<<<<<<<<<
 * 
 * cdef class LocalDescriptors:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":315
 *         return self.getNBinsPhi()
 * 
 *     def getNBinsPhi(self):             # <<<<<<<<<<<<<<
 *         """Get the number of bins in the :math:`\\phi`-dimension of histogram.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.BondOrder.getNBinsPhi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_24__reduce_cython__[] = "BondOrder.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_24__reduce_cython__(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.BondOrder.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_9BondOrder_26__setstate_cython__[] = "BondOrder.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_9BondOrder_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9BondOrder_26__setstate_cython__(((struct __pyx_obj_5freud_6_freud_BondOrder *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9BondOrder_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_BondOrder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.BondOrder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":369
 *                    'particle_local': environment.ParticleLocal}
 * 
 *     def __cinit__(self, num_neighbors, lmax, rmax, negative_m=True):             # <<<<<<<<<<<<<<
 *         self.thisptr = new environment.LocalDescriptors(
 *             num_neighbors, lmax, rmax, negative_m)
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_16LocalDescriptors_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_16LocalDescriptors_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_num_neighbors = 0;
  PyObject *__pyx_v_lmax = 0;
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_negative_m = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num_neighbors,&__pyx_n_s_lmax,&__pyx_n_s_rmax,&__pyx_n_s_negative_m,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_neighbors)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(1, 369, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(1, 369, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_negative_m);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 369, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_num_neighbors = values[0];
    __pyx_v_lmax = values[1];
    __pyx_v_rmax = values[2];
    __pyx_v_negative_m = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 369, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors___cinit__(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self), __pyx_v_num_neighbors, __pyx_v_lmax, __pyx_v_rmax, __pyx_v_negative_m);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_16LocalDescriptors___cinit__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self, PyObject *__pyx_v_num_neighbors, PyObject *__pyx_v_lmax, PyObject *__pyx_v_rmax, PyObject *__pyx_v_negative_m) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  unsigned int __pyx_t_2;
  float __pyx_t_3;
  bool __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "freud/environment.pxi":371
 *     def __cinit__(self, num_neighbors, lmax, rmax, negative_m=True):
 *         self.thisptr = new environment.LocalDescriptors(
 *             num_neighbors, lmax, rmax, negative_m)             # <<<<<<<<<<<<<<
 *         self.num_neigh = num_neighbors
 *         self.rmax = rmax
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_neighbors); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 371, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_lmax); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 371, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_rmax); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 371, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_negative_m); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 371, __pyx_L1_error)

  /* "freud/environment.pxi":370
 * 
 *     def __cinit__(self, num_neighbors, lmax, rmax, negative_m=True):
 *         self.thisptr = new environment.LocalDescriptors(             # <<<<<<<<<<<<<<
 *             num_neighbors, lmax, rmax, negative_m)
 *         self.num_neigh = num_neighbors
 */
  __pyx_v_self->thisptr = new freud::environment::LocalDescriptors(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "freud/environment.pxi":372
 *         self.thisptr = new environment.LocalDescriptors(
 *             num_neighbors, lmax, rmax, negative_m)
 *         self.num_neigh = num_neighbors             # <<<<<<<<<<<<<<
 *         self.rmax = rmax
 * 
 */
  __Pyx_INCREF(__pyx_v_num_neighbors);
  __Pyx_GIVEREF(__pyx_v_num_neighbors);
  __Pyx_GOTREF(__pyx_v_self->num_neigh);
  __Pyx_DECREF(__pyx_v_self->num_neigh);
  __pyx_v_self->num_neigh = __pyx_v_num_neighbors;

  /* "freud/environment.pxi":373
 *             num_neighbors, lmax, rmax, negative_m)
 *         self.num_neigh = num_neighbors
 *         self.rmax = rmax             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(__pyx_v_rmax);
  __Pyx_GIVEREF(__pyx_v_rmax);
  __Pyx_GOTREF(__pyx_v_self->rmax);
  __Pyx_DECREF(__pyx_v_self->rmax);
  __pyx_v_self->rmax = __pyx_v_rmax;

  /* "freud/environment.pxi":369
 *                    'particle_local': environment.ParticleLocal}
 * 
 *     def __cinit__(self, num_neighbors, lmax, rmax, negative_m=True):             # <<<<<<<<<<<<<<
 *         self.thisptr = new environment.LocalDescriptors(
 *             num_neighbors, lmax, rmax, negative_m)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":375
 *         self.rmax = rmax
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_16LocalDescriptors_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_16LocalDescriptors_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_16LocalDescriptors_2__dealloc__(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_16LocalDescriptors_2__dealloc__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/environment.pxi":376
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def computeNList(self, box, points_ref, points=None):
 */
  delete __pyx_v_self->thisptr;

  /* "freud/environment.pxi":375
 *         self.rmax = rmax
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/environment.pxi":378
 *         del self.thisptr
 * 
 *     def computeNList(self, box, points_ref, points=None):             # <<<<<<<<<<<<<<
 *         """Compute the neighbor list for bonds from a set of source points to
 *         a set of destination points.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_5computeNList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_16LocalDescriptors_4computeNList[] = "LocalDescriptors.computeNList(self, box, points_ref, points=None)\nCompute the neighbor list for bonds from a set of source points to\n        a set of destination points.\n\n        Args:\n            box (:class:`freud.box.Box`):\n                Simulation box.\n            points_ref ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Source points to calculate the order parameter.\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`,             optional):\n                Destination points to calculate the order parameter\n                (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_5computeNList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_points_ref = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeNList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_points_ref,&__pyx_n_s_points,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("computeNList", 0, 2, 3, 1); __PYX_ERR(1, 378, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeNList") < 0)) __PYX_ERR(1, 378, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_points_ref = values[1];
    __pyx_v_points = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeNList", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 378, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.computeNList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_4computeNList(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self), __pyx_v_box, __pyx_v_points_ref, __pyx_v_points);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_4computeNList(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_points_ref, PyObject *__pyx_v_points) {
  freud::box::Box __pyx_v_l_box;
  PyArrayObject *__pyx_v_l_points_ref = 0;
  unsigned int __pyx_v_nRef;
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points_ref;
  __Pyx_Buffer __pyx_pybuffer_l_points_ref;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  bool __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  unsigned int __pyx_t_15;
  __Pyx_RefNannySetupContext("computeNList", 0);
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_INCREF(__pyx_v_points_ref);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_pybuffer_l_points_ref.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points_ref.refcount = 0;
  __pyx_pybuffernd_l_points_ref.data = NULL;
  __pyx_pybuffernd_l_points_ref.rcbuffer = &__pyx_pybuffer_l_points_ref;
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/environment.pxi":392
 *                 (Default value = None).
 *         """
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 392, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 392, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":394
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         points_ref = freud.common.convert_array(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 394, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 394, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 394, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 394, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 394, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 394, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 394, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 394, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":395
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *         points_ref = freud.common.convert_array(
 *             points_ref, 2, dtype=np.float32, contiguous=True,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 395, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 395, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 395, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 395, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 395, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 395, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":393
 *         """
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);

  /* "freud/environment.pxi":396
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         points_ref = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points_ref, 2, dtype=np.float32, contiguous=True,
 *             array_name="points_ref")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":397
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         points_ref = freud.common.convert_array(
 *             points_ref, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="points_ref")
 *         if points_ref.shape[1] != 3:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points_ref);
  __Pyx_GIVEREF(__pyx_v_points_ref);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points_ref);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_12) < 0) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 397, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_array_name, __pyx_n_s_points_ref) < 0) __PYX_ERR(1, 397, __pyx_L1_error)

  /* "freud/environment.pxi":396
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         points_ref = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points_ref, 2, dtype=np.float32, contiguous=True,
 *             array_name="points_ref")
 */
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_points_ref, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "freud/environment.pxi":399
 *             points_ref, 2, dtype=np.float32, contiguous=True,
 *             array_name="points_ref")
 *         if points_ref.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points_ref should be an Nx3 array')
 * 
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_points_ref, __pyx_n_s_shape); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_12, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyObject_RichCompare(__pyx_t_4, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(__pyx_t_13)) {

    /* "freud/environment.pxi":400
 *             array_name="points_ref")
 *         if points_ref.shape[1] != 3:
 *             raise TypeError('points_ref should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         if points is None:
 */
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_Raise(__pyx_t_12, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __PYX_ERR(1, 400, __pyx_L1_error)

    /* "freud/environment.pxi":399
 *             points_ref, 2, dtype=np.float32, contiguous=True,
 *             array_name="points_ref")
 *         if points_ref.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points_ref should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":402
 *             raise TypeError('points_ref should be an Nx3 array')
 * 
 *         if points is None:             # <<<<<<<<<<<<<<
 *             points = points_ref
 * 
 */
  __pyx_t_13 = (__pyx_v_points == Py_None);
  __pyx_t_14 = (__pyx_t_13 != 0);
  if (__pyx_t_14) {

    /* "freud/environment.pxi":403
 * 
 *         if points is None:
 *             points = points_ref             # <<<<<<<<<<<<<<
 * 
 *         points = freud.common.convert_array(
 */
    __Pyx_INCREF(__pyx_v_points_ref);
    __Pyx_DECREF_SET(__pyx_v_points, __pyx_v_points_ref);

    /* "freud/environment.pxi":402
 *             raise TypeError('points_ref should be an Nx3 array')
 * 
 *         if points is None:             # <<<<<<<<<<<<<<
 *             points = points_ref
 * 
 */
  }

  /* "freud/environment.pxi":405
 *             points = points_ref
 * 
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_common); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/environment.pxi":406
 * 
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(1, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 406, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(1, 406, __pyx_L1_error)

  /* "freud/environment.pxi":405
 *             points = points_ref
 * 
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/environment.pxi":407
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(1, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_14)) {

    /* "freud/environment.pxi":408
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points_ref = points_ref
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 408, __pyx_L1_error)

    /* "freud/environment.pxi":407
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":410
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_points_ref = points_ref             # <<<<<<<<<<<<<<
 *         cdef unsigned int nRef = <unsigned int> points_ref.shape[0]
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  if (!(likely(((__pyx_v_points_ref) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points_ref, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 410, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_points_ref;
  __Pyx_INCREF(__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_3), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points_ref = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 410, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points_ref.diminfo[0].strides = __pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points_ref.diminfo[0].shape = __pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points_ref.diminfo[1].strides = __pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points_ref.diminfo[1].shape = __pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points_ref = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/environment.pxi":411
 * 
 *         cdef np.ndarray[float, ndim=2] l_points_ref = points_ref
 *         cdef unsigned int nRef = <unsigned int> points_ref.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_points_ref, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_15 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_15 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_nRef = ((unsigned int)__pyx_t_15);

  /* "freud/environment.pxi":412
 *         cdef np.ndarray[float, ndim=2] l_points_ref = points_ref
 *         cdef unsigned int nRef = <unsigned int> points_ref.shape[0]
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         with nogil:
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 412, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 412, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "freud/environment.pxi":413
 *         cdef unsigned int nRef = <unsigned int> points_ref.shape[0]
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.computeNList(l_box, <vec3[float]*> l_points_ref.data,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_15 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_15 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_15);

  /* "freud/environment.pxi":414
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeNList(l_box, <vec3[float]*> l_points_ref.data,
 *                                       nRef, <vec3[float]*> l_points.data, nP)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/environment.pxi":415
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         with nogil:
 *             self.thisptr.computeNList(l_box, <vec3[float]*> l_points_ref.data,             # <<<<<<<<<<<<<<
 *                                       nRef, <vec3[float]*> l_points.data, nP)
 *         return self
 */
        try {
          __pyx_v_self->thisptr->computeNList(__pyx_v_l_box, ((vec3<float>  *)__pyx_v_l_points_ref->data), __pyx_v_nRef, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 415, __pyx_L7_error)
        }
      }

      /* "freud/environment.pxi":414
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeNList(l_box, <vec3[float]*> l_points_ref.data,
 *                                       nRef, <vec3[float]*> l_points.data, nP)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L7_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L8:;
      }
  }

  /* "freud/environment.pxi":417
 *             self.thisptr.computeNList(l_box, <vec3[float]*> l_points_ref.data,
 *                                       nRef, <vec3[float]*> l_points.data, nP)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, box, unsigned int num_neighbors, points_ref, points=None,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/environment.pxi":378
 *         del self.thisptr
 * 
 *     def computeNList(self, box, points_ref, points=None):             # <<<<<<<<<<<<<<
 *         """Compute the neighbor list for bonds from a set of source points to
 *         a set of destination points.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.computeNList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points_ref);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XDECREF(__pyx_v_points_ref);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":419
 *         return self
 * 
 *     def compute(self, box, unsigned int num_neighbors, points_ref, points=None,             # <<<<<<<<<<<<<<
 *                 orientations=None, mode='neighborhood', nlist=None):
 *         """Calculates the local descriptors of bonds from a set of source
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_7compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_16LocalDescriptors_6compute[] = "LocalDescriptors.compute(self, box, unsigned int num_neighbors, points_ref, points=None, orientations=None, mode='neighborhood', nlist=None)\nCalculates the local descriptors of bonds from a set of source\n        points to a set of destination points.\n\n        Args:\n            box (:class:`freud.box.Box`):\n                Simulation box.\n            num_neighbors (unsigned int):\n                Number of neighbors to compute with or to limit to, if the\n                neighbor list is precomputed.\n            points_ref ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Source points to calculate the order parameter.\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`,             optional):\n                Destination points to calculate the order parameter\n                (Default value = None).\n            orientations ((:math:`N_{particles}`, 4) :class:`numpy.ndarray`,             optional):\n                Orientation of each reference point (Default value = None).\n            mode (str, optional):\n                Orientation mode to use for environments, either\n                :code:`'neighborhood'` to use the orientation of the local\n                neighborhood, :code:`'particle_local'` to use the given\n                particle orientations, or :code:`'global'` to not rotate\n                environments (Default value = :code:`'neighborhood'`).\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds or :code:`'precomputed'` if\n                using :py:meth:`~.computeNList` (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_7compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  unsigned int __pyx_v_num_neighbors;
  PyObject *__pyx_v_points_ref = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_orientations = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_num_neighbors,&__pyx_n_s_points_ref,&__pyx_n_s_points,&__pyx_n_s_orientations,&__pyx_n_s_mode,&__pyx_n_s_nlist,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);

    /* "freud/environment.pxi":420
 * 
 *     def compute(self, box, unsigned int num_neighbors, points_ref, points=None,
 *                 orientations=None, mode='neighborhood', nlist=None):             # <<<<<<<<<<<<<<
 *         """Calculates the local descriptors of bonds from a set of source
 *         points to a set of destination points.
 */
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)__pyx_n_s_neighborhood);
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_neighbors)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute", 0, 3, 7, 1); __PYX_ERR(1, 419, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute", 0, 3, 7, 2); __PYX_ERR(1, 419, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orientations);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute") < 0)) __PYX_ERR(1, 419, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_num_neighbors = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_num_neighbors == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 419, __pyx_L3_error)
    __pyx_v_points_ref = values[2];
    __pyx_v_points = values[3];
    __pyx_v_orientations = values[4];
    __pyx_v_mode = values[5];
    __pyx_v_nlist = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute", 0, 3, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 419, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_6compute(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self), __pyx_v_box, __pyx_v_num_neighbors, __pyx_v_points_ref, __pyx_v_points, __pyx_v_orientations, __pyx_v_mode, __pyx_v_nlist);

  /* "freud/environment.pxi":419
 *         return self
 * 
 *     def compute(self, box, unsigned int num_neighbors, points_ref, points=None,             # <<<<<<<<<<<<<<
 *                 orientations=None, mode='neighborhood', nlist=None):
 *         """Calculates the local descriptors of bonds from a set of source
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_6compute(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self, PyObject *__pyx_v_box, unsigned int __pyx_v_num_neighbors, PyObject *__pyx_v_points_ref, PyObject *__pyx_v_points, PyObject *__pyx_v_orientations, PyObject *__pyx_v_mode, PyObject *__pyx_v_nlist) {
  freud::box::Box __pyx_v_l_box;
  PyArrayObject *__pyx_v_l_orientations = 0;
  PyArrayObject *__pyx_v_l_points_ref = 0;
  unsigned int __pyx_v_nRef;
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  freud::environment::LocalDescriptorOrientation __pyx_v_l_mode;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_orientations;
  __Pyx_Buffer __pyx_pybuffer_l_orientations;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points_ref;
  __Pyx_Buffer __pyx_pybuffer_l_points_ref;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  bool __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  unsigned int __pyx_t_19;
  freud::environment::LocalDescriptorOrientation __pyx_t_20;
  __Pyx_RefNannySetupContext("compute", 0);
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_INCREF(__pyx_v_points_ref);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_INCREF(__pyx_v_orientations);
  __pyx_pybuffer_l_orientations.pybuffer.buf = NULL;
  __pyx_pybuffer_l_orientations.refcount = 0;
  __pyx_pybuffernd_l_orientations.data = NULL;
  __pyx_pybuffernd_l_orientations.rcbuffer = &__pyx_pybuffer_l_orientations;
  __pyx_pybuffer_l_points_ref.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points_ref.refcount = 0;
  __pyx_pybuffernd_l_points_ref.data = NULL;
  __pyx_pybuffernd_l_points_ref.rcbuffer = &__pyx_pybuffer_l_points_ref;
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/environment.pxi":449
 *                 using :py:meth:`~.computeNList` (Default value = None).
 *         """
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 449, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 449, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":451
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         if mode not in self.known_modes:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 451, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 451, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 451, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 451, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":452
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *         if mode not in self.known_modes:
 *             raise RuntimeError(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 452, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 452, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 452, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 452, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 452, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 452, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":450
 *         """
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);

  /* "freud/environment.pxi":453
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         if mode not in self.known_modes:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'Unknown LocalDescriptors orientation mode: {}'.format(mode))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_known_modes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_v_mode, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(1, 453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_13 = (__pyx_t_12 != 0);
  if (unlikely(__pyx_t_13)) {

    /* "freud/environment.pxi":455
 *         if mode not in self.known_modes:
 *             raise RuntimeError(
 *                 'Unknown LocalDescriptors orientation mode: {}'.format(mode))             # <<<<<<<<<<<<<<
 * 
 *         points_ref = freud.common.convert_array(
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_LocalDescriptors_orienta, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_mode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_mode};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 455, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_mode};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 455, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 455, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_mode);
        __Pyx_GIVEREF(__pyx_v_mode);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_mode);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 455, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "freud/environment.pxi":454
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         if mode not in self.known_modes:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'Unknown LocalDescriptors orientation mode: {}'.format(mode))
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 454, __pyx_L1_error)

    /* "freud/environment.pxi":453
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         if mode not in self.known_modes:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'Unknown LocalDescriptors orientation mode: {}'.format(mode))
 */
  }

  /* "freud/environment.pxi":457
 *                 'Unknown LocalDescriptors orientation mode: {}'.format(mode))
 * 
 *         points_ref = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points_ref, 2, dtype=np.float32, contiguous=True,
 *             array_name="points_ref")
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":458
 * 
 *         points_ref = freud.common.convert_array(
 *             points_ref, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="points_ref")
 *         if points_ref.shape[1] != 3:
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_points_ref);
  __Pyx_GIVEREF(__pyx_v_points_ref);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_points_ref);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_14) < 0) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 458, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_points_ref) < 0) __PYX_ERR(1, 458, __pyx_L1_error)

  /* "freud/environment.pxi":457
 *                 'Unknown LocalDescriptors orientation mode: {}'.format(mode))
 * 
 *         points_ref = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points_ref, 2, dtype=np.float32, contiguous=True,
 *             array_name="points_ref")
 */
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points_ref, __pyx_t_14);
  __pyx_t_14 = 0;

  /* "freud/environment.pxi":460
 *             points_ref, 2, dtype=np.float32, contiguous=True,
 *             array_name="points_ref")
 *         if points_ref.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points_ref should be an Nx3 array')
 * 
 */
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_points_ref, __pyx_n_s_shape); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_14, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(1, 460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (unlikely(__pyx_t_13)) {

    /* "freud/environment.pxi":461
 *             array_name="points_ref")
 *         if points_ref.shape[1] != 3:
 *             raise TypeError('points_ref should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         if points is None:
 */
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_Raise(__pyx_t_14, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __PYX_ERR(1, 461, __pyx_L1_error)

    /* "freud/environment.pxi":460
 *             points_ref, 2, dtype=np.float32, contiguous=True,
 *             array_name="points_ref")
 *         if points_ref.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points_ref should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":463
 *             raise TypeError('points_ref should be an Nx3 array')
 * 
 *         if points is None:             # <<<<<<<<<<<<<<
 *             points = points_ref
 * 
 */
  __pyx_t_13 = (__pyx_v_points == Py_None);
  __pyx_t_12 = (__pyx_t_13 != 0);
  if (__pyx_t_12) {

    /* "freud/environment.pxi":464
 * 
 *         if points is None:
 *             points = points_ref             # <<<<<<<<<<<<<<
 * 
 *         points = freud.common.convert_array(
 */
    __Pyx_INCREF(__pyx_v_points_ref);
    __Pyx_DECREF_SET(__pyx_v_points, __pyx_v_points_ref);

    /* "freud/environment.pxi":463
 *             raise TypeError('points_ref should be an Nx3 array')
 * 
 *         if points is None:             # <<<<<<<<<<<<<<
 *             points = points_ref
 * 
 */
  }

  /* "freud/environment.pxi":466
 *             points = points_ref
 * 
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":467
 * 
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 467, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(1, 467, __pyx_L1_error)

  /* "freud/environment.pxi":466
 *             points = points_ref
 * 
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":468
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(1, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_12)) {

    /* "freud/environment.pxi":469
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 469, __pyx_L1_error)

    /* "freud/environment.pxi":468
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":471
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations             # <<<<<<<<<<<<<<
 *         if mode == 'particle_local':
 *             if orientations is None:
 */
  if (!(likely(((__pyx_v_orientations) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_orientations, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 471, __pyx_L1_error)
  __pyx_t_4 = __pyx_v_orientations;
  __Pyx_INCREF(__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_4), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_orientations = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 471, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_orientations.diminfo[0].strides = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_orientations.diminfo[0].shape = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_orientations.diminfo[1].strides = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_orientations.diminfo[1].shape = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_orientations = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":472
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 *         if mode == 'particle_local':             # <<<<<<<<<<<<<<
 *             if orientations is None:
 *                 raise RuntimeError(
 */
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_particle_local, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(1, 472, __pyx_L1_error)
  if (__pyx_t_12) {

    /* "freud/environment.pxi":473
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 *         if mode == 'particle_local':
 *             if orientations is None:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(
 *                     ('Orientations must be given to orient LocalDescriptors '
 */
    __pyx_t_12 = (__pyx_v_orientations == Py_None);
    __pyx_t_13 = (__pyx_t_12 != 0);
    if (unlikely(__pyx_t_13)) {

      /* "freud/environment.pxi":474
 *         if mode == 'particle_local':
 *             if orientations is None:
 *                 raise RuntimeError(             # <<<<<<<<<<<<<<
 *                     ('Orientations must be given to orient LocalDescriptors '
 *                         'with particles\' orientations'))
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 474, __pyx_L1_error)

      /* "freud/environment.pxi":473
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 *         if mode == 'particle_local':
 *             if orientations is None:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(
 *                     ('Orientations must be given to orient LocalDescriptors '
 */
    }

    /* "freud/environment.pxi":478
 *                         'with particles\' orientations'))
 * 
 *             orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *                 orientations, 2, dtype=np.float32, contiguous=True,
 *                 array_name="orientations")
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_common); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "freud/environment.pxi":479
 * 
 *             orientations = freud.common.convert_array(
 *                 orientations, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *                 array_name="orientations")
 *             if orientations.shape[1] != 4:
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_orientations);
    __Pyx_GIVEREF(__pyx_v_orientations);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_orientations);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_float32); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(1, 479, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 479, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_orientations) < 0) __PYX_ERR(1, 479, __pyx_L1_error)

    /* "freud/environment.pxi":478
 *                         'with particles\' orientations'))
 * 
 *             orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *                 orientations, 2, dtype=np.float32, contiguous=True,
 *                 array_name="orientations")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_orientations, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "freud/environment.pxi":481
 *                 orientations, 2, dtype=np.float32, contiguous=True,
 *                 array_name="orientations")
 *             if orientations.shape[1] != 4:             # <<<<<<<<<<<<<<
 *                 raise TypeError('orientations should be an Nx4 array')
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_orientations, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 481, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(1, 481, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_13)) {

      /* "freud/environment.pxi":482
 *                 array_name="orientations")
 *             if orientations.shape[1] != 4:
 *                 raise TypeError('orientations should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *             if orientations.shape[0] != points_ref.shape[0]:
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 482, __pyx_L1_error)

      /* "freud/environment.pxi":481
 *                 orientations, 2, dtype=np.float32, contiguous=True,
 *                 array_name="orientations")
 *             if orientations.shape[1] != 4:             # <<<<<<<<<<<<<<
 *                 raise TypeError('orientations should be an Nx4 array')
 * 
 */
    }

    /* "freud/environment.pxi":484
 *                 raise TypeError('orientations should be an Nx4 array')
 * 
 *             if orientations.shape[0] != points_ref.shape[0]:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "orientations must have the same size as points_ref")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_orientations, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_points_ref, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(1, 484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_13)) {

      /* "freud/environment.pxi":485
 * 
 *             if orientations.shape[0] != points_ref.shape[0]:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "orientations must have the same size as points_ref")
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 485, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 485, __pyx_L1_error)

      /* "freud/environment.pxi":484
 *                 raise TypeError('orientations should be an Nx4 array')
 * 
 *             if orientations.shape[0] != points_ref.shape[0]:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "orientations must have the same size as points_ref")
 */
    }

    /* "freud/environment.pxi":488
 *                     "orientations must have the same size as points_ref")
 * 
 *             l_orientations = orientations             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points_ref = points_ref
 */
    if (!(likely(((__pyx_v_orientations) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_orientations, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 488, __pyx_L1_error)
    __pyx_t_2 = __pyx_v_orientations;
    __Pyx_INCREF(__pyx_t_2);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer);
      __pyx_t_15 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_15 < 0)) {
        PyErr_Fetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer, (PyObject*)__pyx_v_l_orientations, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_18);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
        }
        __pyx_t_16 = __pyx_t_17 = __pyx_t_18 = 0;
      }
      __pyx_pybuffernd_l_orientations.diminfo[0].strides = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_orientations.diminfo[0].shape = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_orientations.diminfo[1].strides = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_orientations.diminfo[1].shape = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(1, 488, __pyx_L1_error)
    }
    __Pyx_DECREF_SET(__pyx_v_l_orientations, ((PyArrayObject *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "freud/environment.pxi":472
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 *         if mode == 'particle_local':             # <<<<<<<<<<<<<<
 *             if orientations is None:
 *                 raise RuntimeError(
 */
  }

  /* "freud/environment.pxi":490
 *             l_orientations = orientations
 * 
 *         cdef np.ndarray[float, ndim=2] l_points_ref = points_ref             # <<<<<<<<<<<<<<
 *         cdef unsigned int nRef = <unsigned int> points_ref.shape[0]
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  if (!(likely(((__pyx_v_points_ref) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points_ref, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 490, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_points_ref;
  __Pyx_INCREF(__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points_ref = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 490, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points_ref.diminfo[0].strides = __pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points_ref.diminfo[0].shape = __pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points_ref.diminfo[1].strides = __pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points_ref.diminfo[1].shape = __pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points_ref = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "freud/environment.pxi":491
 * 
 *         cdef np.ndarray[float, ndim=2] l_points_ref = points_ref
 *         cdef unsigned int nRef = <unsigned int> points_ref.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_points_ref, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_19 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_19 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nRef = ((unsigned int)__pyx_t_19);

  /* "freud/environment.pxi":492
 *         cdef np.ndarray[float, ndim=2] l_points_ref = points_ref
 *         cdef unsigned int nRef = <unsigned int> points_ref.shape[0]
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         cdef environment.LocalDescriptorOrientation l_mode
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 492, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 492, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":493
 *         cdef unsigned int nRef = <unsigned int> points_ref.shape[0]
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 *         cdef environment.LocalDescriptorOrientation l_mode
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_19 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_19 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_19);

  /* "freud/environment.pxi":496
 *         cdef environment.LocalDescriptorOrientation l_mode
 * 
 *         l_mode = self.known_modes[mode]             # <<<<<<<<<<<<<<
 * 
 *         self.num_neigh = num_neighbors
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_known_modes); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_mode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_20 = ((freud::environment::LocalDescriptorOrientation)__Pyx_PyInt_As_freud_3a__3a_environment_3a__3a_LocalDescriptorOrientation(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_l_mode = __pyx_t_20;

  /* "freud/environment.pxi":498
 *         l_mode = self.known_modes[mode]
 * 
 *         self.num_neigh = num_neighbors             # <<<<<<<<<<<<<<
 * 
 *         cdef NeighborList nlist_
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_neighbors); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->num_neigh);
  __Pyx_DECREF(__pyx_v_self->num_neigh);
  __pyx_v_self->num_neigh = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":502
 *         cdef NeighborList nlist_
 *         cdef locality.NeighborList *nlist_ptr
 *         if nlist == 'precomputed':             # <<<<<<<<<<<<<<
 *             nlist_ptr = NULL
 *         else:
 */
  __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_nlist, __pyx_n_s_precomputed, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(1, 502, __pyx_L1_error)
  if (__pyx_t_13) {

    /* "freud/environment.pxi":503
 *         cdef locality.NeighborList *nlist_ptr
 *         if nlist == 'precomputed':
 *             nlist_ptr = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             defaulted_nlist = make_default_nlist_nn(
 */
    __pyx_v_nlist_ptr = NULL;

    /* "freud/environment.pxi":502
 *         cdef NeighborList nlist_
 *         cdef locality.NeighborList *nlist_ptr
 *         if nlist == 'precomputed':             # <<<<<<<<<<<<<<
 *             nlist_ptr = NULL
 *         else:
 */
    goto __pyx_L11;
  }

  /* "freud/environment.pxi":505
 *             nlist_ptr = NULL
 *         else:
 *             defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *                 box, points_ref, points, self.num_neigh, nlist,
 *                 True, self.rmax)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "freud/environment.pxi":507
 *             defaulted_nlist = make_default_nlist_nn(
 *                 box, points_ref, points, self.num_neigh, nlist,
 *                 True, self.rmax)             # <<<<<<<<<<<<<<
 *             nlist_ = defaulted_nlist[0]
 *             nlist_ptr = nlist_.get_ptr()
 */
    __pyx_t_3 = NULL;
    __pyx_t_15 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_15 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_box, __pyx_v_points_ref, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->rmax};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_15, 7+__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 505, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_box, __pyx_v_points_ref, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->rmax};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_15, 7+__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 505, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(7+__pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_15, __pyx_v_box);
      __Pyx_INCREF(__pyx_v_points_ref);
      __Pyx_GIVEREF(__pyx_v_points_ref);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_15, __pyx_v_points_ref);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_15, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_self->num_neigh);
      __Pyx_GIVEREF(__pyx_v_self->num_neigh);
      PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_15, __pyx_v_self->num_neigh);
      __Pyx_INCREF(__pyx_v_nlist);
      __Pyx_GIVEREF(__pyx_v_nlist);
      PyTuple_SET_ITEM(__pyx_t_4, 4+__pyx_t_15, __pyx_v_nlist);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_4, 5+__pyx_t_15, Py_True);
      __Pyx_INCREF(__pyx_v_self->rmax);
      __Pyx_GIVEREF(__pyx_v_self->rmax);
      PyTuple_SET_ITEM(__pyx_t_4, 6+__pyx_t_15, __pyx_v_self->rmax);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_defaulted_nlist = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "freud/environment.pxi":508
 *                 box, points_ref, points, self.num_neigh, nlist,
 *                 True, self.rmax)
 *             nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *             nlist_ptr = nlist_.get_ptr()
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(1, 508, __pyx_L1_error)
    __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "freud/environment.pxi":509
 *                 True, self.rmax)
 *             nlist_ = defaulted_nlist[0]
 *             nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);
  }
  __pyx_L11:;

  /* "freud/environment.pxi":511
 *             nlist_ptr = nlist_.get_ptr()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.compute(
 *                 l_box, nlist_ptr, num_neighbors,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/environment.pxi":512
 * 
 *         with nogil:
 *             self.thisptr.compute(             # <<<<<<<<<<<<<<
 *                 l_box, nlist_ptr, num_neighbors,
 *                 <vec3[float]*> l_points_ref.data,
 */
        try {
          __pyx_v_self->thisptr->compute(__pyx_v_l_box, __pyx_v_nlist_ptr, __pyx_v_num_neighbors, ((vec3<float>  *)__pyx_v_l_points_ref->data), __pyx_v_nRef, ((vec3<float>  *)__pyx_v_l_points->data), __pyx_v_nP, ((quat<float>  *)__pyx_v_l_orientations->data), __pyx_v_l_mode);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 512, __pyx_L13_error)
        }
      }

      /* "freud/environment.pxi":511
 *             nlist_ptr = nlist_.get_ptr()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.compute(
 *                 l_box, nlist_ptr, num_neighbors,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L14;
        }
        __pyx_L13_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L14:;
      }
  }

  /* "freud/environment.pxi":517
 *                 nRef, <vec3[float]*> l_points.data, nP,
 *                 <quat[float]*> l_orientations.data, l_mode)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/environment.pxi":419
 *         return self
 * 
 *     def compute(self, box, unsigned int num_neighbors, points_ref, points=None,             # <<<<<<<<<<<<<<
 *                 orientations=None, mode='neighborhood', nlist=None):
 *         """Calculates the local descriptors of bonds from a set of source
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_14);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points_ref.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_orientations);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points_ref);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XDECREF(__pyx_v_points_ref);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_orientations);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":520
 * 
 *     @property
 *     def sph(self):             # <<<<<<<<<<<<<<
 *         return self.getSph()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_3sph_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_3sph_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_3sph___get__(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_3sph___get__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":521
 *     @property
 *     def sph(self):
 *         return self.getSph()             # <<<<<<<<<<<<<<
 * 
 *     def getSph(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getSph); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 521, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 521, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":520
 * 
 *     @property
 *     def sph(self):             # <<<<<<<<<<<<<<
 *         return self.getSph()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.sph.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":523
 *         return self.getSph()
 * 
 *     def getSph(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed spherical harmonic array.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_9getSph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_16LocalDescriptors_8getSph[] = "LocalDescriptors.getSph(self)\nGet a reference to the last computed spherical harmonic array.\n\n        Returns:\n            :math:`\\left(N_{bonds}, \\text{SphWidth} \\right)`             :class:`numpy.ndarray`:\n                Order parameter.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_9getSph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSph (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_8getSph(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_8getSph(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  __pyx_t_float_complex *__pyx_v_sph;
  npy_intp __pyx_v_nbins[2];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getSph", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/environment.pxi":531
 *                 Order parameter.
 *         """
 *         cdef float complex * sph = self.thisptr.getSph().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNSphs()
 */
  __pyx_v_sph = __pyx_v_self->thisptr->getSph().get();

  /* "freud/environment.pxi":533
 *         cdef float complex * sph = self.thisptr.getSph().get()
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNSphs()             # <<<<<<<<<<<<<<
 *         nbins[1] = <np.npy_intp> self.thisptr.getSphWidth()
 *         cdef np.ndarray[np.complex64_t, ndim=2] result = \
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNSphs());

  /* "freud/environment.pxi":534
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNSphs()
 *         nbins[1] = <np.npy_intp> self.thisptr.getSphWidth()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.complex64_t, ndim=2] result = \
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_COMPLEX64,
 */
  (__pyx_v_nbins[1]) = ((npy_intp)__pyx_v_self->thisptr->getSphWidth());

  /* "freud/environment.pxi":536
 *         nbins[1] = <np.npy_intp> self.thisptr.getSphWidth()
 *         cdef np.ndarray[np.complex64_t, ndim=2] result = \
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_COMPLEX64,             # <<<<<<<<<<<<<<
 *                                          <void*> sph)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(2, __pyx_v_nbins, NPY_COMPLEX64, ((void *)__pyx_v_sph)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 536, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo___pyx_t_float_complex, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 535, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":538
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_COMPLEX64,
 *                                          <void*> sph)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/environment.pxi":523
 *         return self.getSph()
 * 
 *     def getSph(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the last computed spherical harmonic array.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.getSph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":541
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_13num_particles_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_13num_particles_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_13num_particles___get__(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_13num_particles___get__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":542
 *     @property
 *     def num_particles(self):
 *         return self.getNP()             # <<<<<<<<<<<<<<
 * 
 *     def getNP(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNP); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 542, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 542, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":541
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.num_particles.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":544
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_11getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_16LocalDescriptors_10getNP[] = "LocalDescriptors.getNP(self)\nGet the number of particles.\n\n        Returns:\n            unsigned int: :math:`N_{particles}`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_11getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNP (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_10getNP(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_10getNP(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  unsigned int __pyx_v_np;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNP", 0);

  /* "freud/environment.pxi":550
 *             unsigned int: :math:`N_{particles}`.
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         return np
 * 
 */
  __pyx_v_np = __pyx_v_self->thisptr->getNP();

  /* "freud/environment.pxi":551
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()
 *         return np             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":544
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.getNP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":554
 * 
 *     @property
 *     def num_neighbors(self):             # <<<<<<<<<<<<<<
 *         return self.getNSphs()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_13num_neighbors_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_13num_neighbors_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_13num_neighbors___get__(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_13num_neighbors___get__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":555
 *     @property
 *     def num_neighbors(self):
 *         return self.getNSphs()             # <<<<<<<<<<<<<<
 * 
 *     def getNSphs(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNSphs); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 555, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 555, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":554
 * 
 *     @property
 *     def num_neighbors(self):             # <<<<<<<<<<<<<<
 *         return self.getNSphs()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.num_neighbors.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":557
 *         return self.getNSphs()
 * 
 *     def getNSphs(self):             # <<<<<<<<<<<<<<
 *         """Get the number of neighbors.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_13getNSphs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_16LocalDescriptors_12getNSphs[] = "LocalDescriptors.getNSphs(self)\nGet the number of neighbors.\n\n        Returns:\n            unsigned int: :math:`N_{neighbors}`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_13getNSphs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNSphs (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_12getNSphs(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_12getNSphs(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  unsigned int __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNSphs", 0);

  /* "freud/environment.pxi":563
 *             unsigned int: :math:`N_{neighbors}`.
 *         """
 *         cdef unsigned int n = self.thisptr.getNSphs()             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
  __pyx_v_n = __pyx_v_self->thisptr->getNSphs();

  /* "freud/environment.pxi":564
 *         """
 *         cdef unsigned int n = self.thisptr.getNSphs()
 *         return n             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":557
 *         return self.getNSphs()
 * 
 *     def getNSphs(self):             # <<<<<<<<<<<<<<
 *         """Get the number of neighbors.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.getNSphs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":567
 * 
 *     @property
 *     def l_max(self):             # <<<<<<<<<<<<<<
 *         return self.getLMax()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_5l_max_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_5l_max_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_5l_max___get__(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_5l_max___get__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":568
 *     @property
 *     def l_max(self):
 *         return self.getLMax()             # <<<<<<<<<<<<<<
 * 
 *     def getLMax(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getLMax); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 568, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 568, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":567
 * 
 *     @property
 *     def l_max(self):             # <<<<<<<<<<<<<<
 *         return self.getLMax()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.l_max.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":570
 *         return self.getLMax()
 * 
 *     def getLMax(self):             # <<<<<<<<<<<<<<
 *         """Get the maximum spherical harmonic :math:`l` to calculate for.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_15getLMax(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_16LocalDescriptors_14getLMax[] = "LocalDescriptors.getLMax(self)\nGet the maximum spherical harmonic :math:`l` to calculate for.\n\n        Returns:\n            unsigned int: :math:`l`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_15getLMax(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLMax (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_14getLMax(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_14getLMax(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  unsigned int __pyx_v_l_max;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getLMax", 0);

  /* "freud/environment.pxi":576
 *             unsigned int: :math:`l`.
 *         """
 *         cdef unsigned int l_max = self.thisptr.getLMax()             # <<<<<<<<<<<<<<
 *         return l_max
 * 
 */
  __pyx_v_l_max = __pyx_v_self->thisptr->getLMax();

  /* "freud/environment.pxi":577
 *         """
 *         cdef unsigned int l_max = self.thisptr.getLMax()
 *         return l_max             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_l_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":570
 *         return self.getLMax()
 * 
 *     def getLMax(self):             # <<<<<<<<<<<<<<
 *         """Get the maximum spherical harmonic :math:`l` to calculate for.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.getLMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":580
 * 
 *     @property
 *     def r_max(self):             # <<<<<<<<<<<<<<
 *         return self.getRMax()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_5r_max_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_5r_max_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_5r_max___get__(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_5r_max___get__(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":581
 *     @property
 *     def r_max(self):
 *         return self.getRMax()             # <<<<<<<<<<<<<<
 * 
 *     def getRMax(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getRMax); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 581, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":580
 * 
 *     @property
 *     def r_max(self):             # <<<<<<<<<<<<<<
 *         return self.getRMax()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.r_max.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":583
 *         return self.getRMax()
 * 
 *     def getRMax(self):             # <<<<<<<<<<<<<<
 *         """Get the cutoff radius.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_17getRMax(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_16LocalDescriptors_16getRMax[] = "LocalDescriptors.getRMax(self)\nGet the cutoff radius.\n\n        Returns:\n            float: :math:`r`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_17getRMax(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRMax (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_16getRMax(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_16getRMax(struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  float __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getRMax", 0);

  /* "freud/environment.pxi":589
 *             float: :math:`r`.
 *         """
 *         cdef float r = self.thisptr.getRMax()             # <<<<<<<<<<<<<<
 *         return r
 * 
 */
  __pyx_v_r = __pyx_v_self->thisptr->getRMax();

  /* "freud/environment.pxi":590
 *         """
 *         cdef float r = self.thisptr.getRMax()
 *         return r             # <<<<<<<<<<<<<<
 * 
 * cdef class MatchEnv:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_r); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":583
 *         return self.getRMax()
 * 
 *     def getRMax(self):             # <<<<<<<<<<<<<<
 *         """Get the cutoff radius.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.getRMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_16LocalDescriptors_18__reduce_cython__[] = "LocalDescriptors.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_18__reduce_cython__(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_16LocalDescriptors_20__setstate_cython__[] = "LocalDescriptors.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_16LocalDescriptors_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_16LocalDescriptors_20__setstate_cython__(((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_16LocalDescriptors_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_LocalDescriptors *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.LocalDescriptors.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":622
 *     cdef m_box
 * 
 *     def __cinit__(self, box, rmax, k):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_8MatchEnv_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_8MatchEnv_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_k = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_rmax,&__pyx_n_s_k,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(1, 622, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(1, 622, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 622, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_box = values[0];
    __pyx_v_rmax = values[1];
    __pyx_v_k = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 622, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.MatchEnv.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv___cinit__(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self), __pyx_v_box, __pyx_v_rmax, __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_8MatchEnv___cinit__(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_rmax, PyObject *__pyx_v_k) {
  freud::box::Box __pyx_v_l_box;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  bool __pyx_t_11;
  unsigned int __pyx_t_12;
  freud::environment::MatchEnv *__pyx_t_13;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/environment.pxi":623
 * 
 *     def __cinit__(self, box, rmax, k):
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":625
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr = new environment.MatchEnv(l_box, rmax, k)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 625, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 625, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 625, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 625, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 625, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 625, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 625, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 625, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":626
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *         self.thisptr = new environment.MatchEnv(l_box, rmax, k)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 626, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 626, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 626, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 626, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 626, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 626, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":624
 *     def __cinit__(self, box, rmax, k):
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);

  /* "freud/environment.pxi":627
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr = new environment.MatchEnv(l_box, rmax, k)             # <<<<<<<<<<<<<<
 * 
 *         self.rmax = rmax
 */
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_rmax); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 627, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyInt_As_unsigned_int(__pyx_v_k); if (unlikely((__pyx_t_12 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 627, __pyx_L1_error)
  try {
    __pyx_t_13 = new freud::environment::MatchEnv(__pyx_v_l_box, __pyx_t_10, __pyx_t_12);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 627, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_13;

  /* "freud/environment.pxi":629
 *         self.thisptr = new environment.MatchEnv(l_box, rmax, k)
 * 
 *         self.rmax = rmax             # <<<<<<<<<<<<<<
 *         self.num_neigh = k
 *         self.m_box = box
 */
  __Pyx_INCREF(__pyx_v_rmax);
  __Pyx_GIVEREF(__pyx_v_rmax);
  __Pyx_GOTREF(__pyx_v_self->rmax);
  __Pyx_DECREF(__pyx_v_self->rmax);
  __pyx_v_self->rmax = __pyx_v_rmax;

  /* "freud/environment.pxi":630
 * 
 *         self.rmax = rmax
 *         self.num_neigh = k             # <<<<<<<<<<<<<<
 *         self.m_box = box
 * 
 */
  __Pyx_INCREF(__pyx_v_k);
  __Pyx_GIVEREF(__pyx_v_k);
  __Pyx_GOTREF(__pyx_v_self->num_neigh);
  __Pyx_DECREF(__pyx_v_self->num_neigh);
  __pyx_v_self->num_neigh = __pyx_v_k;

  /* "freud/environment.pxi":631
 *         self.rmax = rmax
 *         self.num_neigh = k
 *         self.m_box = box             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_GIVEREF(__pyx_v_box);
  __Pyx_GOTREF(__pyx_v_self->m_box);
  __Pyx_DECREF(__pyx_v_self->m_box);
  __pyx_v_self->m_box = __pyx_v_box;

  /* "freud/environment.pxi":622
 *     cdef m_box
 * 
 *     def __cinit__(self, box, rmax, k):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.MatchEnv.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":633
 *         self.m_box = box
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_8MatchEnv_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_8MatchEnv_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_8MatchEnv_2__dealloc__(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_8MatchEnv_2__dealloc__(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/environment.pxi":634
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def setBox(self, box):
 */
  delete __pyx_v_self->thisptr;

  /* "freud/environment.pxi":633
 *         self.m_box = box
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/environment.pxi":636
 *         del self.thisptr
 * 
 *     def setBox(self, box):             # <<<<<<<<<<<<<<
 *         """Reset the simulation box.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_5setBox(PyObject *__pyx_v_self, PyObject *__pyx_v_box); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_4setBox[] = "MatchEnv.setBox(self, box)\nReset the simulation box.\n\n        Args:\n            box(:class:`freud.box.Box`): Simulation box.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_5setBox(PyObject *__pyx_v_self, PyObject *__pyx_v_box) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBox (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_4setBox(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self), ((PyObject *)__pyx_v_box));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_4setBox(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_box) {
  freud::box::Box __pyx_v_l_box;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  bool __pyx_t_11;
  __Pyx_RefNannySetupContext("setBox", 0);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/environment.pxi":642
 *             box(:class:`freud.box.Box`): Simulation box.
 *         """
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 642, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 642, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":644
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr.setBox(l_box)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 644, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 644, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 644, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 644, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 644, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 644, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 644, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 644, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":645
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 *         self.thisptr.setBox(l_box)
 *         self.m_box = box
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 645, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 645, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 645, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":643
 *         """
 *         box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);

  /* "freud/environment.pxi":646
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr.setBox(l_box)             # <<<<<<<<<<<<<<
 *         self.m_box = box
 * 
 */
  __pyx_v_self->thisptr->setBox(__pyx_v_l_box);

  /* "freud/environment.pxi":647
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 *         self.thisptr.setBox(l_box)
 *         self.m_box = box             # <<<<<<<<<<<<<<
 * 
 *     def cluster(self, points, threshold, hard_r=False, registration=False,
 */
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_GIVEREF(__pyx_v_box);
  __Pyx_GOTREF(__pyx_v_self->m_box);
  __Pyx_DECREF(__pyx_v_self->m_box);
  __pyx_v_self->m_box = __pyx_v_box;

  /* "freud/environment.pxi":636
 *         del self.thisptr
 * 
 *     def setBox(self, box):             # <<<<<<<<<<<<<<
 *         """Reset the simulation box.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.MatchEnv.setBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":649
 *         self.m_box = box
 * 
 *     def cluster(self, points, threshold, hard_r=False, registration=False,             # <<<<<<<<<<<<<<
 *                 global_search=False, env_nlist=None, nlist=None):
 *         """Determine clusters of particles with matching environments.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_7cluster(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_6cluster[] = "MatchEnv.cluster(self, points, threshold, hard_r=False, registration=False, global_search=False, env_nlist=None, nlist=None)\nDetermine clusters of particles with matching environments.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Destination points to calculate the order parameter.\n            threshold (float):\n                Maximum magnitude of the vector difference between two vectors,\n                below which they are \"matching.\"\n            hard_r (bool):\n                If True, add all particles that fall within the threshold of\n                m_rmaxsq to the environment.\n            registration (bool):\n                If True, first use brute force registration to orient one set\n                of environment vectors with respect to the other set such that\n                it minimizes the RMSD between the two sets.\n            global_search (bool):\n                If True, do an exhaustive search wherein the environments of\n                every single pair of particles in the simulation are compared.\n                If False, only compare the environments of neighboring\n                particles.\n            env_nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find the environment of every particle\n                (Default value = None).\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find neighbors of every particle, to\n                compare environments (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_7cluster(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_threshold = 0;
  PyObject *__pyx_v_hard_r = 0;
  PyObject *__pyx_v_registration = 0;
  PyObject *__pyx_v_global_search = 0;
  PyObject *__pyx_v_env_nlist = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cluster (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_threshold,&__pyx_n_s_hard_r,&__pyx_n_s_registration,&__pyx_n_s_global_search,&__pyx_n_s_env_nlist,&__pyx_n_s_nlist,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)Py_False);

    /* "freud/environment.pxi":650
 * 
 *     def cluster(self, points, threshold, hard_r=False, registration=False,
 *                 global_search=False, env_nlist=None, nlist=None):             # <<<<<<<<<<<<<<
 *         """Determine clusters of particles with matching environments.
 * 
 */
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cluster", 0, 2, 7, 1); __PYX_ERR(1, 649, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hard_r);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_registration);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_global_search);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_env_nlist);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cluster") < 0)) __PYX_ERR(1, 649, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_threshold = values[1];
    __pyx_v_hard_r = values[2];
    __pyx_v_registration = values[3];
    __pyx_v_global_search = values[4];
    __pyx_v_env_nlist = values[5];
    __pyx_v_nlist = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cluster", 0, 2, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 649, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.MatchEnv.cluster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_6cluster(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self), __pyx_v_points, __pyx_v_threshold, __pyx_v_hard_r, __pyx_v_registration, __pyx_v_global_search, __pyx_v_env_nlist, __pyx_v_nlist);

  /* "freud/environment.pxi":649
 *         self.m_box = box
 * 
 *     def cluster(self, points, threshold, hard_r=False, registration=False,             # <<<<<<<<<<<<<<
 *                 global_search=False, env_nlist=None, nlist=None):
 *         """Determine clusters of particles with matching environments.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_6cluster(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_threshold, PyObject *__pyx_v_hard_r, PyObject *__pyx_v_registration, PyObject *__pyx_v_global_search, PyObject *__pyx_v_env_nlist, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  unsigned int __pyx_v_nP;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_env_nlist_ptr;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_env_nlist_ = 0;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  PyObject *__pyx_v_defaulted_env_nlist = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  float __pyx_t_11;
  bool __pyx_t_12;
  bool __pyx_t_13;
  bool __pyx_t_14;
  __Pyx_RefNannySetupContext("cluster", 0);
  __Pyx_INCREF(__pyx_v_points);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;

  /* "freud/environment.pxi":678
 *                 compare environments (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":679
 *         """
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 679, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(1, 679, __pyx_L1_error)

  /* "freud/environment.pxi":678
 *                 compare environments (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":681
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":682
 *             array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 682, __pyx_L1_error)

    /* "freud/environment.pxi":681
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":685
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *             points.flatten())
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":686
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(
 *             points.flatten())             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_flatten); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 686, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 685, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 685, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 685, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":685
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *             points.flatten())
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 685, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 685, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":687
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(
 *             points.flatten())
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         cdef locality.NeighborList * nlist_ptr
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 687, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_8);

  /* "freud/environment.pxi":693
 *         cdef locality.NeighborList *env_nlist_ptr
 *         cdef NeighborList env_nlist_
 *         if hard_r:             # <<<<<<<<<<<<<<
 *             defaulted_nlist = make_default_nlist(
 *                 self.m_box, points, points, self.rmax, nlist, True)
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_hard_r); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 693, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "freud/environment.pxi":694
 *         cdef NeighborList env_nlist_
 *         if hard_r:
 *             defaulted_nlist = make_default_nlist(             # <<<<<<<<<<<<<<
 *                 self.m_box, points, points, self.rmax, nlist, True)
 *             nlist_ = defaulted_nlist[0]
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "freud/environment.pxi":695
 *         if hard_r:
 *             defaulted_nlist = make_default_nlist(
 *                 self.m_box, points, points, self.rmax, nlist, True)             # <<<<<<<<<<<<<<
 *             nlist_ = defaulted_nlist[0]
 *             nlist_ptr = nlist_.get_ptr()
 */
    __pyx_t_4 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[7] = {__pyx_t_4, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 6+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 694, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[7] = {__pyx_t_4, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 6+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 694, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(6+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_self->m_box);
      __Pyx_GIVEREF(__pyx_v_self->m_box);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_9, __pyx_v_self->m_box);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_9, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_9, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_self->rmax);
      __Pyx_GIVEREF(__pyx_v_self->rmax);
      PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_9, __pyx_v_self->rmax);
      __Pyx_INCREF(__pyx_v_nlist);
      __Pyx_GIVEREF(__pyx_v_nlist);
      PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_9, __pyx_v_nlist);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_3, 5+__pyx_t_9, Py_True);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_defaulted_nlist = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "freud/environment.pxi":696
 *             defaulted_nlist = make_default_nlist(
 *                 self.m_box, points, points, self.rmax, nlist, True)
 *             nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *             nlist_ptr = nlist_.get_ptr()
 * 
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(1, 696, __pyx_L1_error)
    __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "freud/environment.pxi":697
 *                 self.m_box, points, points, self.rmax, nlist, True)
 *             nlist_ = defaulted_nlist[0]
 *             nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *             defaulted_env_nlist = make_default_nlist(
 */
    __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

    /* "freud/environment.pxi":699
 *             nlist_ptr = nlist_.get_ptr()
 * 
 *             defaulted_env_nlist = make_default_nlist(             # <<<<<<<<<<<<<<
 *                 self.m_box, points, points, self.rmax, env_nlist, True)
 *             env_nlist_ = defaulted_env_nlist[0]
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "freud/environment.pxi":700
 * 
 *             defaulted_env_nlist = make_default_nlist(
 *                 self.m_box, points, points, self.rmax, env_nlist, True)             # <<<<<<<<<<<<<<
 *             env_nlist_ = defaulted_env_nlist[0]
 *             env_nlist_ptr = env_nlist_.get_ptr()
 */
    __pyx_t_3 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[7] = {__pyx_t_3, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_env_nlist, Py_True};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 6+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 699, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[7] = {__pyx_t_3, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_env_nlist, Py_True};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 6+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 699, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(6+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_self->m_box);
      __Pyx_GIVEREF(__pyx_v_self->m_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_9, __pyx_v_self->m_box);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_9, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_9, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_self->rmax);
      __Pyx_GIVEREF(__pyx_v_self->rmax);
      PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_9, __pyx_v_self->rmax);
      __Pyx_INCREF(__pyx_v_env_nlist);
      __Pyx_GIVEREF(__pyx_v_env_nlist);
      PyTuple_SET_ITEM(__pyx_t_4, 4+__pyx_t_9, __pyx_v_env_nlist);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_4, 5+__pyx_t_9, Py_True);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_defaulted_env_nlist = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "freud/environment.pxi":701
 *             defaulted_env_nlist = make_default_nlist(
 *                 self.m_box, points, points, self.rmax, env_nlist, True)
 *             env_nlist_ = defaulted_env_nlist[0]             # <<<<<<<<<<<<<<
 *             env_nlist_ptr = env_nlist_.get_ptr()
 *         else:
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_defaulted_env_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(1, 701, __pyx_L1_error)
    __pyx_v_env_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "freud/environment.pxi":702
 *                 self.m_box, points, points, self.rmax, env_nlist, True)
 *             env_nlist_ = defaulted_env_nlist[0]
 *             env_nlist_ptr = env_nlist_.get_ptr()             # <<<<<<<<<<<<<<
 *         else:
 *             defaulted_nlist = make_default_nlist_nn(
 */
    __pyx_v_env_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_env_nlist_->__pyx_vtab)->get_ptr(__pyx_v_env_nlist_);

    /* "freud/environment.pxi":693
 *         cdef locality.NeighborList *env_nlist_ptr
 *         cdef NeighborList env_nlist_
 *         if hard_r:             # <<<<<<<<<<<<<<
 *             defaulted_nlist = make_default_nlist(
 *                 self.m_box, points, points, self.rmax, nlist, True)
 */
    goto __pyx_L4;
  }

  /* "freud/environment.pxi":704
 *             env_nlist_ptr = env_nlist_.get_ptr()
 *         else:
 *             defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *                 self.m_box, points, points, self.num_neigh, nlist,
 *                 None, self.rmax)
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "freud/environment.pxi":706
 *             defaulted_nlist = make_default_nlist_nn(
 *                 self.m_box, points, points, self.num_neigh, nlist,
 *                 None, self.rmax)             # <<<<<<<<<<<<<<
 *             nlist_ = defaulted_nlist[0]
 *             nlist_ptr = nlist_.get_ptr()
 */
    __pyx_t_4 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[8] = {__pyx_t_4, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_None, __pyx_v_self->rmax};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 7+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 704, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[8] = {__pyx_t_4, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_None, __pyx_v_self->rmax};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 7+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 704, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(7+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_self->m_box);
      __Pyx_GIVEREF(__pyx_v_self->m_box);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_9, __pyx_v_self->m_box);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_9, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_9, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_self->num_neigh);
      __Pyx_GIVEREF(__pyx_v_self->num_neigh);
      PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_9, __pyx_v_self->num_neigh);
      __Pyx_INCREF(__pyx_v_nlist);
      __Pyx_GIVEREF(__pyx_v_nlist);
      PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_9, __pyx_v_nlist);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_3, 5+__pyx_t_9, Py_None);
      __Pyx_INCREF(__pyx_v_self->rmax);
      __Pyx_GIVEREF(__pyx_v_self->rmax);
      PyTuple_SET_ITEM(__pyx_t_3, 6+__pyx_t_9, __pyx_v_self->rmax);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_defaulted_nlist = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "freud/environment.pxi":707
 *                 self.m_box, points, points, self.num_neigh, nlist,
 *                 None, self.rmax)
 *             nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *             nlist_ptr = nlist_.get_ptr()
 * 
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 707, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(1, 707, __pyx_L1_error)
    __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "freud/environment.pxi":708
 *                 None, self.rmax)
 *             nlist_ = defaulted_nlist[0]
 *             nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *             defaulted_env_nlist = make_default_nlist_nn(
 */
    __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

    /* "freud/environment.pxi":710
 *             nlist_ptr = nlist_.get_ptr()
 * 
 *             defaulted_env_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *                 self.m_box, points, points, self.num_neigh, env_nlist,
 *                 None, self.rmax)
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 710, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "freud/environment.pxi":712
 *             defaulted_env_nlist = make_default_nlist_nn(
 *                 self.m_box, points, points, self.num_neigh, env_nlist,
 *                 None, self.rmax)             # <<<<<<<<<<<<<<
 *             env_nlist_ = defaulted_env_nlist[0]
 *             env_nlist_ptr = env_nlist_.get_ptr()
 */
    __pyx_t_3 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_env_nlist, Py_None, __pyx_v_self->rmax};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 7+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 710, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[8] = {__pyx_t_3, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_env_nlist, Py_None, __pyx_v_self->rmax};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 7+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 710, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(7+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 710, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_self->m_box);
      __Pyx_GIVEREF(__pyx_v_self->m_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_9, __pyx_v_self->m_box);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_9, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_9, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_self->num_neigh);
      __Pyx_GIVEREF(__pyx_v_self->num_neigh);
      PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_9, __pyx_v_self->num_neigh);
      __Pyx_INCREF(__pyx_v_env_nlist);
      __Pyx_GIVEREF(__pyx_v_env_nlist);
      PyTuple_SET_ITEM(__pyx_t_4, 4+__pyx_t_9, __pyx_v_env_nlist);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_4, 5+__pyx_t_9, Py_None);
      __Pyx_INCREF(__pyx_v_self->rmax);
      __Pyx_GIVEREF(__pyx_v_self->rmax);
      PyTuple_SET_ITEM(__pyx_t_4, 6+__pyx_t_9, __pyx_v_self->rmax);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 710, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_defaulted_env_nlist = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "freud/environment.pxi":713
 *                 self.m_box, points, points, self.num_neigh, env_nlist,
 *                 None, self.rmax)
 *             env_nlist_ = defaulted_env_nlist[0]             # <<<<<<<<<<<<<<
 *             env_nlist_ptr = env_nlist_.get_ptr()
 * 
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_defaulted_env_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(1, 713, __pyx_L1_error)
    __pyx_v_env_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "freud/environment.pxi":714
 *                 None, self.rmax)
 *             env_nlist_ = defaulted_env_nlist[0]
 *             env_nlist_ptr = env_nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
    __pyx_v_env_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_env_nlist_->__pyx_vtab)->get_ptr(__pyx_v_env_nlist_);
  }
  __pyx_L4:;

  /* "freud/environment.pxi":718
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         self.thisptr.cluster(
 *             env_nlist_ptr, nlist_ptr, <vec3[float]*> &l_points[0], nP,             # <<<<<<<<<<<<<<
 *             threshold, hard_r, registration, global_search)
 * 
 */
  __pyx_t_10 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_l_points.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_l_points.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(1, 718, __pyx_L1_error)
  }

  /* "freud/environment.pxi":719
 *         self.thisptr.cluster(
 *             env_nlist_ptr, nlist_ptr, <vec3[float]*> &l_points[0], nP,
 *             threshold, hard_r, registration, global_search)             # <<<<<<<<<<<<<<
 * 
 *     def matchMotif(self, points, refPoints, threshold, registration=False,
 */
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_v_threshold); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 719, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_hard_r); if (unlikely((__pyx_t_12 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 719, __pyx_L1_error)
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_registration); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 719, __pyx_L1_error)
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_v_global_search); if (unlikely((__pyx_t_14 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 719, __pyx_L1_error)

  /* "freud/environment.pxi":717
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         self.thisptr.cluster(             # <<<<<<<<<<<<<<
 *             env_nlist_ptr, nlist_ptr, <vec3[float]*> &l_points[0], nP,
 *             threshold, hard_r, registration, global_search)
 */
  try {
    __pyx_v_self->thisptr->cluster(__pyx_v_env_nlist_ptr, __pyx_v_nlist_ptr, ((vec3<float>  *)(&(*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_l_points.diminfo[0].strides)))), __pyx_v_nP, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 717, __pyx_L1_error)
  }

  /* "freud/environment.pxi":649
 *         self.m_box = box
 * 
 *     def cluster(self, points, threshold, hard_r=False, registration=False,             # <<<<<<<<<<<<<<
 *                 global_search=False, env_nlist=None, nlist=None):
 *         """Determine clusters of particles with matching environments.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.MatchEnv.cluster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF((PyObject *)__pyx_v_env_nlist_);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF(__pyx_v_defaulted_env_nlist);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":721
 *             threshold, hard_r, registration, global_search)
 * 
 *     def matchMotif(self, points, refPoints, threshold, registration=False,             # <<<<<<<<<<<<<<
 *                    nlist=None):
 *         """Determine clusters of particles that match the motif provided by
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_9matchMotif(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_8matchMotif[] = "MatchEnv.matchMotif(self, points, refPoints, threshold, registration=False, nlist=None)\nDetermine clusters of particles that match the motif provided by\n        refPoints.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Particle positions.\n            refPoints ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Vectors that make up the motif against which we are matching.\n            threshold (float):\n                Maximum magnitude of the vector difference between two vectors,\n                below which they are considered \"matching.\"\n            registration (bool, optional):\n                If True, first use brute force registration to orient one set\n                of environment vectors with respect to the other set such that\n                it minimizes the RMSD between the two sets\n                (Default value = False).\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_9matchMotif(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_refPoints = 0;
  PyObject *__pyx_v_threshold = 0;
  PyObject *__pyx_v_registration = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matchMotif (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_refPoints,&__pyx_n_s_threshold,&__pyx_n_s_registration,&__pyx_n_s_nlist,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_False);

    /* "freud/environment.pxi":722
 * 
 *     def matchMotif(self, points, refPoints, threshold, registration=False,
 *                    nlist=None):             # <<<<<<<<<<<<<<
 *         """Determine clusters of particles that match the motif provided by
 *         refPoints.
 */
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refPoints)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("matchMotif", 0, 3, 5, 1); __PYX_ERR(1, 721, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("matchMotif", 0, 3, 5, 2); __PYX_ERR(1, 721, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_registration);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "matchMotif") < 0)) __PYX_ERR(1, 721, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_refPoints = values[1];
    __pyx_v_threshold = values[2];
    __pyx_v_registration = values[3];
    __pyx_v_nlist = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matchMotif", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 721, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.MatchEnv.matchMotif", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_8matchMotif(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self), __pyx_v_points, __pyx_v_refPoints, __pyx_v_threshold, __pyx_v_registration, __pyx_v_nlist);

  /* "freud/environment.pxi":721
 *             threshold, hard_r, registration, global_search)
 * 
 *     def matchMotif(self, points, refPoints, threshold, registration=False,             # <<<<<<<<<<<<<<
 *                    nlist=None):
 *         """Determine clusters of particles that match the motif provided by
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_8matchMotif(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_refPoints, PyObject *__pyx_v_threshold, PyObject *__pyx_v_registration, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  PyArrayObject *__pyx_v_l_refPoints = 0;
  unsigned int __pyx_v_nP;
  unsigned int __pyx_v_nRef;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_refPoints;
  __Pyx_Buffer __pyx_pybuffer_l_refPoints;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyArrayObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  float __pyx_t_13;
  bool __pyx_t_14;
  __Pyx_RefNannySetupContext("matchMotif", 0);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_INCREF(__pyx_v_refPoints);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;
  __pyx_pybuffer_l_refPoints.pybuffer.buf = NULL;
  __pyx_pybuffer_l_refPoints.refcount = 0;
  __pyx_pybuffernd_l_refPoints.data = NULL;
  __pyx_pybuffernd_l_refPoints.rcbuffer = &__pyx_pybuffer_l_refPoints;

  /* "freud/environment.pxi":742
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":743
 *         """
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 743, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 743, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(1, 743, __pyx_L1_error)

  /* "freud/environment.pxi":742
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":745
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 745, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 745, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":746
 *             array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         refPoints = freud.common.convert_array(
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 746, __pyx_L1_error)

    /* "freud/environment.pxi":745
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":748
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         refPoints = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints")
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":749
 * 
 *         refPoints = freud.common.convert_array(
 *             refPoints, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="refPoints")
 *         if refPoints.shape[1] != 3:
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_refPoints);
  __Pyx_GIVEREF(__pyx_v_refPoints);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_refPoints);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 749, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 749, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_array_name, __pyx_n_s_refPoints) < 0) __PYX_ERR(1, 749, __pyx_L1_error)

  /* "freud/environment.pxi":748
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         refPoints = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints")
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_refPoints, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":751
 *             refPoints, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints")
 *         if refPoints.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints should be an Nx3 array')
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":752
 *             array_name="refPoints")
 *         if refPoints.shape[1] != 3:
 *             raise TypeError('refPoints should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 752, __pyx_L1_error)

    /* "freud/environment.pxi":751
 *             refPoints, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints")
 *         if refPoints.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":755
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *             points.flatten())
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":756
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(
 *             points.flatten())             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(
 *             refPoints.flatten())
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_flatten); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 756, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 756, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 755, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 755, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 755, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":755
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *             points.flatten())
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(
 */
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 755, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 755, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":757
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(
 *             points.flatten())
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *             refPoints.flatten())
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":758
 *             points.flatten())
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(
 *             refPoints.flatten())             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         cdef unsigned int nRef = <unsigned int> refPoints.shape[0]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints, __pyx_n_s_flatten); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 758, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 758, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 757, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 757, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 757, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 757, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 757, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":757
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(
 *             points.flatten())
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *             refPoints.flatten())
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 757, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_l_refPoints = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 757, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_refPoints.diminfo[0].strides = __pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_refPoints.diminfo[0].shape = __pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_l_refPoints = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":759
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(
 *             refPoints.flatten())
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 *         cdef unsigned int nRef = <unsigned int> refPoints.shape[0]
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_9);

  /* "freud/environment.pxi":760
 *             refPoints.flatten())
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         cdef unsigned int nRef = <unsigned int> refPoints.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 760, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_nRef = ((unsigned int)__pyx_t_9);

  /* "freud/environment.pxi":762
 *         cdef unsigned int nRef = <unsigned int> refPoints.shape[0]
 * 
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "freud/environment.pxi":763
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, None, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_5 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[8] = {__pyx_t_5, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_None, __pyx_v_self->rmax};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 7+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 762, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[8] = {__pyx_t_5, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_None, __pyx_v_self->rmax};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 7+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 762, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(7+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->m_box);
    __Pyx_GIVEREF(__pyx_v_self->m_box);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_v_self->m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_10, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_10, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_10, __pyx_v_nlist);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 5+__pyx_t_10, Py_None);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_3, 6+__pyx_t_10, __pyx_v_self->rmax);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":764
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(1, 764, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":765
 *             self.m_box, points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/environment.pxi":769
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         self.thisptr.matchMotif(
 *             nlist_ptr, <vec3[float]*> &l_points[0], nP,             # <<<<<<<<<<<<<<
 *             <vec3[float]*> &l_refPoints[0], nRef, threshold,
 *             registration)
 */
  __pyx_t_11 = 0;
  __pyx_t_10 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_l_points.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_l_points.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(1, 769, __pyx_L1_error)
  }

  /* "freud/environment.pxi":770
 *         self.thisptr.matchMotif(
 *             nlist_ptr, <vec3[float]*> &l_points[0], nP,
 *             <vec3[float]*> &l_refPoints[0], nRef, threshold,             # <<<<<<<<<<<<<<
 *             registration)
 * 
 */
  __pyx_t_12 = 0;
  __pyx_t_10 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_l_refPoints.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_l_refPoints.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(1, 770, __pyx_L1_error)
  }
  __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_v_threshold); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 770, __pyx_L1_error)

  /* "freud/environment.pxi":771
 *             nlist_ptr, <vec3[float]*> &l_points[0], nP,
 *             <vec3[float]*> &l_refPoints[0], nRef, threshold,
 *             registration)             # <<<<<<<<<<<<<<
 * 
 *     def minRMSDMotif(self, points, refPoints, registration=False, nlist=None):
 */
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_v_registration); if (unlikely((__pyx_t_14 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 771, __pyx_L1_error)

  /* "freud/environment.pxi":768
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         self.thisptr.matchMotif(             # <<<<<<<<<<<<<<
 *             nlist_ptr, <vec3[float]*> &l_points[0], nP,
 *             <vec3[float]*> &l_refPoints[0], nRef, threshold,
 */
  try {
    __pyx_v_self->thisptr->matchMotif(__pyx_v_nlist_ptr, ((vec3<float>  *)(&(*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_l_points.diminfo[0].strides)))), __pyx_v_nP, ((vec3<float>  *)(&(*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_l_refPoints.diminfo[0].strides)))), __pyx_v_nRef, __pyx_t_13, __pyx_t_14);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 768, __pyx_L1_error)
  }

  /* "freud/environment.pxi":721
 *             threshold, hard_r, registration, global_search)
 * 
 *     def matchMotif(self, points, refPoints, threshold, registration=False,             # <<<<<<<<<<<<<<
 *                    nlist=None):
 *         """Determine clusters of particles that match the motif provided by
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.MatchEnv.matchMotif", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_refPoints);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_refPoints);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":773
 *             registration)
 * 
 *     def minRMSDMotif(self, points, refPoints, registration=False, nlist=None):             # <<<<<<<<<<<<<<
 *         """Rotate (if registration=True) and permute the environments of all
 *         particles to minimize their RMSD with respect to the motif provided by
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_11minRMSDMotif(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_10minRMSDMotif[] = "MatchEnv.minRMSDMotif(self, points, refPoints, registration=False, nlist=None)\nRotate (if registration=True) and permute the environments of all\n        particles to minimize their RMSD with respect to the motif provided by\n        refPoints.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Particle positions.\n            refPoints ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Vectors that make up the motif against which we are matching.\n            registration (bool, optional):\n                If True, first use brute force registration to orient one set\n                of environment vectors with respect to the other set such that\n                it minimizes the RMSD between the two sets\n                (Default value = False).\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Vector of minimal RMSD values, one value per particle.\n\n        ";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_11minRMSDMotif(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_refPoints = 0;
  PyObject *__pyx_v_registration = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minRMSDMotif (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_refPoints,&__pyx_n_s_registration,&__pyx_n_s_nlist,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refPoints)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("minRMSDMotif", 0, 2, 4, 1); __PYX_ERR(1, 773, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_registration);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "minRMSDMotif") < 0)) __PYX_ERR(1, 773, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_refPoints = values[1];
    __pyx_v_registration = values[2];
    __pyx_v_nlist = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("minRMSDMotif", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 773, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.MatchEnv.minRMSDMotif", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_10minRMSDMotif(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self), __pyx_v_points, __pyx_v_refPoints, __pyx_v_registration, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_10minRMSDMotif(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_refPoints, PyObject *__pyx_v_registration, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  PyArrayObject *__pyx_v_l_refPoints = 0;
  unsigned int __pyx_v_nP;
  unsigned int __pyx_v_nRef;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  std::vector<float>  __pyx_v_min_rmsd_vec;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_refPoints;
  __Pyx_Buffer __pyx_pybuffer_l_refPoints;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyArrayObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  bool __pyx_t_13;
  std::vector<float>  __pyx_t_14;
  __Pyx_RefNannySetupContext("minRMSDMotif", 0);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_INCREF(__pyx_v_refPoints);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;
  __pyx_pybuffer_l_refPoints.pybuffer.buf = NULL;
  __pyx_pybuffer_l_refPoints.refcount = 0;
  __pyx_pybuffernd_l_refPoints.data = NULL;
  __pyx_pybuffernd_l_refPoints.rcbuffer = &__pyx_pybuffer_l_refPoints;

  /* "freud/environment.pxi":795
 * 
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":796
 *         """
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 796, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 796, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(1, 796, __pyx_L1_error)

  /* "freud/environment.pxi":795
 * 
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":798
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 798, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 798, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":799
 *             array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         refPoints = freud.common.convert_array(
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 799, __pyx_L1_error)

    /* "freud/environment.pxi":798
 *             points, 2, dtype=np.float32, contiguous=True,
 *             array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":801
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         refPoints = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints")
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":802
 * 
 *         refPoints = freud.common.convert_array(
 *             refPoints, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="refPoints")
 *         if refPoints.shape[1] != 3:
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_refPoints);
  __Pyx_GIVEREF(__pyx_v_refPoints);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_refPoints);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 802, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_array_name, __pyx_n_s_refPoints) < 0) __PYX_ERR(1, 802, __pyx_L1_error)

  /* "freud/environment.pxi":801
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         refPoints = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints")
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_refPoints, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":804
 *             refPoints, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints")
 *         if refPoints.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints should be an Nx3 array')
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":805
 *             array_name="refPoints")
 *         if refPoints.shape[1] != 3:
 *             raise TypeError('refPoints should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 805, __pyx_L1_error)

    /* "freud/environment.pxi":804
 *             refPoints, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints")
 *         if refPoints.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":808
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *             points.flatten())
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":809
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(
 *             points.flatten())             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(
 *             refPoints.flatten())
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_flatten); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 809, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 809, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 808, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 808, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 808, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":808
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *             points.flatten())
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(
 */
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 808, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 808, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":810
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(
 *             points.flatten())
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *             refPoints.flatten())
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":811
 *             points.flatten())
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(
 *             refPoints.flatten())             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         cdef unsigned int nRef = <unsigned int> refPoints.shape[0]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints, __pyx_n_s_flatten); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 811, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 811, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 810, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 810, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 810, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":810
 *         cdef np.ndarray[float, ndim=1] l_points = np.ascontiguousarray(
 *             points.flatten())
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *             refPoints.flatten())
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 810, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_l_refPoints = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 810, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_refPoints.diminfo[0].strides = __pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_refPoints.diminfo[0].shape = __pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_l_refPoints = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":812
 *         cdef np.ndarray[float, ndim=1] l_refPoints = np.ascontiguousarray(
 *             refPoints.flatten())
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 *         cdef unsigned int nRef = <unsigned int> refPoints.shape[0]
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 812, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_9);

  /* "freud/environment.pxi":813
 *             refPoints.flatten())
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         cdef unsigned int nRef = <unsigned int> refPoints.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 813, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_nRef = ((unsigned int)__pyx_t_9);

  /* "freud/environment.pxi":815
 *         cdef unsigned int nRef = <unsigned int> refPoints.shape[0]
 * 
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "freud/environment.pxi":816
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, None, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_5 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[8] = {__pyx_t_5, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_None, __pyx_v_self->rmax};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 7+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 815, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[8] = {__pyx_t_5, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_None, __pyx_v_self->rmax};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 7+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 815, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(7+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->m_box);
    __Pyx_GIVEREF(__pyx_v_self->m_box);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_v_self->m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_10, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_10, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_10, __pyx_v_nlist);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 5+__pyx_t_10, Py_None);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_3, 6+__pyx_t_10, __pyx_v_self->rmax);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":817
 *         defaulted_nlist = make_default_nlist_nn(
 *             self.m_box, points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(1, 817, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":818
 *             self.m_box, points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/environment.pxi":822
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef vector[float] min_rmsd_vec = self.thisptr.minRMSDMotif(
 *             nlist_ptr, <vec3[float]*> &l_points[0], nP,             # <<<<<<<<<<<<<<
 *             <vec3[float]*> &l_refPoints[0], nRef, registration)
 * 
 */
  __pyx_t_11 = 0;
  __pyx_t_10 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_l_points.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_l_points.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(1, 822, __pyx_L1_error)
  }

  /* "freud/environment.pxi":823
 *         cdef vector[float] min_rmsd_vec = self.thisptr.minRMSDMotif(
 *             nlist_ptr, <vec3[float]*> &l_points[0], nP,
 *             <vec3[float]*> &l_refPoints[0], nRef, registration)             # <<<<<<<<<<<<<<
 * 
 *         return min_rmsd_vec
 */
  __pyx_t_12 = 0;
  __pyx_t_10 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_l_refPoints.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_l_refPoints.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(1, 823, __pyx_L1_error)
  }
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_registration); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 823, __pyx_L1_error)

  /* "freud/environment.pxi":821
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef vector[float] min_rmsd_vec = self.thisptr.minRMSDMotif(             # <<<<<<<<<<<<<<
 *             nlist_ptr, <vec3[float]*> &l_points[0], nP,
 *             <vec3[float]*> &l_refPoints[0], nRef, registration)
 */
  try {
    __pyx_t_14 = __pyx_v_self->thisptr->minRMSDMotif(__pyx_v_nlist_ptr, ((vec3<float>  *)(&(*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_l_points.diminfo[0].strides)))), __pyx_v_nP, ((vec3<float>  *)(&(*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_l_refPoints.diminfo[0].strides)))), __pyx_v_nRef, __pyx_t_13);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 821, __pyx_L1_error)
  }
  __pyx_v_min_rmsd_vec = __pyx_t_14;

  /* "freud/environment.pxi":825
 *             <vec3[float]*> &l_refPoints[0], nRef, registration)
 * 
 *         return min_rmsd_vec             # <<<<<<<<<<<<<<
 * 
 *     def isSimilar(self, refPoints1, refPoints2, threshold, registration=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_vector_to_py_float(__pyx_v_min_rmsd_vec); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":773
 *             registration)
 * 
 *     def minRMSDMotif(self, points, refPoints, registration=False, nlist=None):             # <<<<<<<<<<<<<<
 *         """Rotate (if registration=True) and permute the environments of all
 *         particles to minimize their RMSD with respect to the motif provided by
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.MatchEnv.minRMSDMotif", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_refPoints);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_refPoints);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":827
 *         return min_rmsd_vec
 * 
 *     def isSimilar(self, refPoints1, refPoints2, threshold, registration=False):             # <<<<<<<<<<<<<<
 *         """Test if the motif provided by refPoints1 is similar to the motif
 *         provided by refPoints2.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_13isSimilar(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_12isSimilar[] = "MatchEnv.isSimilar(self, refPoints1, refPoints2, threshold, registration=False)\nTest if the motif provided by refPoints1 is similar to the motif\n        provided by refPoints2.\n\n        Args:\n            refPoints1 ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Vectors that make up motif 1.\n            refPoints2 ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Vectors that make up motif 2.\n            threshold (float):\n                Maximum magnitude of the vector difference between two vectors,\n                below which they are considered \"matching.\"\n            registration (bool, optional):\n                If True, first use brute force registration to orient one set\n                of environment vectors with respect to the other set such that\n                it minimizes the RMSD between the two sets\n                (Default value = False).\n\n        Returns:\n            tuple ((:math:`\\left(N_{particles}, 3\\right)`             :class:`numpy.ndarray`), map[int, int]):\n                A doublet that gives the rotated (or not) set of\n                :code:`refPoints2`, and the mapping between the vectors of\n                :code:`refPoints1` and :code:`refPoints2` that will make them\n                correspond to each other. Empty if they do not correspond to\n                each other.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_13isSimilar(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_refPoints1 = 0;
  PyObject *__pyx_v_refPoints2 = 0;
  PyObject *__pyx_v_threshold = 0;
  PyObject *__pyx_v_registration = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isSimilar (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_refPoints1,&__pyx_n_s_refPoints2,&__pyx_n_s_threshold,&__pyx_n_s_registration,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refPoints1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refPoints2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isSimilar", 0, 3, 4, 1); __PYX_ERR(1, 827, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isSimilar", 0, 3, 4, 2); __PYX_ERR(1, 827, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_registration);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isSimilar") < 0)) __PYX_ERR(1, 827, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_refPoints1 = values[0];
    __pyx_v_refPoints2 = values[1];
    __pyx_v_threshold = values[2];
    __pyx_v_registration = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isSimilar", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 827, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.MatchEnv.isSimilar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_12isSimilar(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self), __pyx_v_refPoints1, __pyx_v_refPoints2, __pyx_v_threshold, __pyx_v_registration);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_12isSimilar(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_refPoints1, PyObject *__pyx_v_refPoints2, PyObject *__pyx_v_threshold, PyObject *__pyx_v_registration) {
  PyArrayObject *__pyx_v_l_refPoints1 = 0;
  PyArrayObject *__pyx_v_l_refPoints2 = 0;
  unsigned int __pyx_v_nRef1;
  unsigned int __pyx_v_nRef2;
  float __pyx_v_threshold_sq;
  std::map<unsigned int,unsigned int>  __pyx_v_vec_map;
  PyArrayObject *__pyx_v_rot_refPoints2 = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_refPoints1;
  __Pyx_Buffer __pyx_pybuffer_l_refPoints1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_refPoints2;
  __Pyx_Buffer __pyx_pybuffer_l_refPoints2;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rot_refPoints2;
  __Pyx_Buffer __pyx_pybuffer_rot_refPoints2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  unsigned int __pyx_t_11;
  float __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  bool __pyx_t_16;
  std::map<unsigned int,unsigned int>  __pyx_t_17;
  PyArrayObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("isSimilar", 0);
  __Pyx_INCREF(__pyx_v_refPoints1);
  __Pyx_INCREF(__pyx_v_refPoints2);
  __pyx_pybuffer_l_refPoints1.pybuffer.buf = NULL;
  __pyx_pybuffer_l_refPoints1.refcount = 0;
  __pyx_pybuffernd_l_refPoints1.data = NULL;
  __pyx_pybuffernd_l_refPoints1.rcbuffer = &__pyx_pybuffer_l_refPoints1;
  __pyx_pybuffer_l_refPoints2.pybuffer.buf = NULL;
  __pyx_pybuffer_l_refPoints2.refcount = 0;
  __pyx_pybuffernd_l_refPoints2.data = NULL;
  __pyx_pybuffernd_l_refPoints2.rcbuffer = &__pyx_pybuffer_l_refPoints2;
  __pyx_pybuffer_rot_refPoints2.pybuffer.buf = NULL;
  __pyx_pybuffer_rot_refPoints2.refcount = 0;
  __pyx_pybuffernd_rot_refPoints2.data = NULL;
  __pyx_pybuffernd_rot_refPoints2.rcbuffer = &__pyx_pybuffer_rot_refPoints2;

  /* "freud/environment.pxi":854
 *                 each other.
 *         """
 *         refPoints1 = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints1, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints1")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":855
 *         """
 *         refPoints1 = freud.common.convert_array(
 *             refPoints1, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="refPoints1")
 *         if refPoints1.shape[1] != 3:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_refPoints1);
  __Pyx_GIVEREF(__pyx_v_refPoints1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_refPoints1);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 855, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_refPoints1) < 0) __PYX_ERR(1, 855, __pyx_L1_error)

  /* "freud/environment.pxi":854
 *                 each other.
 *         """
 *         refPoints1 = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints1, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints1")
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_refPoints1, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":857
 *             refPoints1, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints1")
 *         if refPoints1.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints1 should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints1, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":858
 *             array_name="refPoints1")
 *         if refPoints1.shape[1] != 3:
 *             raise TypeError('refPoints1 should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         refPoints2 = freud.common.convert_array(
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 858, __pyx_L1_error)

    /* "freud/environment.pxi":857
 *             refPoints1, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints1")
 *         if refPoints1.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints1 should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":860
 *             raise TypeError('refPoints1 should be an Nx3 array')
 * 
 *         refPoints2 = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints2, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints2")
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":861
 * 
 *         refPoints2 = freud.common.convert_array(
 *             refPoints2, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="refPoints2")
 *         if refPoints2.shape[1] != 3:
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_refPoints2);
  __Pyx_GIVEREF(__pyx_v_refPoints2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_refPoints2);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 861, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 861, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_array_name, __pyx_n_s_refPoints2) < 0) __PYX_ERR(1, 861, __pyx_L1_error)

  /* "freud/environment.pxi":860
 *             raise TypeError('refPoints1 should be an Nx3 array')
 * 
 *         refPoints2 = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints2, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints2")
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_refPoints2, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":863
 *             refPoints2, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints2")
 *         if refPoints2.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints2 should be an Nx3 array')
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints2, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 863, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 863, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":864
 *             array_name="refPoints2")
 *         if refPoints2.shape[1] != 3:
 *             raise TypeError('refPoints2 should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 864, __pyx_L1_error)

    /* "freud/environment.pxi":863
 *             refPoints2, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints2")
 *         if refPoints2.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints2 should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":867
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_refPoints1 = np.copy(             # <<<<<<<<<<<<<<
 *             np.ascontiguousarray(refPoints1.flatten()))
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":868
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_refPoints1 = np.copy(
 *             np.ascontiguousarray(refPoints1.flatten()))             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(
 *             np.ascontiguousarray(refPoints2.flatten()))
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints1, __pyx_n_s_flatten); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 868, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 868, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 868, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 868, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 868, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 868, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 868, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 867, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 867, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 867, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 867, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 867, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":867
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_refPoints1 = np.copy(             # <<<<<<<<<<<<<<
 *             np.ascontiguousarray(refPoints1.flatten()))
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(
 */
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 867, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_l_refPoints1 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 867, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_refPoints1.diminfo[0].strides = __pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_refPoints1.diminfo[0].shape = __pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v_l_refPoints1 = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":869
 *         cdef np.ndarray[float, ndim=1] l_refPoints1 = np.copy(
 *             np.ascontiguousarray(refPoints1.flatten()))
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(             # <<<<<<<<<<<<<<
 *             np.ascontiguousarray(refPoints2.flatten()))
 *         cdef unsigned int nRef1 = <unsigned int> refPoints1.shape[0]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":870
 *             np.ascontiguousarray(refPoints1.flatten()))
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(
 *             np.ascontiguousarray(refPoints2.flatten()))             # <<<<<<<<<<<<<<
 *         cdef unsigned int nRef1 = <unsigned int> refPoints1.shape[0]
 *         cdef unsigned int nRef2 = <unsigned int> refPoints2.shape[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints2, __pyx_n_s_flatten); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 870, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 870, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 870, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 870, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 870, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 869, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 869, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 869, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "freud/environment.pxi":869
 *         cdef np.ndarray[float, ndim=1] l_refPoints1 = np.copy(
 *             np.ascontiguousarray(refPoints1.flatten()))
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(             # <<<<<<<<<<<<<<
 *             np.ascontiguousarray(refPoints2.flatten()))
 *         cdef unsigned int nRef1 = <unsigned int> refPoints1.shape[0]
 */
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 869, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_l_refPoints2 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 869, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_refPoints2.diminfo[0].strides = __pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_refPoints2.diminfo[0].shape = __pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_l_refPoints2 = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":871
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(
 *             np.ascontiguousarray(refPoints2.flatten()))
 *         cdef unsigned int nRef1 = <unsigned int> refPoints1.shape[0]             # <<<<<<<<<<<<<<
 *         cdef unsigned int nRef2 = <unsigned int> refPoints2.shape[0]
 *         cdef float threshold_sq = threshold*threshold
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints1, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_unsigned_int(__pyx_t_8); if (unlikely((__pyx_t_11 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 871, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_nRef1 = ((unsigned int)__pyx_t_11);

  /* "freud/environment.pxi":872
 *             np.ascontiguousarray(refPoints2.flatten()))
 *         cdef unsigned int nRef1 = <unsigned int> refPoints1.shape[0]
 *         cdef unsigned int nRef2 = <unsigned int> refPoints2.shape[0]             # <<<<<<<<<<<<<<
 *         cdef float threshold_sq = threshold*threshold
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints2, __pyx_n_s_shape); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_11 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_nRef2 = ((unsigned int)__pyx_t_11);

  /* "freud/environment.pxi":873
 *         cdef unsigned int nRef1 = <unsigned int> refPoints1.shape[0]
 *         cdef unsigned int nRef2 = <unsigned int> refPoints2.shape[0]
 *         cdef float threshold_sq = threshold*threshold             # <<<<<<<<<<<<<<
 * 
 *         if nRef1 != nRef2:
 */
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_threshold, __pyx_v_threshold); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 873, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_threshold_sq = __pyx_t_12;

  /* "freud/environment.pxi":875
 *         cdef float threshold_sq = threshold*threshold
 * 
 *         if nRef1 != nRef2:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 ("The number of vectors in refPoints1 must MATCH the number of"
 */
  __pyx_t_6 = ((__pyx_v_nRef1 != __pyx_v_nRef2) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":876
 * 
 *         if nRef1 != nRef2:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 ("The number of vectors in refPoints1 must MATCH the number of"
 *                     "vectors in refPoints2"))
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 876, __pyx_L1_error)

    /* "freud/environment.pxi":875
 *         cdef float threshold_sq = threshold*threshold
 * 
 *         if nRef1 != nRef2:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 ("The number of vectors in refPoints1 must MATCH the number of"
 */
  }

  /* "freud/environment.pxi":882
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef map[unsigned int, unsigned int] vec_map = self.thisptr.isSimilar(
 *             <vec3[float]*> &l_refPoints1[0],             # <<<<<<<<<<<<<<
 *             <vec3[float]*> &l_refPoints2[0],
 *             nRef1, threshold_sq, registration)
 */
  __pyx_t_13 = 0;
  __pyx_t_14 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_l_refPoints1.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_14 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_l_refPoints1.diminfo[0].shape)) __pyx_t_14 = 0;
  if (unlikely(__pyx_t_14 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_14);
    __PYX_ERR(1, 882, __pyx_L1_error)
  }

  /* "freud/environment.pxi":883
 *         cdef map[unsigned int, unsigned int] vec_map = self.thisptr.isSimilar(
 *             <vec3[float]*> &l_refPoints1[0],
 *             <vec3[float]*> &l_refPoints2[0],             # <<<<<<<<<<<<<<
 *             nRef1, threshold_sq, registration)
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(
 */
  __pyx_t_15 = 0;
  __pyx_t_14 = -1;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_l_refPoints2.diminfo[0].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_14 = 0;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_l_refPoints2.diminfo[0].shape)) __pyx_t_14 = 0;
  if (unlikely(__pyx_t_14 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_14);
    __PYX_ERR(1, 883, __pyx_L1_error)
  }

  /* "freud/environment.pxi":884
 *             <vec3[float]*> &l_refPoints1[0],
 *             <vec3[float]*> &l_refPoints2[0],
 *             nRef1, threshold_sq, registration)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(
 *             l_refPoints2, (nRef2, 3))
 */
  __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_v_registration); if (unlikely((__pyx_t_16 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 884, __pyx_L1_error)

  /* "freud/environment.pxi":881
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef map[unsigned int, unsigned int] vec_map = self.thisptr.isSimilar(             # <<<<<<<<<<<<<<
 *             <vec3[float]*> &l_refPoints1[0],
 *             <vec3[float]*> &l_refPoints2[0],
 */
  try {
    __pyx_t_17 = __pyx_v_self->thisptr->isSimilar(((vec3<float>  *)(&(*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_l_refPoints1.diminfo[0].strides)))), ((vec3<float>  *)(&(*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_l_refPoints2.diminfo[0].strides)))), __pyx_v_nRef1, __pyx_v_threshold_sq, __pyx_t_16);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 881, __pyx_L1_error)
  }
  __pyx_v_vec_map = __pyx_t_17;

  /* "freud/environment.pxi":885
 *             <vec3[float]*> &l_refPoints2[0],
 *             nRef1, threshold_sq, registration)
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(             # <<<<<<<<<<<<<<
 *             l_refPoints2, (nRef2, 3))
 *         return [rot_refPoints2, vec_map]
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_reshape); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "freud/environment.pxi":886
 *             nRef1, threshold_sq, registration)
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(
 *             l_refPoints2, (nRef2, 3))             # <<<<<<<<<<<<<<
 *         return [rot_refPoints2, vec_map]
 * 
 */
  __pyx_t_8 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nRef2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_14 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_14 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_l_refPoints2), __pyx_t_3};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 885, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_l_refPoints2), __pyx_t_3};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 885, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_l_refPoints2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_l_refPoints2));
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_14, ((PyObject *)__pyx_v_l_refPoints2));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_14, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "freud/environment.pxi":885
 *             <vec3[float]*> &l_refPoints2[0],
 *             nRef1, threshold_sq, registration)
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(             # <<<<<<<<<<<<<<
 *             l_refPoints2, (nRef2, 3))
 *         return [rot_refPoints2, vec_map]
 */
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 885, __pyx_L1_error)
  __pyx_t_18 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer, (PyObject*)__pyx_t_18, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_rot_refPoints2 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 885, __pyx_L1_error)
    } else {__pyx_pybuffernd_rot_refPoints2.diminfo[0].strides = __pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rot_refPoints2.diminfo[0].shape = __pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_rot_refPoints2.diminfo[1].strides = __pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_rot_refPoints2.diminfo[1].shape = __pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_18 = 0;
  __pyx_v_rot_refPoints2 = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":887
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(
 *             l_refPoints2, (nRef2, 3))
 *         return [rot_refPoints2, vec_map]             # <<<<<<<<<<<<<<
 * 
 *     def minimizeRMSD(self, refPoints1, refPoints2, registration=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_map_to_py_unsigned_int____unsigned_int(__pyx_v_vec_map); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_rot_refPoints2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rot_refPoints2));
  PyList_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_rot_refPoints2));
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":827
 *         return min_rmsd_vec
 * 
 *     def isSimilar(self, refPoints1, refPoints2, threshold, registration=False):             # <<<<<<<<<<<<<<
 *         """Test if the motif provided by refPoints1 is similar to the motif
 *         provided by refPoints2.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.MatchEnv.isSimilar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_refPoints1);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_refPoints2);
  __Pyx_XDECREF((PyObject *)__pyx_v_rot_refPoints2);
  __Pyx_XDECREF(__pyx_v_refPoints1);
  __Pyx_XDECREF(__pyx_v_refPoints2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":889
 *         return [rot_refPoints2, vec_map]
 * 
 *     def minimizeRMSD(self, refPoints1, refPoints2, registration=False):             # <<<<<<<<<<<<<<
 *         """Get the somewhat-optimal RMSD between the set of vectors refPoints1
 *         and the set of vectors refPoints2.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_15minimizeRMSD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_14minimizeRMSD[] = "MatchEnv.minimizeRMSD(self, refPoints1, refPoints2, registration=False)\nGet the somewhat-optimal RMSD between the set of vectors refPoints1\n        and the set of vectors refPoints2.\n\n        Args:\n            refPoints1 ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Vectors that make up motif 1.\n            refPoints2 ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Vectors that make up motif 2.\n            registration (bool, optional):\n                If true, first use brute force registration to orient one set\n                of environment vectors with respect to the other set such that\n                it minimizes the RMSD between the two sets\n                (Default value = False).\n\n        Returns:\n            tuple (float, (:math:`\\left(N_{particles}, 3\\right)`             :class:`numpy.ndarray`), map[int, int]):\n                A triplet that gives the associated min_rmsd, rotated (or not)\n                set of refPoints2, and the mapping between the vectors of\n                refPoints1 and refPoints2 that somewhat minimizes the RMSD.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_15minimizeRMSD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_refPoints1 = 0;
  PyObject *__pyx_v_refPoints2 = 0;
  PyObject *__pyx_v_registration = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minimizeRMSD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_refPoints1,&__pyx_n_s_refPoints2,&__pyx_n_s_registration,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refPoints1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refPoints2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("minimizeRMSD", 0, 2, 3, 1); __PYX_ERR(1, 889, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_registration);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "minimizeRMSD") < 0)) __PYX_ERR(1, 889, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_refPoints1 = values[0];
    __pyx_v_refPoints2 = values[1];
    __pyx_v_registration = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("minimizeRMSD", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 889, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.MatchEnv.minimizeRMSD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_14minimizeRMSD(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self), __pyx_v_refPoints1, __pyx_v_refPoints2, __pyx_v_registration);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_14minimizeRMSD(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_refPoints1, PyObject *__pyx_v_refPoints2, PyObject *__pyx_v_registration) {
  PyArrayObject *__pyx_v_l_refPoints1 = 0;
  PyArrayObject *__pyx_v_l_refPoints2 = 0;
  unsigned int __pyx_v_nRef1;
  unsigned int __pyx_v_nRef2;
  float __pyx_v_min_rmsd;
  std::map<unsigned int,unsigned int>  __pyx_v_results_map;
  PyArrayObject *__pyx_v_rot_refPoints2 = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_refPoints1;
  __Pyx_Buffer __pyx_pybuffer_l_refPoints1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_refPoints2;
  __Pyx_Buffer __pyx_pybuffer_l_refPoints2;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_rot_refPoints2;
  __Pyx_Buffer __pyx_pybuffer_rot_refPoints2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  unsigned int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  bool __pyx_t_15;
  std::map<unsigned int,unsigned int>  __pyx_t_16;
  PyArrayObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("minimizeRMSD", 0);
  __Pyx_INCREF(__pyx_v_refPoints1);
  __Pyx_INCREF(__pyx_v_refPoints2);
  __pyx_pybuffer_l_refPoints1.pybuffer.buf = NULL;
  __pyx_pybuffer_l_refPoints1.refcount = 0;
  __pyx_pybuffernd_l_refPoints1.data = NULL;
  __pyx_pybuffernd_l_refPoints1.rcbuffer = &__pyx_pybuffer_l_refPoints1;
  __pyx_pybuffer_l_refPoints2.pybuffer.buf = NULL;
  __pyx_pybuffer_l_refPoints2.refcount = 0;
  __pyx_pybuffernd_l_refPoints2.data = NULL;
  __pyx_pybuffernd_l_refPoints2.rcbuffer = &__pyx_pybuffer_l_refPoints2;
  __pyx_pybuffer_rot_refPoints2.pybuffer.buf = NULL;
  __pyx_pybuffer_rot_refPoints2.refcount = 0;
  __pyx_pybuffernd_rot_refPoints2.data = NULL;
  __pyx_pybuffernd_rot_refPoints2.rcbuffer = &__pyx_pybuffer_rot_refPoints2;

  /* "freud/environment.pxi":911
 *                 refPoints1 and refPoints2 that somewhat minimizes the RMSD.
 *         """
 *         refPoints1 = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints1, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints1")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":912
 *         """
 *         refPoints1 = freud.common.convert_array(
 *             refPoints1, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="refPoints1")
 *         if refPoints1.shape[1] != 3:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_refPoints1);
  __Pyx_GIVEREF(__pyx_v_refPoints1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_refPoints1);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 912, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 912, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_refPoints1) < 0) __PYX_ERR(1, 912, __pyx_L1_error)

  /* "freud/environment.pxi":911
 *                 refPoints1 and refPoints2 that somewhat minimizes the RMSD.
 *         """
 *         refPoints1 = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints1, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints1")
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_refPoints1, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":914
 *             refPoints1, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints1")
 *         if refPoints1.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints1 should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints1, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 914, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 914, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":915
 *             array_name="refPoints1")
 *         if refPoints1.shape[1] != 3:
 *             raise TypeError('refPoints1 should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         refPoints2 = freud.common.convert_array(
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 915, __pyx_L1_error)

    /* "freud/environment.pxi":914
 *             refPoints1, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints1")
 *         if refPoints1.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints1 should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":917
 *             raise TypeError('refPoints1 should be an Nx3 array')
 * 
 *         refPoints2 = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints2, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints2")
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":918
 * 
 *         refPoints2 = freud.common.convert_array(
 *             refPoints2, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="refPoints2")
 *         if refPoints2.shape[1] != 3:
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_refPoints2);
  __Pyx_GIVEREF(__pyx_v_refPoints2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_refPoints2);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 918, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_array_name, __pyx_n_s_refPoints2) < 0) __PYX_ERR(1, 918, __pyx_L1_error)

  /* "freud/environment.pxi":917
 *             raise TypeError('refPoints1 should be an Nx3 array')
 * 
 *         refPoints2 = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             refPoints2, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints2")
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_refPoints2, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":920
 *             refPoints2, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints2")
 *         if refPoints2.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints2 should be an Nx3 array')
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints2, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 920, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 920, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":921
 *             array_name="refPoints2")
 *         if refPoints2.shape[1] != 3:
 *             raise TypeError('refPoints2 should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 921, __pyx_L1_error)

    /* "freud/environment.pxi":920
 *             refPoints2, 2, dtype=np.float32, contiguous=True,
 *             array_name="refPoints2")
 *         if refPoints2.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('refPoints2 should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":924
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_refPoints1 = np.copy(             # <<<<<<<<<<<<<<
 *             np.ascontiguousarray(refPoints1.flatten()))
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":925
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_refPoints1 = np.copy(
 *             np.ascontiguousarray(refPoints1.flatten()))             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(
 *             np.ascontiguousarray(refPoints2.flatten()))
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints1, __pyx_n_s_flatten); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 925, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 925, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 925, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 925, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 925, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 924, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 924, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 924, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 924, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 924, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":924
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef np.ndarray[float, ndim=1] l_refPoints1 = np.copy(             # <<<<<<<<<<<<<<
 *             np.ascontiguousarray(refPoints1.flatten()))
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(
 */
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 924, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_l_refPoints1 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 924, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_refPoints1.diminfo[0].strides = __pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_refPoints1.diminfo[0].shape = __pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v_l_refPoints1 = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":926
 *         cdef np.ndarray[float, ndim=1] l_refPoints1 = np.copy(
 *             np.ascontiguousarray(refPoints1.flatten()))
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(             # <<<<<<<<<<<<<<
 *             np.ascontiguousarray(refPoints2.flatten()))
 *         cdef unsigned int nRef1 = <unsigned int> refPoints1.shape[0]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":927
 *             np.ascontiguousarray(refPoints1.flatten()))
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(
 *             np.ascontiguousarray(refPoints2.flatten()))             # <<<<<<<<<<<<<<
 *         cdef unsigned int nRef1 = <unsigned int> refPoints1.shape[0]
 *         cdef unsigned int nRef2 = <unsigned int> refPoints2.shape[0]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints2, __pyx_n_s_flatten); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 927, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 927, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 927, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 927, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 927, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 927, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 927, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 926, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 926, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 926, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 926, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 926, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "freud/environment.pxi":926
 *         cdef np.ndarray[float, ndim=1] l_refPoints1 = np.copy(
 *             np.ascontiguousarray(refPoints1.flatten()))
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(             # <<<<<<<<<<<<<<
 *             np.ascontiguousarray(refPoints2.flatten()))
 *         cdef unsigned int nRef1 = <unsigned int> refPoints1.shape[0]
 */
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 926, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_l_refPoints2 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 926, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_refPoints2.diminfo[0].strides = __pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_refPoints2.diminfo[0].shape = __pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_l_refPoints2 = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":928
 *         cdef np.ndarray[float, ndim=1] l_refPoints2 = np.copy(
 *             np.ascontiguousarray(refPoints2.flatten()))
 *         cdef unsigned int nRef1 = <unsigned int> refPoints1.shape[0]             # <<<<<<<<<<<<<<
 *         cdef unsigned int nRef2 = <unsigned int> refPoints2.shape[0]
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints1, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_unsigned_int(__pyx_t_8); if (unlikely((__pyx_t_11 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 928, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_nRef1 = ((unsigned int)__pyx_t_11);

  /* "freud/environment.pxi":929
 *             np.ascontiguousarray(refPoints2.flatten()))
 *         cdef unsigned int nRef1 = <unsigned int> refPoints1.shape[0]
 *         cdef unsigned int nRef2 = <unsigned int> refPoints2.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         if nRef1 != nRef2:
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_refPoints2, __pyx_n_s_shape); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_11 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 929, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_nRef2 = ((unsigned int)__pyx_t_11);

  /* "freud/environment.pxi":931
 *         cdef unsigned int nRef2 = <unsigned int> refPoints2.shape[0]
 * 
 *         if nRef1 != nRef2:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 ("The number of vectors in refPoints1 must MATCH the number of"
 */
  __pyx_t_6 = ((__pyx_v_nRef1 != __pyx_v_nRef2) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":932
 * 
 *         if nRef1 != nRef2:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 ("The number of vectors in refPoints1 must MATCH the number of"
 *                     "vectors in refPoints2"))
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 932, __pyx_L1_error)

    /* "freud/environment.pxi":931
 *         cdef unsigned int nRef2 = <unsigned int> refPoints2.shape[0]
 * 
 *         if nRef1 != nRef2:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 ("The number of vectors in refPoints1 must MATCH the number of"
 */
  }

  /* "freud/environment.pxi":936
 *                     "vectors in refPoints2"))
 * 
 *         cdef float min_rmsd = -1             # <<<<<<<<<<<<<<
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef map[unsigned int, unsigned int] results_map = \
 */
  __pyx_v_min_rmsd = -1.0;

  /* "freud/environment.pxi":940
 *         cdef map[unsigned int, unsigned int] results_map = \
 *             self.thisptr.minimizeRMSD(
 *                 <vec3[float]*> &l_refPoints1[0],             # <<<<<<<<<<<<<<
 *                 <vec3[float]*> &l_refPoints2[0],
 *                 nRef1, min_rmsd, registration)
 */
  __pyx_t_12 = 0;
  __pyx_t_13 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_l_refPoints1.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_13 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_l_refPoints1.diminfo[0].shape)) __pyx_t_13 = 0;
  if (unlikely(__pyx_t_13 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_13);
    __PYX_ERR(1, 940, __pyx_L1_error)
  }

  /* "freud/environment.pxi":941
 *             self.thisptr.minimizeRMSD(
 *                 <vec3[float]*> &l_refPoints1[0],
 *                 <vec3[float]*> &l_refPoints2[0],             # <<<<<<<<<<<<<<
 *                 nRef1, min_rmsd, registration)
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(
 */
  __pyx_t_14 = 0;
  __pyx_t_13 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_l_refPoints2.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_13 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_l_refPoints2.diminfo[0].shape)) __pyx_t_13 = 0;
  if (unlikely(__pyx_t_13 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_13);
    __PYX_ERR(1, 941, __pyx_L1_error)
  }

  /* "freud/environment.pxi":942
 *                 <vec3[float]*> &l_refPoints1[0],
 *                 <vec3[float]*> &l_refPoints2[0],
 *                 nRef1, min_rmsd, registration)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(
 *             l_refPoints2, (nRef2, 3))
 */
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_registration); if (unlikely((__pyx_t_15 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 942, __pyx_L1_error)

  /* "freud/environment.pxi":939
 *         # keeping the below syntax seems to be crucial for passing unit tests
 *         cdef map[unsigned int, unsigned int] results_map = \
 *             self.thisptr.minimizeRMSD(             # <<<<<<<<<<<<<<
 *                 <vec3[float]*> &l_refPoints1[0],
 *                 <vec3[float]*> &l_refPoints2[0],
 */
  try {
    __pyx_t_16 = __pyx_v_self->thisptr->minimizeRMSD(((vec3<float>  *)(&(*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_l_refPoints1.diminfo[0].strides)))), ((vec3<float>  *)(&(*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_l_refPoints2.diminfo[0].strides)))), __pyx_v_nRef1, __pyx_v_min_rmsd, __pyx_t_15);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 939, __pyx_L1_error)
  }
  __pyx_v_results_map = __pyx_t_16;

  /* "freud/environment.pxi":943
 *                 <vec3[float]*> &l_refPoints2[0],
 *                 nRef1, min_rmsd, registration)
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(             # <<<<<<<<<<<<<<
 *             l_refPoints2, (nRef2, 3))
 *         return [min_rmsd, rot_refPoints2, results_map]
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_reshape); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "freud/environment.pxi":944
 *                 nRef1, min_rmsd, registration)
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(
 *             l_refPoints2, (nRef2, 3))             # <<<<<<<<<<<<<<
 *         return [min_rmsd, rot_refPoints2, results_map]
 * 
 */
  __pyx_t_8 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nRef2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_13 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_13 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_l_refPoints2), __pyx_t_3};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 943, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_l_refPoints2), __pyx_t_3};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 943, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 943, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_l_refPoints2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_l_refPoints2));
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_13, ((PyObject *)__pyx_v_l_refPoints2));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_13, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 943, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "freud/environment.pxi":943
 *                 <vec3[float]*> &l_refPoints2[0],
 *                 nRef1, min_rmsd, registration)
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(             # <<<<<<<<<<<<<<
 *             l_refPoints2, (nRef2, 3))
 *         return [min_rmsd, rot_refPoints2, results_map]
 */
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 943, __pyx_L1_error)
  __pyx_t_17 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_rot_refPoints2 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 943, __pyx_L1_error)
    } else {__pyx_pybuffernd_rot_refPoints2.diminfo[0].strides = __pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rot_refPoints2.diminfo[0].shape = __pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_rot_refPoints2.diminfo[1].strides = __pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_rot_refPoints2.diminfo[1].shape = __pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_17 = 0;
  __pyx_v_rot_refPoints2 = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":945
 *         cdef np.ndarray[float, ndim=2] rot_refPoints2 = np.reshape(
 *             l_refPoints2, (nRef2, 3))
 *         return [min_rmsd, rot_refPoints2, results_map]             # <<<<<<<<<<<<<<
 * 
 *     def getClusters(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_min_rmsd); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __pyx_convert_map_to_py_unsigned_int____unsigned_int(__pyx_v_results_map); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_rot_refPoints2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rot_refPoints2));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_rot_refPoints2));
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
  __pyx_t_4 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":889
 *         return [rot_refPoints2, vec_map]
 * 
 *     def minimizeRMSD(self, refPoints1, refPoints2, registration=False):             # <<<<<<<<<<<<<<
 *         """Get the somewhat-optimal RMSD between the set of vectors refPoints1
 *         and the set of vectors refPoints2.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.MatchEnv.minimizeRMSD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints1.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_refPoints2.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rot_refPoints2.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_refPoints1);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_refPoints2);
  __Pyx_XDECREF((PyObject *)__pyx_v_rot_refPoints2);
  __Pyx_XDECREF(__pyx_v_refPoints1);
  __Pyx_XDECREF(__pyx_v_refPoints2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":947
 *         return [min_rmsd, rot_refPoints2, results_map]
 * 
 *     def getClusters(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the particles, indexed into clusters according to
 *         their matching local environments.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_17getClusters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_16getClusters[] = "MatchEnv.getClusters(self)\nGet a reference to the particles, indexed into clusters according to\n        their matching local environments.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                Clusters.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_17getClusters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClusters (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_16getClusters(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_16getClusters(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self) {
  unsigned int *__pyx_v_clusters;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getClusters", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/environment.pxi":955
 *                 Clusters.
 *         """
 *         cdef unsigned int * clusters = self.thisptr.getClusters().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         # this is the correct number
 */
  __pyx_v_clusters = __pyx_v_self->thisptr->getClusters().get();

  /* "freud/environment.pxi":958
 *         cdef np.npy_intp nbins[1]
 *         # this is the correct number
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNP());

  /* "freud/environment.pxi":960
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,             # <<<<<<<<<<<<<<
 *                                          <void*> clusters)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_UINT32, ((void *)__pyx_v_clusters)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 960, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 959, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":962
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,
 *                                          <void*> clusters)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getEnvironment(self, i):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/environment.pxi":947
 *         return [min_rmsd, rot_refPoints2, results_map]
 * 
 *     def getClusters(self):             # <<<<<<<<<<<<<<
 *         """Get a reference to the particles, indexed into clusters according to
 *         their matching local environments.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.MatchEnv.getClusters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":964
 *         return result
 * 
 *     def getEnvironment(self, i):             # <<<<<<<<<<<<<<
 *         """Returns the set of vectors defining the environment indexed by i.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_19getEnvironment(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_18getEnvironment[] = "MatchEnv.getEnvironment(self, i)\nReturns the set of vectors defining the environment indexed by i.\n\n        Args:\n            i (unsigned int): Environment index.\n\n        Returns:\n            :math:`\\left(N_{neighbors}, 3\\right)` :class:`numpy.ndarray`:\n            The array of vectors.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_19getEnvironment(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEnvironment (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_18getEnvironment(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_18getEnvironment(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, PyObject *__pyx_v_i) {
  vec3<float>  *__pyx_v_environment;
  npy_intp __pyx_v_nbins[2];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyArrayObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getEnvironment", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/environment.pxi":974
 *             The array of vectors.
 *         """
 *         cdef vec3[float] * environment = self.thisptr.getEnvironment(i).get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getMaxNumNeighbors()
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_i); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 974, __pyx_L1_error)
  __pyx_v_environment = __pyx_v_self->thisptr->getEnvironment(__pyx_t_1).get();

  /* "freud/environment.pxi":976
 *         cdef vec3[float] * environment = self.thisptr.getEnvironment(i).get()
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getMaxNumNeighbors()             # <<<<<<<<<<<<<<
 *         nbins[1] = 3
 *         cdef np.ndarray[float, ndim=2] result = \
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getMaxNumNeighbors());

  /* "freud/environment.pxi":977
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getMaxNumNeighbors()
 *         nbins[1] = 3             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] result = \
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_FLOAT32,
 */
  (__pyx_v_nbins[1]) = 3;

  /* "freud/environment.pxi":979
 *         nbins[1] = 3
 *         cdef np.ndarray[float, ndim=2] result = \
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> environment)
 *         return result
 */
  __pyx_t_2 = PyArray_SimpleNewFromData(2, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_environment)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 979, __pyx_L1_error)
  __pyx_t_3 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_3, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 978, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_3 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "freud/environment.pxi":981
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_FLOAT32,
 *                                          <void*> environment)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/environment.pxi":964
 *         return result
 * 
 *     def getEnvironment(self, i):             # <<<<<<<<<<<<<<
 *         """Returns the set of vectors defining the environment indexed by i.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.MatchEnv.getEnvironment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":984
 * 
 *     @property
 *     def tot_environment(self):             # <<<<<<<<<<<<<<
 *         return self.getTotEnvironment()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_15tot_environment_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_15tot_environment_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_15tot_environment___get__(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_15tot_environment___get__(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":985
 *     @property
 *     def tot_environment(self):
 *         return self.getTotEnvironment()             # <<<<<<<<<<<<<<
 * 
 *     def getTotEnvironment(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getTotEnvironment); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 985, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 985, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":984
 * 
 *     @property
 *     def tot_environment(self):             # <<<<<<<<<<<<<<
 *         return self.getTotEnvironment()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.MatchEnv.tot_environment.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":987
 *         return self.getTotEnvironment()
 * 
 *     def getTotEnvironment(self):             # <<<<<<<<<<<<<<
 *         """Returns the matrix of all environments for all particles.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_21getTotEnvironment(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_20getTotEnvironment[] = "MatchEnv.getTotEnvironment(self)\nReturns the matrix of all environments for all particles.\n\n        Returns:\n            :math:`\\left(N_{particles}, N_{neighbors}, 3\\right)`             :class:`numpy.ndarray`:\n                The array of vectors.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_21getTotEnvironment(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTotEnvironment (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_20getTotEnvironment(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_20getTotEnvironment(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self) {
  vec3<float>  *__pyx_v_tot_environment;
  npy_intp __pyx_v_nbins[3];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getTotEnvironment", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/environment.pxi":996
 *         """
 *         cdef vec3[float] * tot_environment = \
 *             self.thisptr.getTotEnvironment().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[3]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 */
  __pyx_v_tot_environment = __pyx_v_self->thisptr->getTotEnvironment().get();

  /* "freud/environment.pxi":998
 *             self.thisptr.getTotEnvironment().get()
 *         cdef np.npy_intp nbins[3]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         nbins[1] = <np.npy_intp> self.thisptr.getMaxNumNeighbors()
 *         nbins[2] = 3
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNP());

  /* "freud/environment.pxi":999
 *         cdef np.npy_intp nbins[3]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 *         nbins[1] = <np.npy_intp> self.thisptr.getMaxNumNeighbors()             # <<<<<<<<<<<<<<
 *         nbins[2] = 3
 *         cdef np.ndarray[float, ndim=3] result = \
 */
  (__pyx_v_nbins[1]) = ((npy_intp)__pyx_v_self->thisptr->getMaxNumNeighbors());

  /* "freud/environment.pxi":1000
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 *         nbins[1] = <np.npy_intp> self.thisptr.getMaxNumNeighbors()
 *         nbins[2] = 3             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=3] result = \
 *             np.PyArray_SimpleNewFromData(3, nbins, np.NPY_FLOAT32,
 */
  (__pyx_v_nbins[2]) = 3;

  /* "freud/environment.pxi":1002
 *         nbins[2] = 3
 *         cdef np.ndarray[float, ndim=3] result = \
 *             np.PyArray_SimpleNewFromData(3, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> tot_environment)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(3, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_tot_environment)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1002, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 3, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1001, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_result.diminfo[2].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_result.diminfo[2].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[2];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1004
 *             np.PyArray_SimpleNewFromData(3, nbins, np.NPY_FLOAT32,
 *                                          <void*> tot_environment)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/environment.pxi":987
 *         return self.getTotEnvironment()
 * 
 *     def getTotEnvironment(self):             # <<<<<<<<<<<<<<
 *         """Returns the matrix of all environments for all particles.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.MatchEnv.getTotEnvironment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1007
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_13num_particles_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_13num_particles_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_13num_particles___get__(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_13num_particles___get__(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":1008
 *     @property
 *     def num_particles(self):
 *         return self.getNP()             # <<<<<<<<<<<<<<
 * 
 *     def getNP(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNP); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1008, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1008, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1007
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.MatchEnv.num_particles.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1010
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_23getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_22getNP[] = "MatchEnv.getNP(self)\nGet the number of particles.\n\n        Returns:\n            unsigned int: :math:`N_{particles}`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_23getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNP (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_22getNP(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_22getNP(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self) {
  unsigned int __pyx_v_np;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNP", 0);

  /* "freud/environment.pxi":1016
 *             unsigned int: :math:`N_{particles}`.
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         return np
 * 
 */
  __pyx_v_np = __pyx_v_self->thisptr->getNP();

  /* "freud/environment.pxi":1017
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()
 *         return np             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1010
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.MatchEnv.getNP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1020
 * 
 *     @property
 *     def num_clusters(self):             # <<<<<<<<<<<<<<
 *         return self.getNumClusters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_12num_clusters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_12num_clusters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_12num_clusters___get__(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_12num_clusters___get__(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":1021
 *     @property
 *     def num_clusters(self):
 *         return self.getNumClusters()             # <<<<<<<<<<<<<<
 * 
 *     def getNumClusters(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNumClusters); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1021, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1021, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1020
 * 
 *     @property
 *     def num_clusters(self):             # <<<<<<<<<<<<<<
 *         return self.getNumClusters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.MatchEnv.num_clusters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1023
 *         return self.getNumClusters()
 * 
 *     def getNumClusters(self):             # <<<<<<<<<<<<<<
 *         """Get the number of clusters.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_25getNumClusters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_24getNumClusters[] = "MatchEnv.getNumClusters(self)\nGet the number of clusters.\n\n        Returns:\n            unsigned int: :math:`N_{clusters}`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_25getNumClusters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumClusters (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_24getNumClusters(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_24getNumClusters(struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self) {
  unsigned int __pyx_v_num_clust;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNumClusters", 0);

  /* "freud/environment.pxi":1029
 *             unsigned int: :math:`N_{clusters}`.
 *         """
 *         cdef unsigned int num_clust = self.thisptr.getNumClusters()             # <<<<<<<<<<<<<<
 *         return num_clust
 * 
 */
  __pyx_v_num_clust = __pyx_v_self->thisptr->getNumClusters();

  /* "freud/environment.pxi":1030
 *         """
 *         cdef unsigned int num_clust = self.thisptr.getNumClusters()
 *         return num_clust             # <<<<<<<<<<<<<<
 * 
 * cdef class Pairing2D:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_clust); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1023
 *         return self.getNumClusters()
 * 
 *     def getNumClusters(self):             # <<<<<<<<<<<<<<
 *         """Get the number of clusters.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.MatchEnv.getNumClusters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_27__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_26__reduce_cython__[] = "MatchEnv.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_27__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_26__reduce_cython__(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_26__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.MatchEnv.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_29__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_8MatchEnv_28__setstate_cython__[] = "MatchEnv.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_8MatchEnv_29__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_8MatchEnv_28__setstate_cython__(((struct __pyx_obj_5freud_6_freud_MatchEnv *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_8MatchEnv_28__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_MatchEnv *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.MatchEnv.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1061
 *     cdef num_neigh
 * 
 *     def __cinit__(self, rmax, k, compDotTol):             # <<<<<<<<<<<<<<
 *         warnings.warn("This class is deprecated, use freud.bond instead!",
 *                       FreudDeprecationWarning)
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_9Pairing2D_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_9Pairing2D_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_compDotTol = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rmax,&__pyx_n_s_k,&__pyx_n_s_compDotTol,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(1, 1061, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_compDotTol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(1, 1061, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 1061, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_rmax = values[0];
    __pyx_v_k = values[1];
    __pyx_v_compDotTol = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1061, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.Pairing2D.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_9Pairing2D___cinit__(((struct __pyx_obj_5freud_6_freud_Pairing2D *)__pyx_v_self), __pyx_v_rmax, __pyx_v_k, __pyx_v_compDotTol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_9Pairing2D___cinit__(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self, PyObject *__pyx_v_rmax, PyObject *__pyx_v_k, PyObject *__pyx_v_compDotTol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  float __pyx_t_7;
  unsigned int __pyx_t_8;
  float __pyx_t_9;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "freud/environment.pxi":1062
 * 
 *     def __cinit__(self, rmax, k, compDotTol):
 *         warnings.warn("This class is deprecated, use freud.bond instead!",             # <<<<<<<<<<<<<<
 *                       FreudDeprecationWarning)
 *         self.thisptr = new environment.Pairing2D(rmax, k, compDotTol)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warn); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":1063
 *     def __cinit__(self, rmax, k, compDotTol):
 *         warnings.warn("This class is deprecated, use freud.bond instead!",
 *                       FreudDeprecationWarning)             # <<<<<<<<<<<<<<
 *         self.thisptr = new environment.Pairing2D(rmax, k, compDotTol)
 *         self.rmax = rmax
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FreudDeprecationWarning); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_kp_s_This_class_is_deprecated_use_fre, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1062, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_kp_s_This_class_is_deprecated_use_fre, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1062, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_kp_s_This_class_is_deprecated_use_fre);
    __Pyx_GIVEREF(__pyx_kp_s_This_class_is_deprecated_use_fre);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_kp_s_This_class_is_deprecated_use_fre);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":1064
 *         warnings.warn("This class is deprecated, use freud.bond instead!",
 *                       FreudDeprecationWarning)
 *         self.thisptr = new environment.Pairing2D(rmax, k, compDotTol)             # <<<<<<<<<<<<<<
 *         self.rmax = rmax
 *         self.num_neigh = k
 */
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_v_rmax); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1064, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_v_k); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1064, __pyx_L1_error)
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_compDotTol); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1064, __pyx_L1_error)
  __pyx_v_self->thisptr = new freud::environment::Pairing2D(__pyx_t_7, __pyx_t_8, __pyx_t_9);

  /* "freud/environment.pxi":1065
 *                       FreudDeprecationWarning)
 *         self.thisptr = new environment.Pairing2D(rmax, k, compDotTol)
 *         self.rmax = rmax             # <<<<<<<<<<<<<<
 *         self.num_neigh = k
 * 
 */
  __Pyx_INCREF(__pyx_v_rmax);
  __Pyx_GIVEREF(__pyx_v_rmax);
  __Pyx_GOTREF(__pyx_v_self->rmax);
  __Pyx_DECREF(__pyx_v_self->rmax);
  __pyx_v_self->rmax = __pyx_v_rmax;

  /* "freud/environment.pxi":1066
 *         self.thisptr = new environment.Pairing2D(rmax, k, compDotTol)
 *         self.rmax = rmax
 *         self.num_neigh = k             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(__pyx_v_k);
  __Pyx_GIVEREF(__pyx_v_k);
  __Pyx_GOTREF(__pyx_v_self->num_neigh);
  __Pyx_DECREF(__pyx_v_self->num_neigh);
  __pyx_v_self->num_neigh = __pyx_v_k;

  /* "freud/environment.pxi":1061
 *     cdef num_neigh
 * 
 *     def __cinit__(self, rmax, k, compDotTol):             # <<<<<<<<<<<<<<
 *         warnings.warn("This class is deprecated, use freud.bond instead!",
 *                       FreudDeprecationWarning)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("freud._freud.Pairing2D.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1068
 *         self.num_neigh = k
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_9Pairing2D_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_9Pairing2D_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_9Pairing2D_2__dealloc__(((struct __pyx_obj_5freud_6_freud_Pairing2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_9Pairing2D_2__dealloc__(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/environment.pxi":1069
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, box, points, orientations, compOrientations, nlist=None):
 */
  delete __pyx_v_self->thisptr;

  /* "freud/environment.pxi":1068
 *         self.num_neigh = k
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/environment.pxi":1071
 *         del self.thisptr
 * 
 *     def compute(self, box, points, orientations, compOrientations, nlist=None):             # <<<<<<<<<<<<<<
 *         """Calculates the correlation function and adds to the current
 *         histogram.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_5compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_9Pairing2D_4compute[] = "Pairing2D.compute(self, box, points, orientations, compOrientations, nlist=None)\nCalculates the correlation function and adds to the current\n        histogram.\n\n        Args:\n            box (:class:`freud.box.Box`):\n                Simulation box.\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Reference points to calculate the local density.\n            orientations ((:math:`N_{particles}`, 4) :class:`numpy.ndarray`):\n                Orientations to use in computation.\n            compOrientations ((:math:`N_{particles}`, 4)             :class:`numpy.ndarray`):\n                Possible orientations to check for bonds.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_5compute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_orientations = 0;
  PyObject *__pyx_v_compOrientations = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_points,&__pyx_n_s_orientations,&__pyx_n_s_compOrientations,&__pyx_n_s_nlist,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute", 0, 4, 5, 1); __PYX_ERR(1, 1071, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orientations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute", 0, 4, 5, 2); __PYX_ERR(1, 1071, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_compOrientations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute", 0, 4, 5, 3); __PYX_ERR(1, 1071, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute") < 0)) __PYX_ERR(1, 1071, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_points = values[1];
    __pyx_v_orientations = values[2];
    __pyx_v_compOrientations = values[3];
    __pyx_v_nlist = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1071, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.Pairing2D.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_9Pairing2D_4compute(((struct __pyx_obj_5freud_6_freud_Pairing2D *)__pyx_v_self), __pyx_v_box, __pyx_v_points, __pyx_v_orientations, __pyx_v_compOrientations, __pyx_v_nlist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_4compute(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_points, PyObject *__pyx_v_orientations, PyObject *__pyx_v_compOrientations, PyObject *__pyx_v_nlist) {
  PyArrayObject *__pyx_v_l_points = 0;
  PyArrayObject *__pyx_v_l_compOrientations = 0;
  PyArrayObject *__pyx_v_l_orientations = 0;
  unsigned int __pyx_v_nP;
  unsigned int __pyx_v_nO;
  freud::box::Box __pyx_v_l_box;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_compOrientations;
  __Pyx_Buffer __pyx_pybuffer_l_compOrientations;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_orientations;
  __Pyx_Buffer __pyx_pybuffer_l_orientations;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_points;
  __Pyx_Buffer __pyx_pybuffer_l_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  float __pyx_t_13;
  bool __pyx_t_14;
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("compute", 0);
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_INCREF(__pyx_v_orientations);
  __Pyx_INCREF(__pyx_v_compOrientations);
  __pyx_pybuffer_l_points.pybuffer.buf = NULL;
  __pyx_pybuffer_l_points.refcount = 0;
  __pyx_pybuffernd_l_points.data = NULL;
  __pyx_pybuffernd_l_points.rcbuffer = &__pyx_pybuffer_l_points;
  __pyx_pybuffer_l_compOrientations.pybuffer.buf = NULL;
  __pyx_pybuffer_l_compOrientations.refcount = 0;
  __pyx_pybuffernd_l_compOrientations.data = NULL;
  __pyx_pybuffernd_l_compOrientations.rcbuffer = &__pyx_pybuffer_l_compOrientations;
  __pyx_pybuffer_l_orientations.pybuffer.buf = NULL;
  __pyx_pybuffer_l_orientations.refcount = 0;
  __pyx_pybuffernd_l_orientations.data = NULL;
  __pyx_pybuffernd_l_orientations.rcbuffer = &__pyx_pybuffer_l_orientations;

  /* "freud/environment.pxi":1088
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1088, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1088, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1088, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1088, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1088, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1089
 *         """
 *         box = freud.common.convert_box(box)
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":1090
 *         box = freud.common.convert_box(box)
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1090, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 1090, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(1, 1090, __pyx_L1_error)

  /* "freud/environment.pxi":1089
 *         """
 *         box = freud.common.convert_box(box)
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":1091
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1091, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1091, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":1092
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         orientations = freud.common.convert_array(
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1092, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 1092, __pyx_L1_error)

    /* "freud/environment.pxi":1091
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":1094
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             orientations, 1, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_common); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/environment.pxi":1095
 * 
 *         orientations = freud.common.convert_array(
 *             orientations, 1, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="orientations")
 * 
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_orientations);
  __Pyx_GIVEREF(__pyx_v_orientations);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_orientations);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(1, 1095, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 1095, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_array_name, __pyx_n_s_orientations) < 0) __PYX_ERR(1, 1095, __pyx_L1_error)

  /* "freud/environment.pxi":1094
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         orientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             orientations, 1, dtype=np.float32, contiguous=True,
 *             array_name="orientations")
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_orientations, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/environment.pxi":1098
 *             array_name="orientations")
 * 
 *         compOrientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             compOrientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="compOrientations")
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":1099
 * 
 *         compOrientations = freud.common.convert_array(
 *             compOrientations, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="compOrientations")
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_compOrientations);
  __Pyx_GIVEREF(__pyx_v_compOrientations);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_compOrientations);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(1, 1099, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 1099, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_array_name, __pyx_n_s_compOrientations) < 0) __PYX_ERR(1, 1099, __pyx_L1_error)

  /* "freud/environment.pxi":1098
 *             array_name="orientations")
 * 
 *         compOrientations = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             compOrientations, 2, dtype=np.float32, contiguous=True,
 *             array_name="compOrientations")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_compOrientations, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1102
 *             array_name="compOrientations")
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_compOrientations = compOrientations
 *         cdef np.ndarray[float, ndim=1] l_orientations = orientations
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1102, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_points = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_points.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1102, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_points.diminfo[0].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_points.diminfo[0].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_points.diminfo[1].strides = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_points.diminfo[1].shape = __pyx_pybuffernd_l_points.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_points = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1103
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef np.ndarray[float, ndim=2] l_compOrientations = compOrientations             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=1] l_orientations = orientations
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
  if (!(likely(((__pyx_v_compOrientations) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_compOrientations, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1103, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_compOrientations;
  __Pyx_INCREF(__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_compOrientations.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_compOrientations = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_compOrientations.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1103, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_compOrientations.diminfo[0].strides = __pyx_pybuffernd_l_compOrientations.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_compOrientations.diminfo[0].shape = __pyx_pybuffernd_l_compOrientations.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_compOrientations.diminfo[1].strides = __pyx_pybuffernd_l_compOrientations.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_compOrientations.diminfo[1].shape = __pyx_pybuffernd_l_compOrientations.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_compOrientations = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1104
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef np.ndarray[float, ndim=2] l_compOrientations = compOrientations
 *         cdef np.ndarray[float, ndim=1] l_orientations = orientations             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         cdef unsigned int nO = <unsigned int> compOrientations.shape[1]
 */
  if (!(likely(((__pyx_v_orientations) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_orientations, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1104, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_orientations;
  __Pyx_INCREF(__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_l_orientations = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1104, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_orientations.diminfo[0].strides = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_orientations.diminfo[0].shape = __pyx_pybuffernd_l_orientations.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_l_orientations = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1105
 *         cdef np.ndarray[float, ndim=2] l_compOrientations = compOrientations
 *         cdef np.ndarray[float, ndim=1] l_orientations = orientations
 *         cdef unsigned int nP = <unsigned int> points.shape[0]             # <<<<<<<<<<<<<<
 *         cdef unsigned int nO = <unsigned int> compOrientations.shape[1]
 *         cdef _box.Box l_box = _box.Box(
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_7);

  /* "freud/environment.pxi":1106
 *         cdef np.ndarray[float, ndim=1] l_orientations = orientations
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         cdef unsigned int nO = <unsigned int> compOrientations.shape[1]             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_compOrientations, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nO = ((unsigned int)__pyx_t_7);

  /* "freud/environment.pxi":1108
 *         cdef unsigned int nO = <unsigned int> compOrientations.shape[1]
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1108, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1108, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1108, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1108, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":1109
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1109, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1109, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1109, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_14 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":1107
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 *         cdef unsigned int nO = <unsigned int> compOrientations.shape[1]
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14);

  /* "freud/environment.pxi":1111
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 * 
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "freud/environment.pxi":1112
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[8] = {__pyx_t_2, __pyx_v_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->rmax};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_15, 7+__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1111, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[8] = {__pyx_t_2, __pyx_v_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_True, __pyx_v_self->rmax};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_15, 7+__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1111, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(7+__pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_box);
    __Pyx_GIVEREF(__pyx_v_box);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_15, __pyx_v_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_15, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_15, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_15, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_15, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_3, 5+__pyx_t_15, Py_True);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_3, 6+__pyx_t_15, __pyx_v_self->rmax);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1113
 *         defaulted_nlist = make_default_nlist_nn(
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(1, 1113, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1114
 *             box, points, points, self.num_neigh, nlist, True, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.compute(
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/environment.pxi":1116
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         self.thisptr.compute(             # <<<<<<<<<<<<<<
 *             l_box, nlist_ptr, <vec3[float]*> l_points.data,
 *             <float*> l_orientations.data, <float*> l_compOrientations.data,
 */
  try {
    __pyx_v_self->thisptr->compute(__pyx_v_l_box, __pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_l_points->data), ((float *)__pyx_v_l_orientations->data), ((float *)__pyx_v_l_compOrientations->data), __pyx_v_nP, __pyx_v_nO);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1116, __pyx_L1_error)
  }

  /* "freud/environment.pxi":1120
 *             <float*> l_orientations.data, <float*> l_compOrientations.data,
 *             nP, nO)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/environment.pxi":1071
 *         del self.thisptr
 * 
 *     def compute(self, box, points, orientations, compOrientations, nlist=None):             # <<<<<<<<<<<<<<
 *         """Calculates the correlation function and adds to the current
 *         histogram.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_compOrientations.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.Pairing2D.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_compOrientations.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_orientations.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_compOrientations);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_orientations);
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_orientations);
  __Pyx_XDECREF(__pyx_v_compOrientations);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1123
 * 
 *     @property
 *     def match(self):             # <<<<<<<<<<<<<<
 *         return self.getMatch()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_5match_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_5match_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9Pairing2D_5match___get__(((struct __pyx_obj_5freud_6_freud_Pairing2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_5match___get__(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":1124
 *     @property
 *     def match(self):
 *         return self.getMatch()             # <<<<<<<<<<<<<<
 * 
 *     def getMatch(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getMatch); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1124, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1124, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1123
 * 
 *     @property
 *     def match(self):             # <<<<<<<<<<<<<<
 *         return self.getMatch()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.Pairing2D.match.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1126
 *         return self.getMatch()
 * 
 *     def getMatch(self):             # <<<<<<<<<<<<<<
 *         """Get the match.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_7getMatch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9Pairing2D_6getMatch[] = "Pairing2D.getMatch(self)\nGet the match.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                The match.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_7getMatch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMatch (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9Pairing2D_6getMatch(((struct __pyx_obj_5freud_6_freud_Pairing2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_6getMatch(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self) {
  unsigned int *__pyx_v_match;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getMatch", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/environment.pxi":1133
 *                 The match.
 *         """
 *         cdef unsigned int * match = self.thisptr.getMatch().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 */
  __pyx_v_match = __pyx_v_self->thisptr->getMatch().get();

  /* "freud/environment.pxi":1135
 *         cdef unsigned int * match = self.thisptr.getMatch().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNumParticles());

  /* "freud/environment.pxi":1137
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,             # <<<<<<<<<<<<<<
 *                                          <void*> match)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_UINT32, ((void *)__pyx_v_match)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1137, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1136, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1139
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32,
 *                                          <void*> match)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/environment.pxi":1126
 *         return self.getMatch()
 * 
 *     def getMatch(self):             # <<<<<<<<<<<<<<
 *         """Get the match.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.Pairing2D.getMatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1142
 * 
 *     @property
 *     def pair(self):             # <<<<<<<<<<<<<<
 *         return self.getPair()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_4pair_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_4pair_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9Pairing2D_4pair___get__(((struct __pyx_obj_5freud_6_freud_Pairing2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_4pair___get__(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":1143
 *     @property
 *     def pair(self):
 *         return self.getPair()             # <<<<<<<<<<<<<<
 * 
 *     def getPair(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPair); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1143, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1142
 * 
 *     @property
 *     def pair(self):             # <<<<<<<<<<<<<<
 *         return self.getPair()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.Pairing2D.pair.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1145
 *         return self.getPair()
 * 
 *     def getPair(self):             # <<<<<<<<<<<<<<
 *         """Get the pair.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_9getPair(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9Pairing2D_8getPair[] = "Pairing2D.getPair(self)\nGet the pair.\n\n        Returns:\n            :math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`:\n                The pair.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_9getPair(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPair (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9Pairing2D_8getPair(((struct __pyx_obj_5freud_6_freud_Pairing2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_8getPair(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self) {
  unsigned int *__pyx_v_pair;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getPair", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/environment.pxi":1152
 *                 The pair.
 *         """
 *         cdef unsigned int * pair = self.thisptr.getPair().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 */
  __pyx_v_pair = __pyx_v_self->thisptr->getPair().get();

  /* "freud/environment.pxi":1154
 *         cdef unsigned int * pair = self.thisptr.getPair().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32, <void*> pair)
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNumParticles());

  /* "freud/environment.pxi":1156
 *         nbins[0] = <np.npy_intp> self.thisptr.getNumParticles()
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32, <void*> pair)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_UINT32, ((void *)__pyx_v_pair)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1156, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1155, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1157
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_UINT32, <void*> pair)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/environment.pxi":1145
 *         return self.getPair()
 * 
 *     def getPair(self):             # <<<<<<<<<<<<<<
 *         """Get the pair.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.Pairing2D.getPair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1160
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_3box_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_3box_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9Pairing2D_3box___get__(((struct __pyx_obj_5freud_6_freud_Pairing2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_3box___get__(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":1161
 *     @property
 *     def box(self):
 *         return self.getBox()             # <<<<<<<<<<<<<<
 * 
 *     def getBox(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getBox); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1161, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1161, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1160
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.Pairing2D.box.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1163
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_11getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9Pairing2D_10getBox[] = "Pairing2D.getBox(self)\nGet the box used in the calculation.\n\n        Returns:\n            :class:`freud.box.Box`: freud Box.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_11getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBox (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9Pairing2D_10getBox(((struct __pyx_obj_5freud_6_freud_Pairing2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_10getBox(struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getBox", 0);

  /* "freud/environment.pxi":1169
 *             :class:`freud.box.Box`: freud Box.
 *         """
 *         return BoxFromCPP(< _box.Box > self.thisptr.getBox())             # <<<<<<<<<<<<<<
 * 
 * cdef class AngularSeparation:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5freud_3box_BoxFromCPP(((freud::box::Box)__pyx_v_self->thisptr->getBox())); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1163
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Get the box used in the calculation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.Pairing2D.getBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_9Pairing2D_12__reduce_cython__[] = "Pairing2D.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9Pairing2D_12__reduce_cython__(((struct __pyx_obj_5freud_6_freud_Pairing2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.Pairing2D.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_9Pairing2D_14__setstate_cython__[] = "Pairing2D.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_9Pairing2D_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_9Pairing2D_14__setstate_cython__(((struct __pyx_obj_5freud_6_freud_Pairing2D *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_9Pairing2D_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_Pairing2D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.Pairing2D.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1201
 *     cdef nlist_
 * 
 *     def __cinit__(self, rmax, n):             # <<<<<<<<<<<<<<
 *         self.thisptr = new environment.AngularSeparation()
 *         self.rmax = rmax
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_17AngularSeparation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_17AngularSeparation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rmax = 0;
  PyObject *__pyx_v_n = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rmax,&__pyx_n_s_n,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rmax)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(1, 1201, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 1201, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_rmax = values[0];
    __pyx_v_n = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1201, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.AngularSeparation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation___cinit__(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self), __pyx_v_rmax, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_17AngularSeparation___cinit__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self, PyObject *__pyx_v_rmax, PyObject *__pyx_v_n) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "freud/environment.pxi":1202
 * 
 *     def __cinit__(self, rmax, n):
 *         self.thisptr = new environment.AngularSeparation()             # <<<<<<<<<<<<<<
 *         self.rmax = rmax
 *         self.num_neigh = int(n)
 */
  __pyx_v_self->thisptr = new freud::environment::AngularSeparation();

  /* "freud/environment.pxi":1203
 *     def __cinit__(self, rmax, n):
 *         self.thisptr = new environment.AngularSeparation()
 *         self.rmax = rmax             # <<<<<<<<<<<<<<
 *         self.num_neigh = int(n)
 *         self.nlist_ = None
 */
  __Pyx_INCREF(__pyx_v_rmax);
  __Pyx_GIVEREF(__pyx_v_rmax);
  __Pyx_GOTREF(__pyx_v_self->rmax);
  __Pyx_DECREF(__pyx_v_self->rmax);
  __pyx_v_self->rmax = __pyx_v_rmax;

  /* "freud/environment.pxi":1204
 *         self.thisptr = new environment.AngularSeparation()
 *         self.rmax = rmax
 *         self.num_neigh = int(n)             # <<<<<<<<<<<<<<
 *         self.nlist_ = None
 * 
 */
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->num_neigh);
  __Pyx_DECREF(__pyx_v_self->num_neigh);
  __pyx_v_self->num_neigh = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1205
 *         self.rmax = rmax
 *         self.num_neigh = int(n)
 *         self.nlist_ = None             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->nlist_);
  __Pyx_DECREF(__pyx_v_self->nlist_);
  __pyx_v_self->nlist_ = Py_None;

  /* "freud/environment.pxi":1201
 *     cdef nlist_
 * 
 *     def __cinit__(self, rmax, n):             # <<<<<<<<<<<<<<
 *         self.thisptr = new environment.AngularSeparation()
 *         self.rmax = rmax
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.AngularSeparation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1207
 *         self.nlist_ = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_17AngularSeparation_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_17AngularSeparation_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_17AngularSeparation_2__dealloc__(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_17AngularSeparation_2__dealloc__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/environment.pxi":1208
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "freud/environment.pxi":1207
 *         self.nlist_ = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/environment.pxi":1211
 * 
 *     @property
 *     def nlist(self):             # <<<<<<<<<<<<<<
 *         return self.nlist_
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_5nlist_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_5nlist_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_5nlist___get__(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_5nlist___get__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":1212
 *     @property
 *     def nlist(self):
 *         return self.nlist_             # <<<<<<<<<<<<<<
 * 
 *     def computeNeighbor(self, box, ref_ors, ors, ref_points, points,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->nlist_);
  __pyx_r = __pyx_v_self->nlist_;
  goto __pyx_L0;

  /* "freud/environment.pxi":1211
 * 
 *     @property
 *     def nlist(self):             # <<<<<<<<<<<<<<
 *         return self.nlist_
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1214
 *         return self.nlist_
 * 
 *     def computeNeighbor(self, box, ref_ors, ors, ref_points, points,             # <<<<<<<<<<<<<<
 *                         equiv_quats, nlist=None):
 *         """Calculates the minimum angles of separation between ref_ors and ors,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_5computeNeighbor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_17AngularSeparation_4computeNeighbor[] = "AngularSeparation.computeNeighbor(self, box, ref_ors, ors, ref_points, points, equiv_quats, nlist=None)\nCalculates the minimum angles of separation between ref_ors and ors,\n        checking for underlying symmetry as encoded in equiv_quats.\n\n        Args:\n            box (:class:`freud.box.Box`):\n                Simulation box.\n            orientations ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Orientations to calculate the order parameter.\n            ref_orientations ((:math:`N_{particles}`, 4)             :class:`numpy.ndarray`):\n                Reference orientations to calculate the order parameter.\n            ref_points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Reference points to calculate the order parameter.\n            points ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Points to calculate the order parameter.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                NeighborList to use to find bonds (Default value = None).\n            equiv_quats ((:math:`N_{particles}`, 4) :class:`numpy.ndarray`,             optional):\n                The set of all equivalent quaternions that takes the particle\n                as it is defined to some global reference orientation.\n                Important: :code:`equiv_quats` must include both :math:`q` and\n                :math:`-q`, for all included quaternions.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Neighborlist to use to find bonds (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_5computeNeighbor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_v_ref_ors = 0;
  PyObject *__pyx_v_ors = 0;
  PyObject *__pyx_v_ref_points = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_equiv_quats = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeNeighbor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_ref_ors,&__pyx_n_s_ors,&__pyx_n_s_ref_points,&__pyx_n_s_points,&__pyx_n_s_equiv_quats,&__pyx_n_s_nlist,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};

    /* "freud/environment.pxi":1215
 * 
 *     def computeNeighbor(self, box, ref_ors, ors, ref_points, points,
 *                         equiv_quats, nlist=None):             # <<<<<<<<<<<<<<
 *         """Calculates the minimum angles of separation between ref_ors and ors,
 *         checking for underlying symmetry as encoded in equiv_quats.
 */
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ref_ors)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("computeNeighbor", 0, 6, 7, 1); __PYX_ERR(1, 1214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ors)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("computeNeighbor", 0, 6, 7, 2); __PYX_ERR(1, 1214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ref_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("computeNeighbor", 0, 6, 7, 3); __PYX_ERR(1, 1214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("computeNeighbor", 0, 6, 7, 4); __PYX_ERR(1, 1214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_equiv_quats)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("computeNeighbor", 0, 6, 7, 5); __PYX_ERR(1, 1214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeNeighbor") < 0)) __PYX_ERR(1, 1214, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_box = values[0];
    __pyx_v_ref_ors = values[1];
    __pyx_v_ors = values[2];
    __pyx_v_ref_points = values[3];
    __pyx_v_points = values[4];
    __pyx_v_equiv_quats = values[5];
    __pyx_v_nlist = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeNeighbor", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1214, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.AngularSeparation.computeNeighbor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_4computeNeighbor(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self), __pyx_v_box, __pyx_v_ref_ors, __pyx_v_ors, __pyx_v_ref_points, __pyx_v_points, __pyx_v_equiv_quats, __pyx_v_nlist);

  /* "freud/environment.pxi":1214
 *         return self.nlist_
 * 
 *     def computeNeighbor(self, box, ref_ors, ors, ref_points, points,             # <<<<<<<<<<<<<<
 *                         equiv_quats, nlist=None):
 *         """Calculates the minimum angles of separation between ref_ors and ors,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_4computeNeighbor(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self, PyObject *__pyx_v_box, PyObject *__pyx_v_ref_ors, PyObject *__pyx_v_ors, PyObject *__pyx_v_ref_points, PyObject *__pyx_v_points, PyObject *__pyx_v_equiv_quats, PyObject *__pyx_v_nlist) {
  CYTHON_UNUSED freud::box::Box __pyx_v_l_box;
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  PyArrayObject *__pyx_v_l_ref_ors = 0;
  PyArrayObject *__pyx_v_l_ors = 0;
  PyArrayObject *__pyx_v_l_equiv_quats = 0;
  unsigned int __pyx_v_nRef;
  unsigned int __pyx_v_nP;
  unsigned int __pyx_v_nEquiv;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_equiv_quats;
  __Pyx_Buffer __pyx_pybuffer_l_equiv_quats;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_ors;
  __Pyx_Buffer __pyx_pybuffer_l_ors;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_ref_ors;
  __Pyx_Buffer __pyx_pybuffer_l_ref_ors;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  bool __pyx_t_13;
  int __pyx_t_14;
  unsigned int __pyx_t_15;
  __Pyx_RefNannySetupContext("computeNeighbor", 0);
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_INCREF(__pyx_v_ref_ors);
  __Pyx_INCREF(__pyx_v_ors);
  __Pyx_INCREF(__pyx_v_ref_points);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_INCREF(__pyx_v_equiv_quats);
  __pyx_pybuffer_l_ref_ors.pybuffer.buf = NULL;
  __pyx_pybuffer_l_ref_ors.refcount = 0;
  __pyx_pybuffernd_l_ref_ors.data = NULL;
  __pyx_pybuffernd_l_ref_ors.rcbuffer = &__pyx_pybuffer_l_ref_ors;
  __pyx_pybuffer_l_ors.pybuffer.buf = NULL;
  __pyx_pybuffer_l_ors.refcount = 0;
  __pyx_pybuffernd_l_ors.data = NULL;
  __pyx_pybuffernd_l_ors.rcbuffer = &__pyx_pybuffer_l_ors;
  __pyx_pybuffer_l_equiv_quats.pybuffer.buf = NULL;
  __pyx_pybuffer_l_equiv_quats.refcount = 0;
  __pyx_pybuffernd_l_equiv_quats.data = NULL;
  __pyx_pybuffernd_l_equiv_quats.rcbuffer = &__pyx_pybuffer_l_equiv_quats;

  /* "freud/environment.pxi":1242
 *                 Neighborlist to use to find bonds (Default value = None).
 *         """
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         ref_points = freud.common.convert_array(
 *             ref_points, 2, dtype=np.float32, contiguous=True,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1242, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1242, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1243
 *         """
 *         box = freud.common.convert_box(box)
 *         ref_points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ref_points, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_points")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":1244
 *         box = freud.common.convert_box(box)
 *         ref_points = freud.common.convert_array(
 *             ref_points, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="ref_points")
 *         if ref_points.shape[1] != 3:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_ref_points);
  __Pyx_GIVEREF(__pyx_v_ref_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ref_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 1244, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_array_name, __pyx_n_s_ref_points) < 0) __PYX_ERR(1, 1244, __pyx_L1_error)

  /* "freud/environment.pxi":1243
 *         """
 *         box = freud.common.convert_box(box)
 *         ref_points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ref_points, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_points")
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_ref_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":1246
 *             ref_points, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_points")
 *         if ref_points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('ref_points should be an Nx3 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":1247
 *             array_name="ref_points")
 *         if ref_points.shape[1] != 3:
 *             raise TypeError('ref_points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         points = freud.common.convert_array(
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 1247, __pyx_L1_error)

    /* "freud/environment.pxi":1246
 *             ref_points, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_points")
 *         if ref_points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('ref_points should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":1249
 *             raise TypeError('ref_points should be an Nx3 array')
 * 
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_common); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/environment.pxi":1250
 * 
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(1, 1250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 1250, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_array_name, __pyx_n_s_points) < 0) __PYX_ERR(1, 1250, __pyx_L1_error)

  /* "freud/environment.pxi":1249
 *             raise TypeError('ref_points should be an Nx3 array')
 * 
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/environment.pxi":1251
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":1252
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         ref_ors = freud.common.convert_array(
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1252, __pyx_L1_error)

    /* "freud/environment.pxi":1251
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('points should be an Nx3 array')
 * 
 */
  }

  /* "freud/environment.pxi":1254
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         ref_ors = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ref_ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_ors")
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":1255
 * 
 *         ref_ors = freud.common.convert_array(
 *             ref_ors, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="ref_ors")
 *         if ref_ors.shape[1] != 4:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_ref_ors);
  __Pyx_GIVEREF(__pyx_v_ref_ors);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ref_ors);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 1255, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_array_name, __pyx_n_s_ref_ors) < 0) __PYX_ERR(1, 1255, __pyx_L1_error)

  /* "freud/environment.pxi":1254
 *             raise TypeError('points should be an Nx3 array')
 * 
 *         ref_ors = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ref_ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_ors")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_ref_ors, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1257
 *             ref_ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_ors")
 *         if ref_ors.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('ref_ors should be an Nx4 array')
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref_ors, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":1258
 *             array_name="ref_ors")
 *         if ref_ors.shape[1] != 4:
 *             raise TypeError('ref_ors should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         ors = freud.common.convert_array(
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1258, __pyx_L1_error)

    /* "freud/environment.pxi":1257
 *             ref_ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="ref_ors")
 *         if ref_ors.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('ref_ors should be an Nx4 array')
 * 
 */
  }

  /* "freud/environment.pxi":1260
 *             raise TypeError('ref_ors should be an Nx4 array')
 * 
 *         ors = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ors, 2, dtype=np.float32, contiguous=True, array_name="ors")
 *         if ors.shape[1] != 4:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/environment.pxi":1261
 * 
 *         ors = freud.common.convert_array(
 *             ors, 2, dtype=np.float32, contiguous=True, array_name="ors")             # <<<<<<<<<<<<<<
 *         if ors.shape[1] != 4:
 *             raise TypeError('ors should be an Nx4 array')
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_ors);
  __Pyx_GIVEREF(__pyx_v_ors);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_ors);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 1261, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_array_name, __pyx_n_s_ors) < 0) __PYX_ERR(1, 1261, __pyx_L1_error)

  /* "freud/environment.pxi":1260
 *             raise TypeError('ref_ors should be an Nx4 array')
 * 
 *         ors = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ors, 2, dtype=np.float32, contiguous=True, array_name="ors")
 *         if ors.shape[1] != 4:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_ors, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":1262
 *         ors = freud.common.convert_array(
 *             ors, 2, dtype=np.float32, contiguous=True, array_name="ors")
 *         if ors.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('ors should be an Nx4 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ors, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":1263
 *             ors, 2, dtype=np.float32, contiguous=True, array_name="ors")
 *         if ors.shape[1] != 4:
 *             raise TypeError('ors should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         equiv_quats = freud.common.convert_array(
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 1263, __pyx_L1_error)

    /* "freud/environment.pxi":1262
 *         ors = freud.common.convert_array(
 *             ors, 2, dtype=np.float32, contiguous=True, array_name="ors")
 *         if ors.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('ors should be an Nx4 array')
 * 
 */
  }

  /* "freud/environment.pxi":1265
 *             raise TypeError('ors should be an Nx4 array')
 * 
 *         equiv_quats = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             equiv_quats, 2, dtype=np.float32, contiguous=True,
 *             array_name="equiv_quats")
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":1266
 * 
 *         equiv_quats = freud.common.convert_array(
 *             equiv_quats, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="equiv_quats")
 *         if equiv_quats.shape[1] != 4:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_equiv_quats);
  __Pyx_GIVEREF(__pyx_v_equiv_quats);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_equiv_quats);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 1266, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_array_name, __pyx_n_s_equiv_quats) < 0) __PYX_ERR(1, 1266, __pyx_L1_error)

  /* "freud/environment.pxi":1265
 *             raise TypeError('ors should be an Nx4 array')
 * 
 *         equiv_quats = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             equiv_quats, 2, dtype=np.float32, contiguous=True,
 *             array_name="equiv_quats")
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_equiv_quats, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/environment.pxi":1268
 *             equiv_quats, 2, dtype=np.float32, contiguous=True,
 *             array_name="equiv_quats")
 *         if equiv_quats.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('equiv_quats should be an N_equiv x 4 array')
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_equiv_quats, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":1269
 *             array_name="equiv_quats")
 *         if equiv_quats.shape[1] != 4:
 *             raise TypeError('equiv_quats should be an N_equiv x 4 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef _box.Box l_box = _box.Box(
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1269, __pyx_L1_error)

    /* "freud/environment.pxi":1268
 *             equiv_quats, 2, dtype=np.float32, contiguous=True,
 *             array_name="equiv_quats")
 *         if equiv_quats.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('equiv_quats should be an N_equiv x 4 array')
 * 
 */
  }

  /* "freud/environment.pxi":1272
 * 
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1272, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1272, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1272, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1272, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":1273
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1273, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1273, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1273, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1273, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1273, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1273, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":1271
 *             raise TypeError('equiv_quats should be an N_equiv x 4 array')
 * 
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13);

  /* "freud/environment.pxi":1275
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 * 
 *         defaulted_nlist = make_default_nlist_nn(             # <<<<<<<<<<<<<<
 *             box, ref_points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "freud/environment.pxi":1276
 * 
 *         defaulted_nlist = make_default_nlist_nn(
 *             box, ref_points, points, self.num_neigh, nlist, None, self.rmax)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_14 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_14 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[8] = {__pyx_t_2, __pyx_v_box, __pyx_v_ref_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_None, __pyx_v_self->rmax};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_14, 7+__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1275, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[8] = {__pyx_t_2, __pyx_v_box, __pyx_v_ref_points, __pyx_v_points, __pyx_v_self->num_neigh, __pyx_v_nlist, Py_None, __pyx_v_self->rmax};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_14, 7+__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1275, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_box);
    __Pyx_GIVEREF(__pyx_v_box);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_14, __pyx_v_box);
    __Pyx_INCREF(__pyx_v_ref_points);
    __Pyx_GIVEREF(__pyx_v_ref_points);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_14, __pyx_v_ref_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_14, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->num_neigh);
    __Pyx_GIVEREF(__pyx_v_self->num_neigh);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_14, __pyx_v_self->num_neigh);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_14, __pyx_v_nlist);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_14, Py_None);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_14, __pyx_v_self->rmax);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "freud/environment.pxi":1277
 *         defaulted_nlist = make_default_nlist_nn(
 *             box, ref_points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 *         self.nlist_ = nlist_
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(1, 1277, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/environment.pxi":1278
 *             box, ref_points, points, self.num_neigh, nlist, None, self.rmax)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 *         self.nlist_ = nlist_
 * 
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/environment.pxi":1279
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 *         self.nlist_ = nlist_             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_ref_ors = ref_ors
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_nlist_));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_nlist_));
  __Pyx_GOTREF(__pyx_v_self->nlist_);
  __Pyx_DECREF(__pyx_v_self->nlist_);
  __pyx_v_self->nlist_ = ((PyObject *)__pyx_v_nlist_);

  /* "freud/environment.pxi":1281
 *         self.nlist_ = nlist_
 * 
 *         cdef np.ndarray[float, ndim=2] l_ref_ors = ref_ors             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_ors = ors
 *         cdef np.ndarray[float, ndim=2] l_equiv_quats = equiv_quats
 */
  if (!(likely(((__pyx_v_ref_ors) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ref_ors, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1281, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_ref_ors;
  __Pyx_INCREF(__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_ref_ors.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_3), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_ref_ors = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_ref_ors.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1281, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_ref_ors.diminfo[0].strides = __pyx_pybuffernd_l_ref_ors.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_ref_ors.diminfo[0].shape = __pyx_pybuffernd_l_ref_ors.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_ref_ors.diminfo[1].strides = __pyx_pybuffernd_l_ref_ors.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_ref_ors.diminfo[1].shape = __pyx_pybuffernd_l_ref_ors.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_ref_ors = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/environment.pxi":1282
 * 
 *         cdef np.ndarray[float, ndim=2] l_ref_ors = ref_ors
 *         cdef np.ndarray[float, ndim=2] l_ors = ors             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_equiv_quats = equiv_quats
 * 
 */
  if (!(likely(((__pyx_v_ors) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ors, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1282, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_ors;
  __Pyx_INCREF(__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_ors.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_3), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_ors = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_ors.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1282, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_ors.diminfo[0].strides = __pyx_pybuffernd_l_ors.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_ors.diminfo[0].shape = __pyx_pybuffernd_l_ors.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_ors.diminfo[1].strides = __pyx_pybuffernd_l_ors.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_ors.diminfo[1].shape = __pyx_pybuffernd_l_ors.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_ors = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/environment.pxi":1283
 *         cdef np.ndarray[float, ndim=2] l_ref_ors = ref_ors
 *         cdef np.ndarray[float, ndim=2] l_ors = ors
 *         cdef np.ndarray[float, ndim=2] l_equiv_quats = equiv_quats             # <<<<<<<<<<<<<<
 * 
 *         cdef unsigned int nRef = <unsigned int> ref_ors.shape[0]
 */
  if (!(likely(((__pyx_v_equiv_quats) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_equiv_quats, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1283, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_equiv_quats;
  __Pyx_INCREF(__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_3), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_equiv_quats = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1283, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_equiv_quats.diminfo[0].strides = __pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_equiv_quats.diminfo[0].shape = __pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_equiv_quats.diminfo[1].strides = __pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_equiv_quats.diminfo[1].shape = __pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_equiv_quats = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "freud/environment.pxi":1285
 *         cdef np.ndarray[float, ndim=2] l_equiv_quats = equiv_quats
 * 
 *         cdef unsigned int nRef = <unsigned int> ref_ors.shape[0]             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> ors.shape[0]
 *         cdef unsigned int nEquiv = <unsigned int> equiv_quats.shape[0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref_ors, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_15 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_15 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_nRef = ((unsigned int)__pyx_t_15);

  /* "freud/environment.pxi":1286
 * 
 *         cdef unsigned int nRef = <unsigned int> ref_ors.shape[0]
 *         cdef unsigned int nP = <unsigned int> ors.shape[0]             # <<<<<<<<<<<<<<
 *         cdef unsigned int nEquiv = <unsigned int> equiv_quats.shape[0]
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ors, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_15 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_15 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_15);

  /* "freud/environment.pxi":1287
 *         cdef unsigned int nRef = <unsigned int> ref_ors.shape[0]
 *         cdef unsigned int nP = <unsigned int> ors.shape[0]
 *         cdef unsigned int nEquiv = <unsigned int> equiv_quats.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_equiv_quats, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_15 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_15 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_nEquiv = ((unsigned int)__pyx_t_15);

  /* "freud/environment.pxi":1289
 *         cdef unsigned int nEquiv = <unsigned int> equiv_quats.shape[0]
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeNeighbor(
 *                 nlist_ptr,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/environment.pxi":1290
 * 
 *         with nogil:
 *             self.thisptr.computeNeighbor(             # <<<<<<<<<<<<<<
 *                 nlist_ptr,
 *                 <quat[float]*> l_ref_ors.data,
 */
        try {
          __pyx_v_self->thisptr->computeNeighbor(__pyx_v_nlist_ptr, ((quat<float>  *)__pyx_v_l_ref_ors->data), ((quat<float>  *)__pyx_v_l_ors->data), ((quat<float>  *)__pyx_v_l_equiv_quats->data), __pyx_v_nRef, __pyx_v_nP, __pyx_v_nEquiv);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 1290, __pyx_L9_error)
        }
      }

      /* "freud/environment.pxi":1289
 *         cdef unsigned int nEquiv = <unsigned int> equiv_quats.shape[0]
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeNeighbor(
 *                 nlist_ptr,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L10;
        }
        __pyx_L9_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L10:;
      }
  }

  /* "freud/environment.pxi":1296
 *                 <quat[float]*> l_equiv_quats.data,
 *                 nRef, nP, nEquiv)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def computeGlobal(self, global_ors, ors, equiv_quats):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/environment.pxi":1214
 *         return self.nlist_
 * 
 *     def computeNeighbor(self, box, ref_ors, ors, ref_points, points,             # <<<<<<<<<<<<<<
 *                         equiv_quats, nlist=None):
 *         """Calculates the minimum angles of separation between ref_ors and ors,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_ors.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_ref_ors.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.AngularSeparation.computeNeighbor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_ors.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_ref_ors.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_ref_ors);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_ors);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_equiv_quats);
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XDECREF(__pyx_v_ref_ors);
  __Pyx_XDECREF(__pyx_v_ors);
  __Pyx_XDECREF(__pyx_v_ref_points);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_equiv_quats);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1298
 *         return self
 * 
 *     def computeGlobal(self, global_ors, ors, equiv_quats):             # <<<<<<<<<<<<<<
 *         """Calculates the minimum angles of separation between global_ors and
 *         ors, checking for underlying symmetry as encoded in equiv_quats.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_7computeGlobal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_17AngularSeparation_6computeGlobal[] = "AngularSeparation.computeGlobal(self, global_ors, ors, equiv_quats)\nCalculates the minimum angles of separation between global_ors and\n        ors, checking for underlying symmetry as encoded in equiv_quats.\n\n        Args:\n            ors ((:math:`N_{particles}`, 3) :class:`numpy.ndarray`):\n                Orientations to calculate the order parameter.\n            global_ors ((:math:`N_{particles}`, 4) :class:`numpy.ndarray`):\n                Reference orientations to calculate the order parameter.\n            equiv_quats ((:math:`N_{particles}`, 4) :class:`numpy.ndarray`):\n                The set of all equivalent quaternions that takes the particle\n                as it is defined to some global reference orientation.\n                Important: :code:`equiv_quats` must include both :math:`q` and\n                :math:`-q`, for all included quaternions.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_7computeGlobal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_global_ors = 0;
  PyObject *__pyx_v_ors = 0;
  PyObject *__pyx_v_equiv_quats = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeGlobal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_global_ors,&__pyx_n_s_ors,&__pyx_n_s_equiv_quats,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_global_ors)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ors)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("computeGlobal", 1, 3, 3, 1); __PYX_ERR(1, 1298, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_equiv_quats)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("computeGlobal", 1, 3, 3, 2); __PYX_ERR(1, 1298, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeGlobal") < 0)) __PYX_ERR(1, 1298, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_global_ors = values[0];
    __pyx_v_ors = values[1];
    __pyx_v_equiv_quats = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeGlobal", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1298, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.AngularSeparation.computeGlobal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_6computeGlobal(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self), __pyx_v_global_ors, __pyx_v_ors, __pyx_v_equiv_quats);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_6computeGlobal(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self, PyObject *__pyx_v_global_ors, PyObject *__pyx_v_ors, PyObject *__pyx_v_equiv_quats) {
  PyArrayObject *__pyx_v_l_global_ors = 0;
  PyArrayObject *__pyx_v_l_ors = 0;
  PyArrayObject *__pyx_v_l_equiv_quats = 0;
  unsigned int __pyx_v_nGlobal;
  unsigned int __pyx_v_nP;
  unsigned int __pyx_v_nEquiv;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_equiv_quats;
  __Pyx_Buffer __pyx_pybuffer_l_equiv_quats;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_global_ors;
  __Pyx_Buffer __pyx_pybuffer_l_global_ors;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_l_ors;
  __Pyx_Buffer __pyx_pybuffer_l_ors;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  __Pyx_RefNannySetupContext("computeGlobal", 0);
  __Pyx_INCREF(__pyx_v_global_ors);
  __Pyx_INCREF(__pyx_v_ors);
  __Pyx_INCREF(__pyx_v_equiv_quats);
  __pyx_pybuffer_l_global_ors.pybuffer.buf = NULL;
  __pyx_pybuffer_l_global_ors.refcount = 0;
  __pyx_pybuffernd_l_global_ors.data = NULL;
  __pyx_pybuffernd_l_global_ors.rcbuffer = &__pyx_pybuffer_l_global_ors;
  __pyx_pybuffer_l_ors.pybuffer.buf = NULL;
  __pyx_pybuffer_l_ors.refcount = 0;
  __pyx_pybuffernd_l_ors.data = NULL;
  __pyx_pybuffernd_l_ors.rcbuffer = &__pyx_pybuffer_l_ors;
  __pyx_pybuffer_l_equiv_quats.pybuffer.buf = NULL;
  __pyx_pybuffer_l_equiv_quats.refcount = 0;
  __pyx_pybuffernd_l_equiv_quats.data = NULL;
  __pyx_pybuffernd_l_equiv_quats.rcbuffer = &__pyx_pybuffer_l_equiv_quats;

  /* "freud/environment.pxi":1313
 *                 :math:`-q`, for all included quaternions.
 *         """
 *         global_ors = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             global_ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="global_ors")
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":1314
 *         """
 *         global_ors = freud.common.convert_array(
 *             global_ors, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="global_ors")
 *         if global_ors.shape[1] != 4:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_global_ors);
  __Pyx_GIVEREF(__pyx_v_global_ors);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_global_ors);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 1314, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_global_ors) < 0) __PYX_ERR(1, 1314, __pyx_L1_error)

  /* "freud/environment.pxi":1313
 *                 :math:`-q`, for all included quaternions.
 *         """
 *         global_ors = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             global_ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="global_ors")
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_global_ors, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/environment.pxi":1316
 *             global_ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="global_ors")
 *         if global_ors.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('global_ors should be an Nx4 array')
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_global_ors, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":1317
 *             array_name="global_ors")
 *         if global_ors.shape[1] != 4:
 *             raise TypeError('global_ors should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         ors = freud.common.convert_array(
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 1317, __pyx_L1_error)

    /* "freud/environment.pxi":1316
 *             global_ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="global_ors")
 *         if global_ors.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('global_ors should be an Nx4 array')
 * 
 */
  }

  /* "freud/environment.pxi":1319
 *             raise TypeError('global_ors should be an Nx4 array')
 * 
 *         ors = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="ors")
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/environment.pxi":1320
 * 
 *         ors = freud.common.convert_array(
 *             ors, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="ors")
 *         if ors.shape[1] != 4:
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_ors);
  __Pyx_GIVEREF(__pyx_v_ors);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_ors);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 1320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 1320, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_array_name, __pyx_n_s_ors) < 0) __PYX_ERR(1, 1320, __pyx_L1_error)

  /* "freud/environment.pxi":1319
 *             raise TypeError('global_ors should be an Nx4 array')
 * 
 *         ors = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="ors")
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_ors, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "freud/environment.pxi":1322
 *             ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="ors")
 *         if ors.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('ors should be an Nx4 array')
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ors, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":1323
 *             array_name="ors")
 *         if ors.shape[1] != 4:
 *             raise TypeError('ors should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         equiv_quats = freud.common.convert_array(
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 1323, __pyx_L1_error)

    /* "freud/environment.pxi":1322
 *             ors, 2, dtype=np.float32, contiguous=True,
 *             array_name="ors")
 *         if ors.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('ors should be an Nx4 array')
 * 
 */
  }

  /* "freud/environment.pxi":1325
 *             raise TypeError('ors should be an Nx4 array')
 * 
 *         equiv_quats = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             equiv_quats, 2, dtype=np.float32, contiguous=True,
 *             array_name="equiv_quats")
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":1326
 * 
 *         equiv_quats = freud.common.convert_array(
 *             equiv_quats, 2, dtype=np.float32, contiguous=True,             # <<<<<<<<<<<<<<
 *             array_name="equiv_quats")
 *         if equiv_quats.shape[1] != 4:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_equiv_quats);
  __Pyx_GIVEREF(__pyx_v_equiv_quats);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_equiv_quats);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(1, 1326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(1, 1326, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_array_name, __pyx_n_s_equiv_quats) < 0) __PYX_ERR(1, 1326, __pyx_L1_error)

  /* "freud/environment.pxi":1325
 *             raise TypeError('ors should be an Nx4 array')
 * 
 *         equiv_quats = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             equiv_quats, 2, dtype=np.float32, contiguous=True,
 *             array_name="equiv_quats")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_equiv_quats, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1328
 *             equiv_quats, 2, dtype=np.float32, contiguous=True,
 *             array_name="equiv_quats")
 *         if equiv_quats.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('equiv_quats should be an N_equiv x 4 array')
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_equiv_quats, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/environment.pxi":1329
 *             array_name="equiv_quats")
 *         if equiv_quats.shape[1] != 4:
 *             raise TypeError('equiv_quats should be an N_equiv x 4 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_global_ors = global_ors
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1329, __pyx_L1_error)

    /* "freud/environment.pxi":1328
 *             equiv_quats, 2, dtype=np.float32, contiguous=True,
 *             array_name="equiv_quats")
 *         if equiv_quats.shape[1] != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError('equiv_quats should be an N_equiv x 4 array')
 * 
 */
  }

  /* "freud/environment.pxi":1331
 *             raise TypeError('equiv_quats should be an N_equiv x 4 array')
 * 
 *         cdef np.ndarray[float, ndim=2] l_global_ors = global_ors             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_ors = ors
 *         cdef np.ndarray[float, ndim=2] l_equiv_quats = equiv_quats
 */
  if (!(likely(((__pyx_v_global_ors) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_global_ors, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1331, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_global_ors;
  __Pyx_INCREF(__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_global_ors.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_global_ors = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_global_ors.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1331, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_global_ors.diminfo[0].strides = __pyx_pybuffernd_l_global_ors.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_global_ors.diminfo[0].shape = __pyx_pybuffernd_l_global_ors.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_global_ors.diminfo[1].strides = __pyx_pybuffernd_l_global_ors.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_global_ors.diminfo[1].shape = __pyx_pybuffernd_l_global_ors.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_global_ors = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1332
 * 
 *         cdef np.ndarray[float, ndim=2] l_global_ors = global_ors
 *         cdef np.ndarray[float, ndim=2] l_ors = ors             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_equiv_quats = equiv_quats
 * 
 */
  if (!(likely(((__pyx_v_ors) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ors, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1332, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_ors;
  __Pyx_INCREF(__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_ors.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_ors = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_ors.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1332, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_ors.diminfo[0].strides = __pyx_pybuffernd_l_ors.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_ors.diminfo[0].shape = __pyx_pybuffernd_l_ors.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_ors.diminfo[1].strides = __pyx_pybuffernd_l_ors.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_ors.diminfo[1].shape = __pyx_pybuffernd_l_ors.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_ors = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1333
 *         cdef np.ndarray[float, ndim=2] l_global_ors = global_ors
 *         cdef np.ndarray[float, ndim=2] l_ors = ors
 *         cdef np.ndarray[float, ndim=2] l_equiv_quats = equiv_quats             # <<<<<<<<<<<<<<
 * 
 *         cdef unsigned int nGlobal = <unsigned int> global_ors.shape[0]
 */
  if (!(likely(((__pyx_v_equiv_quats) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_equiv_quats, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1333, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_equiv_quats;
  __Pyx_INCREF(__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_l_equiv_quats = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1333, __pyx_L1_error)
    } else {__pyx_pybuffernd_l_equiv_quats.diminfo[0].strides = __pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_l_equiv_quats.diminfo[0].shape = __pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_l_equiv_quats.diminfo[1].strides = __pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_l_equiv_quats.diminfo[1].shape = __pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_l_equiv_quats = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1335
 *         cdef np.ndarray[float, ndim=2] l_equiv_quats = equiv_quats
 * 
 *         cdef unsigned int nGlobal = <unsigned int> global_ors.shape[0]             # <<<<<<<<<<<<<<
 *         cdef unsigned int nP = <unsigned int> ors.shape[0]
 *         cdef unsigned int nEquiv = <unsigned int> equiv_quats.shape[0]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_global_ors, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nGlobal = ((unsigned int)__pyx_t_7);

  /* "freud/environment.pxi":1336
 * 
 *         cdef unsigned int nGlobal = <unsigned int> global_ors.shape[0]
 *         cdef unsigned int nP = <unsigned int> ors.shape[0]             # <<<<<<<<<<<<<<
 *         cdef unsigned int nEquiv = <unsigned int> equiv_quats.shape[0]
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ors, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nP = ((unsigned int)__pyx_t_7);

  /* "freud/environment.pxi":1337
 *         cdef unsigned int nGlobal = <unsigned int> global_ors.shape[0]
 *         cdef unsigned int nP = <unsigned int> ors.shape[0]
 *         cdef unsigned int nEquiv = <unsigned int> equiv_quats.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_equiv_quats, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nEquiv = ((unsigned int)__pyx_t_7);

  /* "freud/environment.pxi":1339
 *         cdef unsigned int nEquiv = <unsigned int> equiv_quats.shape[0]
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeGlobal(
 *                 <quat[float]*> l_global_ors.data,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/environment.pxi":1340
 * 
 *         with nogil:
 *             self.thisptr.computeGlobal(             # <<<<<<<<<<<<<<
 *                 <quat[float]*> l_global_ors.data,
 *                 <quat[float]*> l_ors.data,
 */
        try {
          __pyx_v_self->thisptr->computeGlobal(((quat<float>  *)__pyx_v_l_global_ors->data), ((quat<float>  *)__pyx_v_l_ors->data), ((quat<float>  *)__pyx_v_l_equiv_quats->data), __pyx_v_nGlobal, __pyx_v_nP, __pyx_v_nEquiv);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 1340, __pyx_L7_error)
        }
      }

      /* "freud/environment.pxi":1339
 *         cdef unsigned int nEquiv = <unsigned int> equiv_quats.shape[0]
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeGlobal(
 *                 <quat[float]*> l_global_ors.data,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L7_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L8:;
      }
  }

  /* "freud/environment.pxi":1345
 *                 <quat[float]*> l_equiv_quats.data,
 *                 nGlobal, nP, nEquiv)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def getNeighborAngles(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/environment.pxi":1298
 *         return self
 * 
 *     def computeGlobal(self, global_ors, ors, equiv_quats):             # <<<<<<<<<<<<<<
 *         """Calculates the minimum angles of separation between global_ors and
 *         ors, checking for underlying symmetry as encoded in equiv_quats.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_global_ors.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_ors.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.AngularSeparation.computeGlobal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_equiv_quats.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_global_ors.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_l_ors.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l_global_ors);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_ors);
  __Pyx_XDECREF((PyObject *)__pyx_v_l_equiv_quats);
  __Pyx_XDECREF(__pyx_v_global_ors);
  __Pyx_XDECREF(__pyx_v_ors);
  __Pyx_XDECREF(__pyx_v_equiv_quats);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1347
 *         return self
 * 
 *     def getNeighborAngles(self):             # <<<<<<<<<<<<<<
 *         """The neighbor angles in radians.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_9getNeighborAngles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17AngularSeparation_8getNeighborAngles[] = "AngularSeparation.getNeighborAngles(self)\nThe neighbor angles in radians.\n\n        Returns:\n            :math:`\\left(N_{reference}, N_{neighbors} \\right)`             :class:`numpy.ndarray`:\n                Angles in radians.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_9getNeighborAngles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNeighborAngles (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_8getNeighborAngles(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_8getNeighborAngles(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self) {
  float *__pyx_v_neigh_ang;
  npy_intp __pyx_v_nbins[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyArrayObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getNeighborAngles", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/environment.pxi":1356
 *         """
 * 
 *         cdef float * neigh_ang = self.thisptr.getNeighborAngles().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> len(self.nlist)
 */
  __pyx_v_neigh_ang = __pyx_v_self->thisptr->getNeighborAngles().get();

  /* "freud/environment.pxi":1358
 *         cdef float * neigh_ang = self.thisptr.getNeighborAngles().get()
 *         cdef np.npy_intp nbins[1]
 *         nbins[0] = <np.npy_intp> len(self.nlist)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nlist); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_t_2);

  /* "freud/environment.pxi":1360
 *         nbins[0] = <np.npy_intp> len(self.nlist)
 *         cdef np.ndarray[float, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> neigh_ang)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_neigh_ang)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1360, __pyx_L1_error)
  __pyx_t_3 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_3, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1359, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_3 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1362
 *             np.PyArray_SimpleNewFromData(1, nbins, np.NPY_FLOAT32,
 *                                          <void*> neigh_ang)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getGlobalAngles(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/environment.pxi":1347
 *         return self
 * 
 *     def getNeighborAngles(self):             # <<<<<<<<<<<<<<
 *         """The neighbor angles in radians.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.AngularSeparation.getNeighborAngles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1364
 *         return result
 * 
 *     def getGlobalAngles(self):             # <<<<<<<<<<<<<<
 *         """The global angles in radians
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_11getGlobalAngles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17AngularSeparation_10getGlobalAngles[] = "AngularSeparation.getGlobalAngles(self)\nThe global angles in radians\n\n        Returns:\n            :math:`\\left(N_{particles}, N_{global} \\right)`             :class:`numpy.ndarray`:\n                Angles in radians.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_11getGlobalAngles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGlobalAngles (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_10getGlobalAngles(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_10getGlobalAngles(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self) {
  float *__pyx_v_global_ang;
  npy_intp __pyx_v_nbins[2];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getGlobalAngles", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/environment.pxi":1373
 *         """
 * 
 *         cdef float * global_ang = self.thisptr.getGlobalAngles().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 */
  __pyx_v_global_ang = __pyx_v_self->thisptr->getGlobalAngles().get();

  /* "freud/environment.pxi":1375
 *         cdef float * global_ang = self.thisptr.getGlobalAngles().get()
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         nbins[1] = <np.npy_intp> self.thisptr.getNglobal()
 *         cdef np.ndarray[float, ndim=2] result = \
 */
  (__pyx_v_nbins[0]) = ((npy_intp)__pyx_v_self->thisptr->getNP());

  /* "freud/environment.pxi":1376
 *         cdef np.npy_intp nbins[2]
 *         nbins[0] = <np.npy_intp> self.thisptr.getNP()
 *         nbins[1] = <np.npy_intp> self.thisptr.getNglobal()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] result = \
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_FLOAT32,
 */
  (__pyx_v_nbins[1]) = ((npy_intp)__pyx_v_self->thisptr->getNglobal());

  /* "freud/environment.pxi":1378
 *         nbins[1] = <np.npy_intp> self.thisptr.getNglobal()
 *         cdef np.ndarray[float, ndim=2] result = \
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_FLOAT32,             # <<<<<<<<<<<<<<
 *                                          <void*> global_ang)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(2, __pyx_v_nbins, NPY_FLOAT32, ((void *)__pyx_v_global_ang)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1378, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1377, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/environment.pxi":1380
 *             np.PyArray_SimpleNewFromData(2, nbins, np.NPY_FLOAT32,
 *                                          <void*> global_ang)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/environment.pxi":1364
 *         return result
 * 
 *     def getGlobalAngles(self):             # <<<<<<<<<<<<<<
 *         """The global angles in radians
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.AngularSeparation.getGlobalAngles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1383
 * 
 *     @property
 *     def n_p(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_3n_p_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_3n_p_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_3n_p___get__(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_3n_p___get__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":1384
 *     @property
 *     def n_p(self):
 *         return self.getNP()             # <<<<<<<<<<<<<<
 * 
 *     def getNP(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNP); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1384, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1384, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1383
 * 
 *     @property
 *     def n_p(self):             # <<<<<<<<<<<<<<
 *         return self.getNP()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.AngularSeparation.n_p.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1386
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles used in computing the last set.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_13getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17AngularSeparation_12getNP[] = "AngularSeparation.getNP(self)\nGet the number of particles used in computing the last set.\n\n        Returns:\n            unsigned int: :math:`N_{particles}`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_13getNP(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNP (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_12getNP(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_12getNP(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self) {
  unsigned int __pyx_v_np;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNP", 0);

  /* "freud/environment.pxi":1392
 *             unsigned int: :math:`N_{particles}`.
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()             # <<<<<<<<<<<<<<
 *         return np
 * 
 */
  __pyx_v_np = __pyx_v_self->thisptr->getNP();

  /* "freud/environment.pxi":1393
 *         """
 *         cdef unsigned int np = self.thisptr.getNP()
 *         return np             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1386
 *         return self.getNP()
 * 
 *     def getNP(self):             # <<<<<<<<<<<<<<
 *         """Get the number of particles used in computing the last set.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.AngularSeparation.getNP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1396
 * 
 *     @property
 *     def n_ref(self):             # <<<<<<<<<<<<<<
 *         return self.getNReference()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_5n_ref_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_5n_ref_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_5n_ref___get__(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_5n_ref___get__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":1397
 *     @property
 *     def n_ref(self):
 *         return self.getNReference()             # <<<<<<<<<<<<<<
 * 
 *     def getNReference(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNReference); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1397, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1397, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1396
 * 
 *     @property
 *     def n_ref(self):             # <<<<<<<<<<<<<<
 *         return self.getNReference()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.AngularSeparation.n_ref.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1399
 *         return self.getNReference()
 * 
 *     def getNReference(self):             # <<<<<<<<<<<<<<
 *         """Get the number of reference particles used in computing the neighbor
 *         angles.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_15getNReference(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17AngularSeparation_14getNReference[] = "AngularSeparation.getNReference(self)\nGet the number of reference particles used in computing the neighbor\n        angles.\n\n        Returns:\n            unsigned int: :math:`N_{particles}`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_15getNReference(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNReference (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_14getNReference(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_14getNReference(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self) {
  unsigned int __pyx_v_nref;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNReference", 0);

  /* "freud/environment.pxi":1406
 *             unsigned int: :math:`N_{particles}`.
 *         """
 *         cdef unsigned int nref = self.thisptr.getNref()             # <<<<<<<<<<<<<<
 *         return nref
 * 
 */
  __pyx_v_nref = __pyx_v_self->thisptr->getNref();

  /* "freud/environment.pxi":1407
 *         """
 *         cdef unsigned int nref = self.thisptr.getNref()
 *         return nref             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nref); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1399
 *         return self.getNReference()
 * 
 *     def getNReference(self):             # <<<<<<<<<<<<<<
 *         """Get the number of reference particles used in computing the neighbor
 *         angles.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.AngularSeparation.getNReference", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1410
 * 
 *     @property
 *     def n_global(self):             # <<<<<<<<<<<<<<
 *         return self.getNGlobal()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_8n_global_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_8n_global_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_8n_global___get__(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_8n_global___get__(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/environment.pxi":1411
 *     @property
 *     def n_global(self):
 *         return self.getNGlobal()             # <<<<<<<<<<<<<<
 * 
 *     def getNGlobal(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNGlobal); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1411, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1411, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1410
 * 
 *     @property
 *     def n_global(self):             # <<<<<<<<<<<<<<
 *         return self.getNGlobal()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.AngularSeparation.n_global.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/environment.pxi":1413
 *         return self.getNGlobal()
 * 
 *     def getNGlobal(self):             # <<<<<<<<<<<<<<
 *         """Get the number of global orientations to check against.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_17getNGlobal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17AngularSeparation_16getNGlobal[] = "AngularSeparation.getNGlobal(self)\nGet the number of global orientations to check against.\n\n        Returns:\n            unsigned int: :math:`N_{global orientations}`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_17getNGlobal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNGlobal (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_16getNGlobal(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_16getNGlobal(struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self) {
  unsigned int __pyx_v_nglobal;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNGlobal", 0);

  /* "freud/environment.pxi":1419
 *             unsigned int: :math:`N_{global orientations}`.
 *         """
 *         cdef unsigned int nglobal = self.thisptr.getNglobal()             # <<<<<<<<<<<<<<
 *         return nglobal
 */
  __pyx_v_nglobal = __pyx_v_self->thisptr->getNglobal();

  /* "freud/environment.pxi":1420
 *         """
 *         cdef unsigned int nglobal = self.thisptr.getNglobal()
 *         return nglobal             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nglobal); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/environment.pxi":1413
 *         return self.getNGlobal()
 * 
 *     def getNGlobal(self):             # <<<<<<<<<<<<<<
 *         """Get the number of global orientations to check against.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.AngularSeparation.getNGlobal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17AngularSeparation_18__reduce_cython__[] = "AngularSeparation.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_18__reduce_cython__(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.AngularSeparation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_17AngularSeparation_20__setstate_cython__[] = "AngularSeparation.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_17AngularSeparation_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17AngularSeparation_20__setstate_cython__(((struct __pyx_obj_5freud_6_freud_AngularSeparation *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17AngularSeparation_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_AngularSeparation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.AngularSeparation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":68
 *     cdef rmax
 * 
 *     def __cinit__(self, box, float rcut):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         self.thisptr = new cluster.Cluster(rcut)
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_7Cluster_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_7Cluster_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  float __pyx_v_rcut;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,&__pyx_n_s_rcut,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rcut)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(3, 68, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 68, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_box = values[0];
    __pyx_v_rcut = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_rcut == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 68, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 68, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.Cluster.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster___cinit__(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self), __pyx_v_box, __pyx_v_rcut);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_7Cluster___cinit__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self, PyObject *__pyx_v_box, float __pyx_v_rcut) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/cluster.pxi":69
 * 
 *     def __cinit__(self, box, float rcut):
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         self.thisptr = new cluster.Cluster(rcut)
 *         self.m_box = box
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 69, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 69, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/cluster.pxi":70
 *     def __cinit__(self, box, float rcut):
 *         box = freud.common.convert_box(box)
 *         self.thisptr = new cluster.Cluster(rcut)             # <<<<<<<<<<<<<<
 *         self.m_box = box
 *         self.rmax = rcut
 */
  __pyx_v_self->thisptr = new freud::cluster::Cluster(__pyx_v_rcut);

  /* "freud/cluster.pxi":71
 *         box = freud.common.convert_box(box)
 *         self.thisptr = new cluster.Cluster(rcut)
 *         self.m_box = box             # <<<<<<<<<<<<<<
 *         self.rmax = rcut
 * 
 */
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_GIVEREF(__pyx_v_box);
  __Pyx_GOTREF(__pyx_v_self->m_box);
  __Pyx_DECREF(__pyx_v_self->m_box);
  __pyx_v_self->m_box = __pyx_v_box;

  /* "freud/cluster.pxi":72
 *         self.thisptr = new cluster.Cluster(rcut)
 *         self.m_box = box
 *         self.rmax = rcut             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_rcut); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rmax);
  __Pyx_DECREF(__pyx_v_self->rmax);
  __pyx_v_self->rmax = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "freud/cluster.pxi":68
 *     cdef rmax
 * 
 *     def __cinit__(self, box, float rcut):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         self.thisptr = new cluster.Cluster(rcut)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.Cluster.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":74
 *         self.rmax = rcut
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_7Cluster_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_7Cluster_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_7Cluster_2__dealloc__(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_7Cluster_2__dealloc__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/cluster.pxi":75
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "freud/cluster.pxi":74
 *         self.rmax = rcut
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/cluster.pxi":78
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_3box_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_3box_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_3box___get__(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_3box___get__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/cluster.pxi":79
 *     @property
 *     def box(self):
 *         return self.getBox()             # <<<<<<<<<<<<<<
 * 
 *     def getBox(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getBox); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 79, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":78
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.Cluster.box.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":81
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Return the stored freud Box.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_5getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7Cluster_4getBox[] = "Cluster.getBox(self)\nReturn the stored freud Box.\n\n        Returns:\n            :class:`freud.box.Box`: freud Box.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_5getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBox (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_4getBox(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_4getBox(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBox", 0);

  /* "freud/cluster.pxi":87
 *             :class:`freud.box.Box`: freud Box.
 *         """
 *         return self.m_box             # <<<<<<<<<<<<<<
 * 
 *     def computeClusters(self, points, nlist=None, box=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->m_box);
  __pyx_r = __pyx_v_self->m_box;
  goto __pyx_L0;

  /* "freud/cluster.pxi":81
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Return the stored freud Box.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":89
 *         return self.m_box
 * 
 *     def computeClusters(self, points, nlist=None, box=None):             # <<<<<<<<<<<<<<
 *         """Compute the clusters for the given set of points.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_7computeClusters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_7Cluster_6computeClusters[] = "Cluster.computeClusters(self, points, nlist=None, box=None)\nCompute the clusters for the given set of points.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`np.ndarray`):\n                Particle coordinates.\n            nlist (:class:`freud.locality.NeighborList`, optional):\n                Object to use to find bonds (Default value = None).\n            box (:class:`freud.box.Box`, optional):\n                Simulation box (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_7computeClusters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_nlist = 0;
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeClusters (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_nlist,&__pyx_n_s_box,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nlist);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeClusters") < 0)) __PYX_ERR(3, 89, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_nlist = values[1];
    __pyx_v_box = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeClusters", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 89, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.Cluster.computeClusters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_6computeClusters(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self), __pyx_v_points, __pyx_v_nlist, __pyx_v_box);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_6computeClusters(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_nlist, PyObject *__pyx_v_box) {
  PyObject *__pyx_v_defaulted_nlist = NULL;
  struct __pyx_obj_5freud_8locality_NeighborList *__pyx_v_nlist_ = 0;
  freud::locality::NeighborList *__pyx_v_nlist_ptr;
  freud::box::Box __pyx_v_l_box;
  PyArrayObject *__pyx_v_cPoints = 0;
  unsigned int __pyx_v_Np;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  float __pyx_t_13;
  float __pyx_t_14;
  bool __pyx_t_15;
  unsigned int __pyx_t_16;
  __Pyx_RefNannySetupContext("computeClusters", 0);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/cluster.pxi":100
 *                 Simulation box (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/cluster.pxi":101
 *         """
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True)             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise RuntimeError(
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(3, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(3, 101, __pyx_L1_error)

  /* "freud/cluster.pxi":100
 *                 Simulation box (Default value = None).
 *         """
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/cluster.pxi":102
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'Need a list of 3D points for computeClusters()')
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/cluster.pxi":103
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'Need a list of 3D points for computeClusters()')
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 103, __pyx_L1_error)

    /* "freud/cluster.pxi":102
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'Need a list of 3D points for computeClusters()')
 */
  }

  /* "freud/cluster.pxi":106
 *                 'Need a list of 3D points for computeClusters()')
 * 
 *         defaulted_nlist = make_default_nlist(             # <<<<<<<<<<<<<<
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_default_nlist); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "freud/cluster.pxi":107
 * 
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)             # <<<<<<<<<<<<<<
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 */
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 6+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 106, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_self->m_box, __pyx_v_points, __pyx_v_points, __pyx_v_self->rmax, __pyx_v_nlist, Py_True};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 6+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 106, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(6+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->m_box);
    __Pyx_GIVEREF(__pyx_v_self->m_box);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_7, __pyx_v_self->m_box);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_7, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_7, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_self->rmax);
    __Pyx_GIVEREF(__pyx_v_self->rmax);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_7, __pyx_v_self->rmax);
    __Pyx_INCREF(__pyx_v_nlist);
    __Pyx_GIVEREF(__pyx_v_nlist);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_7, __pyx_v_nlist);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_7, Py_True);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_defaulted_nlist = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "freud/cluster.pxi":108
 *         defaulted_nlist = make_default_nlist(
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]             # <<<<<<<<<<<<<<
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_defaulted_nlist, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5freud_8locality_NeighborList))))) __PYX_ERR(3, 108, __pyx_L1_error)
  __pyx_v_nlist_ = ((struct __pyx_obj_5freud_8locality_NeighborList *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/cluster.pxi":109
 *             self.m_box, points, points, self.rmax, nlist, True)
 *         cdef NeighborList nlist_ = defaulted_nlist[0]
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()             # <<<<<<<<<<<<<<
 * 
 *         if box is None:
 */
  __pyx_v_nlist_ptr = ((struct __pyx_vtabstruct_5freud_8locality_NeighborList *)__pyx_v_nlist_->__pyx_vtab)->get_ptr(__pyx_v_nlist_);

  /* "freud/cluster.pxi":111
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         if box is None:             # <<<<<<<<<<<<<<
 *             box = self.m_box
 *         else:
 */
  __pyx_t_6 = (__pyx_v_box == Py_None);
  __pyx_t_8 = (__pyx_t_6 != 0);
  if (__pyx_t_8) {

    /* "freud/cluster.pxi":112
 * 
 *         if box is None:
 *             box = self.m_box             # <<<<<<<<<<<<<<
 *         else:
 *             box = freud.common.convert_box(box)
 */
    __pyx_t_5 = __pyx_v_self->m_box;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "freud/cluster.pxi":111
 *         cdef locality.NeighborList * nlist_ptr = nlist_.get_ptr()
 * 
 *         if box is None:             # <<<<<<<<<<<<<<
 *             box = self.m_box
 *         else:
 */
    goto __pyx_L4;
  }

  /* "freud/cluster.pxi":114
 *             box = self.m_box
 *         else:
 *             box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_common); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_box); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_box};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 114, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_box};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 114, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_INCREF(__pyx_v_box);
        __Pyx_GIVEREF(__pyx_v_box);
        PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_box);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L4:;

  /* "freud/cluster.pxi":116
 *             box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 116, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 116, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 116, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 116, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "freud/cluster.pxi":117
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray cPoints = points
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 117, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 117, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 117, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_15 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "freud/cluster.pxi":115
 *         else:
 *             box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15);

  /* "freud/cluster.pxi":119
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 * 
 *         cdef np.ndarray cPoints = points             # <<<<<<<<<<<<<<
 *         cdef unsigned int Np = points.shape[0]
 *         with nogil:
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(3, 119, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_cPoints = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/cluster.pxi":120
 * 
 *         cdef np.ndarray cPoints = points
 *         cdef unsigned int Np = points.shape[0]             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.computeClusters(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_16 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_16 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Np = __pyx_t_16;

  /* "freud/cluster.pxi":121
 *         cdef np.ndarray cPoints = points
 *         cdef unsigned int Np = points.shape[0]
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeClusters(
 *                 l_box, nlist_ptr, <vec3[float]*> cPoints.data, Np)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/cluster.pxi":122
 *         cdef unsigned int Np = points.shape[0]
 *         with nogil:
 *             self.thisptr.computeClusters(             # <<<<<<<<<<<<<<
 *                 l_box, nlist_ptr, <vec3[float]*> cPoints.data, Np)
 *         return self
 */
        try {
          __pyx_v_self->thisptr->computeClusters(__pyx_v_l_box, __pyx_v_nlist_ptr, ((vec3<float>  *)__pyx_v_cPoints->data), __pyx_v_Np);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(3, 122, __pyx_L6_error)
        }
      }

      /* "freud/cluster.pxi":121
 *         cdef np.ndarray cPoints = points
 *         cdef unsigned int Np = points.shape[0]
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeClusters(
 *                 l_box, nlist_ptr, <vec3[float]*> cPoints.data, Np)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L7;
        }
        __pyx_L6_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L7:;
      }
  }

  /* "freud/cluster.pxi":124
 *             self.thisptr.computeClusters(
 *                 l_box, nlist_ptr, <vec3[float]*> cPoints.data, Np)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def computeClusterMembership(self, keys):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/cluster.pxi":89
 *         return self.m_box
 * 
 *     def computeClusters(self, points, nlist=None, box=None):             # <<<<<<<<<<<<<<
 *         """Compute the clusters for the given set of points.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.Cluster.computeClusters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_defaulted_nlist);
  __Pyx_XDECREF((PyObject *)__pyx_v_nlist_);
  __Pyx_XDECREF((PyObject *)__pyx_v_cPoints);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":126
 *         return self
 * 
 *     def computeClusterMembership(self, keys):             # <<<<<<<<<<<<<<
 *         """Compute the clusters with key membership.
 *         Loops over all particles and adds them to a list of sets.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_9computeClusterMembership(PyObject *__pyx_v_self, PyObject *__pyx_v_keys); /*proto*/
static char __pyx_doc_5freud_6_freud_7Cluster_8computeClusterMembership[] = "Cluster.computeClusterMembership(self, keys)\nCompute the clusters with key membership.\n        Loops over all particles and adds them to a list of sets.\n        Each set contains all the keys that are part of that cluster.\n        Get the computed list with :py:meth:`~.getClusterKeys()`.\n\n        Args:\n            keys((:math:`N_{particles}`) :class:`numpy.ndarray`):\n                Membership keys, one for each particle.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_9computeClusterMembership(PyObject *__pyx_v_self, PyObject *__pyx_v_keys) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeClusterMembership (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_8computeClusterMembership(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self), ((PyObject *)__pyx_v_keys));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_8computeClusterMembership(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self, PyObject *__pyx_v_keys) {
  PyObject *__pyx_v_N = NULL;
  PyArrayObject *__pyx_v_cKeys = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("computeClusterMembership", 0);
  __Pyx_INCREF(__pyx_v_keys);

  /* "freud/cluster.pxi":136
 *                 Membership keys, one for each particle.
 *         """
 *         keys = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             keys, 1, dtype=np.uint32, contiguous=True)
 *         N = self.getNumParticles()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/cluster.pxi":137
 *         """
 *         keys = freud.common.convert_array(
 *             keys, 1, dtype=np.uint32, contiguous=True)             # <<<<<<<<<<<<<<
 *         N = self.getNumParticles()
 *         if keys.shape[0] != N:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_keys);
  __Pyx_GIVEREF(__pyx_v_keys);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_keys);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uint32); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(3, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(3, 137, __pyx_L1_error)

  /* "freud/cluster.pxi":136
 *                 Membership keys, one for each particle.
 *         """
 *         keys = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             keys, 1, dtype=np.uint32, contiguous=True)
 *         N = self.getNumParticles()
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_keys, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/cluster.pxi":138
 *         keys = freud.common.convert_array(
 *             keys, 1, dtype=np.uint32, contiguous=True)
 *         N = self.getNumParticles()             # <<<<<<<<<<<<<<
 *         if keys.shape[0] != N:
 *             raise RuntimeError(
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNumParticles); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 138, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_N = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "freud/cluster.pxi":139
 *             keys, 1, dtype=np.uint32, contiguous=True)
 *         N = self.getNumParticles()
 *         if keys.shape[0] != N:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'keys must be a 1D array of length NumParticles')
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_keys, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_v_N, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "freud/cluster.pxi":140
 *         N = self.getNumParticles()
 *         if keys.shape[0] != N:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'keys must be a 1D array of length NumParticles')
 *         cdef np.ndarray cKeys = keys
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 140, __pyx_L1_error)

    /* "freud/cluster.pxi":139
 *             keys, 1, dtype=np.uint32, contiguous=True)
 *         N = self.getNumParticles()
 *         if keys.shape[0] != N:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'keys must be a 1D array of length NumParticles')
 */
  }

  /* "freud/cluster.pxi":142
 *             raise RuntimeError(
 *                 'keys must be a 1D array of length NumParticles')
 *         cdef np.ndarray cKeys = keys             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.computeClusterMembership(<unsigned int*> cKeys.data)
 */
  if (!(likely(((__pyx_v_keys) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_keys, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(3, 142, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_keys;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_cKeys = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/cluster.pxi":143
 *                 'keys must be a 1D array of length NumParticles')
 *         cdef np.ndarray cKeys = keys
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeClusterMembership(<unsigned int*> cKeys.data)
 *         return self
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/cluster.pxi":144
 *         cdef np.ndarray cKeys = keys
 *         with nogil:
 *             self.thisptr.computeClusterMembership(<unsigned int*> cKeys.data)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
        try {
          __pyx_v_self->thisptr->computeClusterMembership(((unsigned int *)__pyx_v_cKeys->data));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(3, 144, __pyx_L5_error)
        }
      }

      /* "freud/cluster.pxi":143
 *                 'keys must be a 1D array of length NumParticles')
 *         cdef np.ndarray cKeys = keys
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeClusterMembership(<unsigned int*> cKeys.data)
 *         return self
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "freud/cluster.pxi":145
 *         with nogil:
 *             self.thisptr.computeClusterMembership(<unsigned int*> cKeys.data)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/cluster.pxi":126
 *         return self
 * 
 *     def computeClusterMembership(self, keys):             # <<<<<<<<<<<<<<
 *         """Compute the clusters with key membership.
 *         Loops over all particles and adds them to a list of sets.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("freud._freud.Cluster.computeClusterMembership", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_N);
  __Pyx_XDECREF((PyObject *)__pyx_v_cKeys);
  __Pyx_XDECREF(__pyx_v_keys);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":148
 * 
 *     @property
 *     def num_clusters(self):             # <<<<<<<<<<<<<<
 *         return self.getNumClusters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_12num_clusters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_12num_clusters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_12num_clusters___get__(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_12num_clusters___get__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/cluster.pxi":149
 *     @property
 *     def num_clusters(self):
 *         return self.getNumClusters()             # <<<<<<<<<<<<<<
 * 
 *     def getNumClusters(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNumClusters); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 149, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":148
 * 
 *     @property
 *     def num_clusters(self):             # <<<<<<<<<<<<<<
 *         return self.getNumClusters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.Cluster.num_clusters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":151
 *         return self.getNumClusters()
 * 
 *     def getNumClusters(self):             # <<<<<<<<<<<<<<
 *         """Returns the number of clusters.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_11getNumClusters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7Cluster_10getNumClusters[] = "Cluster.getNumClusters(self)\nReturns the number of clusters.\n\n        Returns:\n            int: Number of clusters.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_11getNumClusters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumClusters (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_10getNumClusters(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_10getNumClusters(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNumClusters", 0);

  /* "freud/cluster.pxi":157
 *             int: Number of clusters.
 *         """
 *         return self.thisptr.getNumClusters()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->thisptr->getNumClusters()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":151
 *         return self.getNumClusters()
 * 
 *     def getNumClusters(self):             # <<<<<<<<<<<<<<
 *         """Returns the number of clusters.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.Cluster.getNumClusters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":160
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNumParticles()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_13num_particles_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_13num_particles_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_13num_particles___get__(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_13num_particles___get__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/cluster.pxi":161
 *     @property
 *     def num_particles(self):
 *         return self.getNumParticles()             # <<<<<<<<<<<<<<
 * 
 *     def getNumParticles(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNumParticles); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 161, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 161, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":160
 * 
 *     @property
 *     def num_particles(self):             # <<<<<<<<<<<<<<
 *         return self.getNumParticles()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.Cluster.num_particles.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":163
 *         return self.getNumParticles()
 * 
 *     def getNumParticles(self):             # <<<<<<<<<<<<<<
 *         """Returns the number of particles.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_13getNumParticles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7Cluster_12getNumParticles[] = "Cluster.getNumParticles(self)\nReturns the number of particles.\n\n        Returns:\n            int: Number of particles.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_13getNumParticles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumParticles (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_12getNumParticles(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_12getNumParticles(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNumParticles", 0);

  /* "freud/cluster.pxi":169
 *             int: Number of particles.
 *         """
 *         return self.thisptr.getNumParticles()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->thisptr->getNumParticles()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":163
 *         return self.getNumParticles()
 * 
 *     def getNumParticles(self):             # <<<<<<<<<<<<<<
 *         """Returns the number of particles.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.Cluster.getNumParticles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":172
 * 
 *     @property
 *     def cluster_idx(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterIdx()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_11cluster_idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_11cluster_idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_11cluster_idx___get__(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_11cluster_idx___get__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/cluster.pxi":173
 *     @property
 *     def cluster_idx(self):
 *         return self.getClusterIdx()             # <<<<<<<<<<<<<<
 * 
 *     def getClusterIdx(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getClusterIdx); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 173, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 173, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":172
 * 
 *     @property
 *     def cluster_idx(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterIdx()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.Cluster.cluster_idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":175
 *         return self.getClusterIdx()
 * 
 *     def getClusterIdx(self):             # <<<<<<<<<<<<<<
 *         """Returns 1D array of Cluster idx for each particle
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_15getClusterIdx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7Cluster_14getClusterIdx[] = "Cluster.getClusterIdx(self)\nReturns 1D array of Cluster idx for each particle\n\n        Returns:\n            (:math:`N_{particles}`) :class:`numpy.ndarray`:\n                1D array of cluster idx.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_15getClusterIdx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClusterIdx (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_14getClusterIdx(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_14getClusterIdx(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  unsigned int *__pyx_v_cluster_idx_raw;
  npy_intp __pyx_v_nP[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getClusterIdx", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/cluster.pxi":183
 *         """
 *         cdef unsigned int * cluster_idx_raw = \
 *             self.thisptr.getClusterIdx().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nP[1]
 *         nP[0] = <np.npy_intp> self.thisptr.getNumParticles()
 */
  __pyx_v_cluster_idx_raw = __pyx_v_self->thisptr->getClusterIdx().get();

  /* "freud/cluster.pxi":185
 *             self.thisptr.getClusterIdx().get()
 *         cdef np.npy_intp nP[1]
 *         nP[0] = <np.npy_intp> self.thisptr.getNumParticles()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(
 */
  (__pyx_v_nP[0]) = ((npy_intp)__pyx_v_self->thisptr->getNumParticles());

  /* "freud/cluster.pxi":187
 *         nP[0] = <np.npy_intp> self.thisptr.getNumParticles()
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *                 1, nP, np.NPY_UINT32, <void*> cluster_idx_raw)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nP, NPY_UINT32, ((void *)__pyx_v_cluster_idx_raw)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(3, 187, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(3, 186, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/cluster.pxi":189
 *             np.PyArray_SimpleNewFromData(
 *                 1, nP, np.NPY_UINT32, <void*> cluster_idx_raw)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/cluster.pxi":175
 *         return self.getClusterIdx()
 * 
 *     def getClusterIdx(self):             # <<<<<<<<<<<<<<
 *         """Returns 1D array of Cluster idx for each particle
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.Cluster.getClusterIdx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":192
 * 
 *     @property
 *     def cluster_keys(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterKeys()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_12cluster_keys_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_12cluster_keys_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_12cluster_keys___get__(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_12cluster_keys___get__(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/cluster.pxi":193
 *     @property
 *     def cluster_keys(self):
 *         return self.getClusterKeys()             # <<<<<<<<<<<<<<
 * 
 *     def getClusterKeys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getClusterKeys); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 193, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 193, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":192
 * 
 *     @property
 *     def cluster_keys(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterKeys()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.Cluster.cluster_keys.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":195
 *         return self.getClusterKeys()
 * 
 *     def getClusterKeys(self):             # <<<<<<<<<<<<<<
 *         """Returns the keys contained in each cluster.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_17getClusterKeys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7Cluster_16getClusterKeys[] = "Cluster.getClusterKeys(self)\nReturns the keys contained in each cluster.\n\n        Returns:\n            list: List of lists of each key contained in clusters.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_17getClusterKeys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClusterKeys (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_16getClusterKeys(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_16getClusterKeys(struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  std::vector<std::vector<unsigned int> >  __pyx_v_cluster_keys;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getClusterKeys", 0);

  /* "freud/cluster.pxi":201
 *             list: List of lists of each key contained in clusters.
 *         """
 *         cluster_keys = self.thisptr.getClusterKeys()             # <<<<<<<<<<<<<<
 *         return cluster_keys
 * 
 */
  __pyx_v_cluster_keys = __pyx_v_self->thisptr->getClusterKeys();

  /* "freud/cluster.pxi":202
 *         """
 *         cluster_keys = self.thisptr.getClusterKeys()
 *         return cluster_keys             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_unsigned_int_3e___(__pyx_v_cluster_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":195
 *         return self.getClusterKeys()
 * 
 *     def getClusterKeys(self):             # <<<<<<<<<<<<<<
 *         """Returns the keys contained in each cluster.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.Cluster.getClusterKeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_7Cluster_18__reduce_cython__[] = "Cluster.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_18__reduce_cython__(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.Cluster.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_7Cluster_20__setstate_cython__[] = "Cluster.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_7Cluster_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_7Cluster_20__setstate_cython__(((struct __pyx_obj_5freud_6_freud_Cluster *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_7Cluster_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_Cluster *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.Cluster.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":247
 *     cdef m_box
 * 
 *     def __cinit__(self, box):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         self.thisptr = new cluster.ClusterProperties()
 */

/* Python wrapper */
static int __pyx_pw_5freud_6_freud_17ClusterProperties_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5freud_6_freud_17ClusterProperties_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_box,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 247, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_box = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 247, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.ClusterProperties.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties___cinit__(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self), __pyx_v_box);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5freud_6_freud_17ClusterProperties___cinit__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self, PyObject *__pyx_v_box) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/cluster.pxi":248
 * 
 *     def __cinit__(self, box):
 *         box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         self.thisptr = new cluster.ClusterProperties()
 *         self.m_box = box
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_common); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_box); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 248, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_box};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 248, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_box);
      __Pyx_GIVEREF(__pyx_v_box);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_box);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/cluster.pxi":249
 *     def __cinit__(self, box):
 *         box = freud.common.convert_box(box)
 *         self.thisptr = new cluster.ClusterProperties()             # <<<<<<<<<<<<<<
 *         self.m_box = box
 * 
 */
  __pyx_v_self->thisptr = new freud::cluster::ClusterProperties();

  /* "freud/cluster.pxi":250
 *         box = freud.common.convert_box(box)
 *         self.thisptr = new cluster.ClusterProperties()
 *         self.m_box = box             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(__pyx_v_box);
  __Pyx_GIVEREF(__pyx_v_box);
  __Pyx_GOTREF(__pyx_v_self->m_box);
  __Pyx_DECREF(__pyx_v_self->m_box);
  __pyx_v_self->m_box = __pyx_v_box;

  /* "freud/cluster.pxi":247
 *     cdef m_box
 * 
 *     def __cinit__(self, box):             # <<<<<<<<<<<<<<
 *         box = freud.common.convert_box(box)
 *         self.thisptr = new cluster.ClusterProperties()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("freud._freud.ClusterProperties.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":252
 *         self.m_box = box
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5freud_6_freud_17ClusterProperties_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5freud_6_freud_17ClusterProperties_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5freud_6_freud_17ClusterProperties_2__dealloc__(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5freud_6_freud_17ClusterProperties_2__dealloc__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "freud/cluster.pxi":253
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "freud/cluster.pxi":252
 *         self.m_box = box
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "freud/cluster.pxi":256
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_3box_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_3box_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_3box___get__(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_3box___get__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/cluster.pxi":257
 *     @property
 *     def box(self):
 *         return self.getBox()             # <<<<<<<<<<<<<<
 * 
 *     def getBox(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getBox); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 257, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 257, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":256
 * 
 *     @property
 *     def box(self):             # <<<<<<<<<<<<<<
 *         return self.getBox()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.ClusterProperties.box.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":259
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Return the stored :py:class:`freud.box.Box` object.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_5getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17ClusterProperties_4getBox[] = "ClusterProperties.getBox(self)\nReturn the stored :py:class:`freud.box.Box` object.\n\n        Returns:\n            :class:`freud.box.Box`: freud Box\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_5getBox(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBox (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_4getBox(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_4getBox(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBox", 0);

  /* "freud/cluster.pxi":265
 *             :class:`freud.box.Box`: freud Box
 *         """
 *         return self.m_box             # <<<<<<<<<<<<<<
 * 
 *     def computeProperties(self, points, cluster_idx, box=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->m_box);
  __pyx_r = __pyx_v_self->m_box;
  goto __pyx_L0;

  /* "freud/cluster.pxi":259
 *         return self.getBox()
 * 
 *     def getBox(self):             # <<<<<<<<<<<<<<
 *         """Return the stored :py:class:`freud.box.Box` object.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":267
 *         return self.m_box
 * 
 *     def computeProperties(self, points, cluster_idx, box=None):             # <<<<<<<<<<<<<<
 *         """Compute properties of the point clusters.
 *         Loops over all points in the given array and determines the center of
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_7computeProperties(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5freud_6_freud_17ClusterProperties_6computeProperties[] = "ClusterProperties.computeProperties(self, points, cluster_idx, box=None)\nCompute properties of the point clusters.\n        Loops over all points in the given array and determines the center of\n        mass of the cluster as well as the :math:`G` tensor. These can be\n        accessed after the call to :py:meth:`~.computeProperties()` with\n        :py:meth:`~.getClusterCOM()` and :py:meth:`~.getClusterG()`.\n\n        Args:\n            points ((:math:`N_{particles}`, 3) :class:`np.ndarray`):\n                Positions of the particles making up the clusters.\n            cluster_idx (:class:`np.ndarray`):\n                List of cluster indexes for each particle.\n            box (:py:class:`freud.box.Box`, optional):\n                Simulation box (Default value = None).\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_7computeProperties(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_cluster_idx = 0;
  PyObject *__pyx_v_box = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeProperties (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_cluster_idx,&__pyx_n_s_box,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cluster_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("computeProperties", 0, 2, 3, 1); __PYX_ERR(3, 267, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeProperties") < 0)) __PYX_ERR(3, 267, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_cluster_idx = values[1];
    __pyx_v_box = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeProperties", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 267, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("freud._freud.ClusterProperties.computeProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_6computeProperties(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self), __pyx_v_points, __pyx_v_cluster_idx, __pyx_v_box);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_6computeProperties(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_cluster_idx, PyObject *__pyx_v_box) {
  freud::box::Box __pyx_v_l_box;
  PyArrayObject *__pyx_v_cPoints = 0;
  PyArrayObject *__pyx_v_cCluster_idx = 0;
  unsigned int __pyx_v_Np;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  bool __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  unsigned int __pyx_t_15;
  __Pyx_RefNannySetupContext("computeProperties", 0);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_INCREF(__pyx_v_cluster_idx);
  __Pyx_INCREF(__pyx_v_box);

  /* "freud/cluster.pxi":282
 *                 Simulation box (Default value = None).
 *         """
 *         if box is None:             # <<<<<<<<<<<<<<
 *             box = self.m_box
 *         else:
 */
  __pyx_t_1 = (__pyx_v_box == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "freud/cluster.pxi":283
 *         """
 *         if box is None:
 *             box = self.m_box             # <<<<<<<<<<<<<<
 *         else:
 *             box = freud.common.convert_box(box)
 */
    __pyx_t_3 = __pyx_v_self->m_box;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "freud/cluster.pxi":282
 *                 Simulation box (Default value = None).
 *         """
 *         if box is None:             # <<<<<<<<<<<<<<
 *             box = self.m_box
 *         else:
 */
    goto __pyx_L3;
  }

  /* "freud/cluster.pxi":285
 *             box = self.m_box
 *         else:
 *             box = freud.common.convert_box(box)             # <<<<<<<<<<<<<<
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_common); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_convert_box); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_box); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_box};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 285, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_box};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 285, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_v_box);
        __Pyx_GIVEREF(__pyx_v_box);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_box);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_box, __pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "freud/cluster.pxi":287
 *             box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),             # <<<<<<<<<<<<<<
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLx); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 287, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLy); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 287, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getLz); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 287, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXY); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 287, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/cluster.pxi":288
 *         cdef _box.Box l_box = _box.Box(
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())             # <<<<<<<<<<<<<<
 * 
 *         points = freud.common.convert_array(
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorXZ); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 288, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_getTiltFactorYZ); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 288, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(3, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_box, __pyx_n_s_is2D); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 288, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "freud/cluster.pxi":286
 *         else:
 *             box = freud.common.convert_box(box)
 *         cdef _box.Box l_box = _box.Box(             # <<<<<<<<<<<<<<
 *             box.getLx(), box.getLy(), box.getLz(), box.getTiltFactorXY(),
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 */
  __pyx_v_l_box = freud::box::Box(__pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13);

  /* "freud/cluster.pxi":290
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 * 
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_common); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "freud/cluster.pxi":291
 * 
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True)             # <<<<<<<<<<<<<<
 *         if points.shape[1] != 3:
 *             raise RuntimeError(
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_points);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);
  __pyx_t_6 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_14) < 0) __PYX_ERR(3, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(3, 291, __pyx_L1_error)

  /* "freud/cluster.pxi":290
 *             box.getTiltFactorXZ(), box.getTiltFactorYZ(), box.is2D())
 * 
 *         points = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:
 */
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_14);
  __pyx_t_14 = 0;

  /* "freud/cluster.pxi":292
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'Need a list of 3D points for computeClusterProperties()')
 */
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_14, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyObject_RichCompare(__pyx_t_6, __pyx_int_3, Py_NE); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "freud/cluster.pxi":293
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'Need a list of 3D points for computeClusterProperties()')
 *         cluster_idx = freud.common.convert_array(
 */
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_Raise(__pyx_t_14, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __PYX_ERR(3, 293, __pyx_L1_error)

    /* "freud/cluster.pxi":292
 *         points = freud.common.convert_array(
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'Need a list of 3D points for computeClusterProperties()')
 */
  }

  /* "freud/cluster.pxi":295
 *             raise RuntimeError(
 *                 'Need a list of 3D points for computeClusterProperties()')
 *         cluster_idx = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             cluster_idx, 1, dtype=np.uint32, contiguous=True)
 *         if cluster_idx.shape[0] != points.shape[0]:
 */
  __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_freud); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_common); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_convert_array); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "freud/cluster.pxi":296
 *                 'Need a list of 3D points for computeClusterProperties()')
 *         cluster_idx = freud.common.convert_array(
 *             cluster_idx, 1, dtype=np.uint32, contiguous=True)             # <<<<<<<<<<<<<<
 *         if cluster_idx.shape[0] != points.shape[0]:
 *             raise RuntimeError(
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_cluster_idx);
  __Pyx_GIVEREF(__pyx_v_cluster_idx);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_cluster_idx);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_1);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_uint32); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(3, 296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_contiguous, Py_True) < 0) __PYX_ERR(3, 296, __pyx_L1_error)

  /* "freud/cluster.pxi":295
 *             raise RuntimeError(
 *                 'Need a list of 3D points for computeClusterProperties()')
 *         cluster_idx = freud.common.convert_array(             # <<<<<<<<<<<<<<
 *             cluster_idx, 1, dtype=np.uint32, contiguous=True)
 *         if cluster_idx.shape[0] != points.shape[0]:
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_cluster_idx, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/cluster.pxi":297
 *         cluster_idx = freud.common.convert_array(
 *             cluster_idx, 1, dtype=np.uint32, contiguous=True)
 *         if cluster_idx.shape[0] != points.shape[0]:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 ('cluster_idx must be a 1D array of matching length/number'
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cluster_idx, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "freud/cluster.pxi":298
 *             cluster_idx, 1, dtype=np.uint32, contiguous=True)
 *         if cluster_idx.shape[0] != points.shape[0]:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 ('cluster_idx must be a 1D array of matching length/number'
 *                     'of particles to points'))
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 298, __pyx_L1_error)

    /* "freud/cluster.pxi":297
 *         cluster_idx = freud.common.convert_array(
 *             cluster_idx, 1, dtype=np.uint32, contiguous=True)
 *         if cluster_idx.shape[0] != points.shape[0]:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 ('cluster_idx must be a 1D array of matching length/number'
 */
  }

  /* "freud/cluster.pxi":301
 *                 ('cluster_idx must be a 1D array of matching length/number'
 *                     'of particles to points'))
 *         cdef np.ndarray cPoints = points             # <<<<<<<<<<<<<<
 *         cdef np.ndarray cCluster_idx = cluster_idx
 *         cdef unsigned int Np = points.shape[0]
 */
  if (!(likely(((__pyx_v_points) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_points, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(3, 301, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_cPoints = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/cluster.pxi":302
 *                     'of particles to points'))
 *         cdef np.ndarray cPoints = points
 *         cdef np.ndarray cCluster_idx = cluster_idx             # <<<<<<<<<<<<<<
 *         cdef unsigned int Np = points.shape[0]
 *         with nogil:
 */
  if (!(likely(((__pyx_v_cluster_idx) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_cluster_idx, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(3, 302, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_cluster_idx;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_cCluster_idx = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "freud/cluster.pxi":303
 *         cdef np.ndarray cPoints = points
 *         cdef np.ndarray cCluster_idx = cluster_idx
 *         cdef unsigned int Np = points.shape[0]             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.computeProperties(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_points, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_15 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_15 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(3, 303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_Np = __pyx_t_15;

  /* "freud/cluster.pxi":304
 *         cdef np.ndarray cCluster_idx = cluster_idx
 *         cdef unsigned int Np = points.shape[0]
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeProperties(
 *                 l_box,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "freud/cluster.pxi":305
 *         cdef unsigned int Np = points.shape[0]
 *         with nogil:
 *             self.thisptr.computeProperties(             # <<<<<<<<<<<<<<
 *                 l_box,
 *                 <vec3[float]*> cPoints.data,
 */
        try {
          __pyx_v_self->thisptr->computeProperties(__pyx_v_l_box, ((vec3<float>  *)__pyx_v_cPoints->data), ((unsigned int *)__pyx_v_cCluster_idx->data), __pyx_v_Np);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(3, 305, __pyx_L7_error)
        }
      }

      /* "freud/cluster.pxi":304
 *         cdef np.ndarray cCluster_idx = cluster_idx
 *         cdef unsigned int Np = points.shape[0]
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.computeProperties(
 *                 l_box,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L7_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L8:;
      }
  }

  /* "freud/cluster.pxi":310
 *                 <unsigned int*> cCluster_idx.data,
 *                 Np)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "freud/cluster.pxi":267
 *         return self.m_box
 * 
 *     def computeProperties(self, points, cluster_idx, box=None):             # <<<<<<<<<<<<<<
 *         """Compute properties of the point clusters.
 *         Loops over all points in the given array and determines the center of
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("freud._freud.ClusterProperties.computeProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cPoints);
  __Pyx_XDECREF((PyObject *)__pyx_v_cCluster_idx);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_cluster_idx);
  __Pyx_XDECREF(__pyx_v_box);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":313
 * 
 *     @property
 *     def num_clusters(self):             # <<<<<<<<<<<<<<
 *         return self.getNumClusters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_12num_clusters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_12num_clusters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_12num_clusters___get__(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_12num_clusters___get__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/cluster.pxi":314
 *     @property
 *     def num_clusters(self):
 *         return self.getNumClusters()             # <<<<<<<<<<<<<<
 * 
 *     def getNumClusters(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNumClusters); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 314, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":313
 * 
 *     @property
 *     def num_clusters(self):             # <<<<<<<<<<<<<<
 *         return self.getNumClusters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.ClusterProperties.num_clusters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":316
 *         return self.getNumClusters()
 * 
 *     def getNumClusters(self):             # <<<<<<<<<<<<<<
 *         """Count the number of clusters found in the last call to
 *         :py:meth:`~.computeProperties()`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_9getNumClusters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17ClusterProperties_8getNumClusters[] = "ClusterProperties.getNumClusters(self)\nCount the number of clusters found in the last call to\n        :py:meth:`~.computeProperties()`.\n\n        Returns:\n            int: Number of clusters.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_9getNumClusters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumClusters (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_8getNumClusters(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_8getNumClusters(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNumClusters", 0);

  /* "freud/cluster.pxi":323
 *             int: Number of clusters.
 *         """
 *         return self.thisptr.getNumClusters()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->thisptr->getNumClusters()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":316
 *         return self.getNumClusters()
 * 
 *     def getNumClusters(self):             # <<<<<<<<<<<<<<
 *         """Count the number of clusters found in the last call to
 *         :py:meth:`~.computeProperties()`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.ClusterProperties.getNumClusters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":326
 * 
 *     @property
 *     def cluster_COM(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterCOM()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_11cluster_COM_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_11cluster_COM_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_11cluster_COM___get__(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_11cluster_COM___get__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/cluster.pxi":327
 *     @property
 *     def cluster_COM(self):
 *         return self.getClusterCOM()             # <<<<<<<<<<<<<<
 * 
 *     def getClusterCOM(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getClusterCOM); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 327, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 327, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":326
 * 
 *     @property
 *     def cluster_COM(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterCOM()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.ClusterProperties.cluster_COM.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":329
 *         return self.getClusterCOM()
 * 
 *     def getClusterCOM(self):             # <<<<<<<<<<<<<<
 *         """Returns the center of mass of the last computed cluster.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_11getClusterCOM(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17ClusterProperties_10getClusterCOM[] = "ClusterProperties.getClusterCOM(self)\nReturns the center of mass of the last computed cluster.\n\n        Returns:\n            (:math:`N_{clusters}`, 3) :class:`numpy.ndarray`:\n                Cluster center of mass coordinates\n                :math:`\\left(x, y, z\\right)`.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_11getClusterCOM(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClusterCOM (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_10getClusterCOM(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_10getClusterCOM(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  vec3<float>  *__pyx_v_cluster_com_raw;
  npy_intp __pyx_v_nClusters[2];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getClusterCOM", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/cluster.pxi":337
 *                 :math:`\\left(x, y, z\\right)`.
 *         """
 *         cdef vec3[float] * cluster_com_raw = self.thisptr.getClusterCOM().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nClusters[2]
 *         nClusters[0] = <np.npy_intp> self.thisptr.getNumClusters()
 */
  __pyx_v_cluster_com_raw = __pyx_v_self->thisptr->getClusterCOM().get();

  /* "freud/cluster.pxi":339
 *         cdef vec3[float] * cluster_com_raw = self.thisptr.getClusterCOM().get()
 *         cdef np.npy_intp nClusters[2]
 *         nClusters[0] = <np.npy_intp> self.thisptr.getNumClusters()             # <<<<<<<<<<<<<<
 *         nClusters[1] = 3
 *         cdef np.ndarray[np.float32_t, ndim=2] result = \
 */
  (__pyx_v_nClusters[0]) = ((npy_intp)__pyx_v_self->thisptr->getNumClusters());

  /* "freud/cluster.pxi":340
 *         cdef np.npy_intp nClusters[2]
 *         nClusters[0] = <np.npy_intp> self.thisptr.getNumClusters()
 *         nClusters[1] = 3             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=2] result = \
 *             np.PyArray_SimpleNewFromData(
 */
  (__pyx_v_nClusters[1]) = 3;

  /* "freud/cluster.pxi":342
 *         nClusters[1] = 3
 *         cdef np.ndarray[np.float32_t, ndim=2] result = \
 *             np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *                 2, nClusters, np.NPY_FLOAT32, <void*> cluster_com_raw)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(2, __pyx_v_nClusters, NPY_FLOAT32, ((void *)__pyx_v_cluster_com_raw)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(3, 342, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(3, 341, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/cluster.pxi":344
 *             np.PyArray_SimpleNewFromData(
 *                 2, nClusters, np.NPY_FLOAT32, <void*> cluster_com_raw)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/cluster.pxi":329
 *         return self.getClusterCOM()
 * 
 *     def getClusterCOM(self):             # <<<<<<<<<<<<<<
 *         """Returns the center of mass of the last computed cluster.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.ClusterProperties.getClusterCOM", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":347
 * 
 *     @property
 *     def cluster_G(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterG()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_9cluster_G_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_9cluster_G_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_9cluster_G___get__(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_9cluster_G___get__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/cluster.pxi":348
 *     @property
 *     def cluster_G(self):
 *         return self.getClusterG()             # <<<<<<<<<<<<<<
 * 
 *     def getClusterG(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getClusterG); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 348, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 348, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":347
 * 
 *     @property
 *     def cluster_G(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterG()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.ClusterProperties.cluster_G.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":350
 *         return self.getClusterG()
 * 
 *     def getClusterG(self):             # <<<<<<<<<<<<<<
 *         """Returns the cluster :math:`G` tensors computed by the last call to
 *         :py:meth:`~.computeProperties()`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_13getClusterG(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17ClusterProperties_12getClusterG[] = "ClusterProperties.getClusterG(self)\nReturns the cluster :math:`G` tensors computed by the last call to\n        :py:meth:`~.computeProperties()`.\n\n        Returns:\n            (:math:`N_{clusters}`, 3, 3) :class:`numpy.ndarray`:\n                List of gyration tensors for each cluster.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_13getClusterG(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClusterG (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_12getClusterG(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_12getClusterG(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  float *__pyx_v_cluster_G_raw;
  npy_intp __pyx_v_nClusters[3];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getClusterG", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/cluster.pxi":358
 *                 List of gyration tensors for each cluster.
 *         """
 *         cdef float * cluster_G_raw = self.thisptr.getClusterG().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nClusters[3]
 *         nClusters[0] = <np.npy_intp> self.thisptr.getNumClusters()
 */
  __pyx_v_cluster_G_raw = __pyx_v_self->thisptr->getClusterG().get();

  /* "freud/cluster.pxi":360
 *         cdef float * cluster_G_raw = self.thisptr.getClusterG().get()
 *         cdef np.npy_intp nClusters[3]
 *         nClusters[0] = <np.npy_intp> self.thisptr.getNumClusters()             # <<<<<<<<<<<<<<
 *         nClusters[1] = 3
 *         nClusters[2] = 3
 */
  (__pyx_v_nClusters[0]) = ((npy_intp)__pyx_v_self->thisptr->getNumClusters());

  /* "freud/cluster.pxi":361
 *         cdef np.npy_intp nClusters[3]
 *         nClusters[0] = <np.npy_intp> self.thisptr.getNumClusters()
 *         nClusters[1] = 3             # <<<<<<<<<<<<<<
 *         nClusters[2] = 3
 *         cdef np.ndarray[np.float32_t, ndim=3] result = \
 */
  (__pyx_v_nClusters[1]) = 3;

  /* "freud/cluster.pxi":362
 *         nClusters[0] = <np.npy_intp> self.thisptr.getNumClusters()
 *         nClusters[1] = 3
 *         nClusters[2] = 3             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=3] result = \
 *             np.PyArray_SimpleNewFromData(
 */
  (__pyx_v_nClusters[2]) = 3;

  /* "freud/cluster.pxi":364
 *         nClusters[2] = 3
 *         cdef np.ndarray[np.float32_t, ndim=3] result = \
 *             np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *                 3, nClusters, np.NPY_FLOAT32, <void*> cluster_G_raw)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(3, __pyx_v_nClusters, NPY_FLOAT32, ((void *)__pyx_v_cluster_G_raw)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(3, 364, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 3, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(3, 363, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_result.diminfo[2].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_result.diminfo[2].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[2];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/cluster.pxi":366
 *             np.PyArray_SimpleNewFromData(
 *                 3, nClusters, np.NPY_FLOAT32, <void*> cluster_G_raw)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/cluster.pxi":350
 *         return self.getClusterG()
 * 
 *     def getClusterG(self):             # <<<<<<<<<<<<<<
 *         """Returns the cluster :math:`G` tensors computed by the last call to
 *         :py:meth:`~.computeProperties()`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.ClusterProperties.getClusterG", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":369
 * 
 *     @property
 *     def cluster_sizes(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterSizes()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_13cluster_sizes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_13cluster_sizes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_13cluster_sizes___get__(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_13cluster_sizes___get__(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "freud/cluster.pxi":370
 *     @property
 *     def cluster_sizes(self):
 *         return self.getClusterSizes()             # <<<<<<<<<<<<<<
 * 
 *     def getClusterSizes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getClusterSizes); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 370, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 370, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "freud/cluster.pxi":369
 * 
 *     @property
 *     def cluster_sizes(self):             # <<<<<<<<<<<<<<
 *         return self.getClusterSizes()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("freud._freud.ClusterProperties.cluster_sizes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "freud/cluster.pxi":372
 *         return self.getClusterSizes()
 * 
 *     def getClusterSizes(self):             # <<<<<<<<<<<<<<
 *         """Returns the cluster sizes computed by the last call to
 *         :py:meth:`~.computeProperties()`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_15getClusterSizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17ClusterProperties_14getClusterSizes[] = "ClusterProperties.getClusterSizes(self)\nReturns the cluster sizes computed by the last call to\n        :py:meth:`~.computeProperties()`.\n\n        Returns:\n            (:math:`N_{clusters}`) :class:`numpy.ndarray`:\n                Sizes of each cluster.\n        ";
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_15getClusterSizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClusterSizes (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_14getClusterSizes(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_14getClusterSizes(struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  unsigned int *__pyx_v_cluster_sizes_raw;
  npy_intp __pyx_v_nClusters[1];
  PyArrayObject *__pyx_v_result = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getClusterSizes", 0);
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "freud/cluster.pxi":381
 *         """
 *         cdef unsigned int * cluster_sizes_raw = \
 *             self.thisptr.getClusterSize().get()             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp nClusters[1]
 *         nClusters[0] = <np.npy_intp> self.thisptr.getNumClusters()
 */
  __pyx_v_cluster_sizes_raw = __pyx_v_self->thisptr->getClusterSize().get();

  /* "freud/cluster.pxi":383
 *             self.thisptr.getClusterSize().get()
 *         cdef np.npy_intp nClusters[1]
 *         nClusters[0] = <np.npy_intp> self.thisptr.getNumClusters()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(
 */
  (__pyx_v_nClusters[0]) = ((npy_intp)__pyx_v_self->thisptr->getNumClusters());

  /* "freud/cluster.pxi":385
 *         nClusters[0] = <np.npy_intp> self.thisptr.getNumClusters()
 *         cdef np.ndarray[np.uint32_t, ndim=1] result = \
 *             np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *                 1, nClusters, np.NPY_UINT32, <void*> cluster_sizes_raw)
 *         return result
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_nClusters, NPY_UINT32, ((void *)__pyx_v_cluster_sizes_raw)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(3, 385, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(3, 384, __pyx_L1_error)
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "freud/cluster.pxi":387
 *             np.PyArray_SimpleNewFromData(
 *                 1, nClusters, np.NPY_UINT32, <void*> cluster_sizes_raw)
 *         return result             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "freud/cluster.pxi":372
 *         return self.getClusterSizes()
 * 
 *     def getClusterSizes(self):             # <<<<<<<<<<<<<<
 *         """Returns the cluster sizes computed by the last call to
 *         :py:meth:`~.computeProperties()`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("freud._freud.ClusterProperties.getClusterSizes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5freud_6_freud_17ClusterProperties_16__reduce_cython__[] = "ClusterProperties.__reduce_cython__(self)";
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_16__reduce_cython__(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__85, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.ClusterProperties.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5freud_6_freud_17ClusterProperties_18__setstate_cython__[] = "ClusterProperties.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5freud_6_freud_17ClusterProperties_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5freud_6_freud_17ClusterProperties_18__setstate_cython__(((struct __pyx_obj_5freud_6_freud_ClusterProperties *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5freud_6_freud_17ClusterProperties_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5freud_6_freud_ClusterProperties *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__86, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("freud._freud.ClusterProperties.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":223
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":225
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(4, 229, __pyx_L1_error)

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":232
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__88, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(4, 233, __pyx_L1_error)

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":236
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":240
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":241
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":242
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":244
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":247
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":249
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":253
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":254
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":260
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__89, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(4, 263, __pyx_L1_error)

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(4, 282, __pyx_L1_error)
      break;
    }

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_8 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_8 == ((char *)NULL))) __PYX_ERR(4, 289, __pyx_L1_error)
    __pyx_v_f = __pyx_t_8;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":295
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":296
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":295
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":298
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":781
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":782
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":781
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":787
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":787
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":792
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":802
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(4, 805, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 805, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(4, 806, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(4, 806, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":807
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(4, 807, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(4, 807, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(4, 807, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 809, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__90, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(4, 810, __pyx_L1_error)

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__91, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 814, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(4, 814, __pyx_L1_error)

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":824
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":832
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__92, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 834, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(4, 834, __pyx_L1_error)

        /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":843
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 843, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 843, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 844, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 844, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 845, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 845, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 855, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 855, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(4, 855, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":856
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(4, 860, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":861
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":979
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":979
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":982
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":983
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":984
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":985
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":987
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":988
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":989
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":988
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":987
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":996
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 998, __pyx_L3_error)

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":999
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(4, 999, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__93, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(4, 1000, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":996
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1004
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 1004, __pyx_L3_error)

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1005
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(4, 1005, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1006
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__94, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 1006, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(4, 1006, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 1010, __pyx_L3_error)

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1011
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(4, 1011, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__95, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 1012, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(4, 1012, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_float(const std::vector<float>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_float", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_unsigned_int____unsigned_int")
 * cdef object __pyx_convert_map_to_py_unsigned_int____unsigned_int(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_map_to_py_unsigned_int____unsigned_int(std::map<unsigned int,unsigned int>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<unsigned int,unsigned int> ::value_type const *__pyx_v_key_value;
  std::map<unsigned int,unsigned int> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_unsigned_int____unsigned_int", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_map_to_py_unsigned_int____unsigned_int")
 * cdef object __pyx_convert_map_to_py_unsigned_int____unsigned_int(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(2, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_unsigned_int____unsigned_int")
 * cdef object __pyx_convert_map_to_py_unsigned_int____unsigned_int(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_unsigned_int____unsigned_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_unsigned_int")
 * cdef object __pyx_convert_vector_to_py_unsigned_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_unsigned_int(const std::vector<unsigned int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_unsigned_int", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_unsigned_int")
 * cdef object __pyx_convert_vector_to_py_unsigned_int(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_unsigned_int")
 * cdef object __pyx_convert_vector_to_py_unsigned_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_unsigned_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_unsigned_int_3e___(const std::vector<std::vector<unsigned int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_unsigned_int_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_unsigned_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_unsigned_int_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py_unsigned_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_unsigned_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_unsigned_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_unsigned_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5freud_6_freud_CubaticOrderParameter(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5freud_6_freud_21CubaticOrderParameter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_CubaticOrderParameter(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_CubaticOrderParameter[] = {
  {"compute", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_3compute, METH_O, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_2compute},
  {"get_t_initial", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_5get_t_initial, METH_NOARGS, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_4get_t_initial},
  {"get_t_final", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_7get_t_final, METH_NOARGS, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_6get_t_final},
  {"get_scale", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_9get_scale, METH_NOARGS, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_8get_scale},
  {"get_cubatic_order_parameter", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_11get_cubatic_order_parameter, METH_NOARGS, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_10get_cubatic_order_parameter},
  {"get_orientation", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_13get_orientation, METH_NOARGS, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_12get_orientation},
  {"get_particle_op", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_15get_particle_op, METH_NOARGS, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_14get_particle_op},
  {"get_particle_tensor", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_17get_particle_tensor, METH_NOARGS, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_16get_particle_tensor},
  {"get_global_tensor", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_19get_global_tensor, METH_NOARGS, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_18get_global_tensor},
  {"get_cubatic_tensor", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_21get_cubatic_tensor, METH_NOARGS, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_20get_cubatic_tensor},
  {"get_gen_r4_tensor", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_23get_gen_r4_tensor, METH_NOARGS, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_22get_gen_r4_tensor},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_25__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_24__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_21CubaticOrderParameter_27__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_21CubaticOrderParameter_26__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_CubaticOrderParameter = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.CubaticOrderParameter", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_CubaticOrderParameter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_CubaticOrderParameter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Compute the cubatic order parameter [HajiAkbari2015]_ for a system of\n    particles using simulated annealing instead of Newton-Raphson root finding.\n\n    .. moduleauthor:: Eric Harper <harperic@umich.edu>\n\n    Args:\n        t_initial (float):\n            Starting temperature.\n        t_final (float):\n            Final temperature.\n        scale (float):\n            Scaling factor to reduce temperature.\n        n_replicates (unsigned int):\n            Number of replicate simulated annealing runs.\n        seed (unsigned int):\n            Random seed to use in calculations. If None, system time is used.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_CubaticOrderParameter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_CubaticOrderParameter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_NematicOrderParameter(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5freud_6_freud_21NematicOrderParameter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_NematicOrderParameter(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_NematicOrderParameter[] = {
  {"compute", (PyCFunction)__pyx_pw_5freud_6_freud_21NematicOrderParameter_3compute, METH_O, __pyx_doc_5freud_6_freud_21NematicOrderParameter_2compute},
  {"get_nematic_order_parameter", (PyCFunction)__pyx_pw_5freud_6_freud_21NematicOrderParameter_5get_nematic_order_parameter, METH_NOARGS, __pyx_doc_5freud_6_freud_21NematicOrderParameter_4get_nematic_order_parameter},
  {"get_director", (PyCFunction)__pyx_pw_5freud_6_freud_21NematicOrderParameter_7get_director, METH_NOARGS, __pyx_doc_5freud_6_freud_21NematicOrderParameter_6get_director},
  {"get_particle_tensor", (PyCFunction)__pyx_pw_5freud_6_freud_21NematicOrderParameter_9get_particle_tensor, METH_NOARGS, __pyx_doc_5freud_6_freud_21NematicOrderParameter_8get_particle_tensor},
  {"get_nematic_tensor", (PyCFunction)__pyx_pw_5freud_6_freud_21NematicOrderParameter_11get_nematic_tensor, METH_NOARGS, __pyx_doc_5freud_6_freud_21NematicOrderParameter_10get_nematic_tensor},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_21NematicOrderParameter_13__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_21NematicOrderParameter_12__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_21NematicOrderParameter_15__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_21NematicOrderParameter_14__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_NematicOrderParameter = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.NematicOrderParameter", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_NematicOrderParameter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_NematicOrderParameter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Compute the nematic order parameter for a system of particles.\n\n    .. moduleauthor:: Jens Glaser <jsglaser@umich.edu>\n\n    .. versionadded:: 0.7.0\n\n    Args:\n        u (:math:`\\left(3 \\right)` :class:`numpy.ndarray`):\n            The nematic director of a single particle in the reference state\n            (without any rotation applied).\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_NematicOrderParameter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_NematicOrderParameter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_HexOrderParameter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_HexOrderParameter *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_HexOrderParameter *)o);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  p->rmax = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_17HexOrderParameter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_HexOrderParameter(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_HexOrderParameter *p = (struct __pyx_obj_5freud_6_freud_HexOrderParameter *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_17HexOrderParameter_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->num_neigh);
  Py_CLEAR(p->rmax);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5freud_6_freud_HexOrderParameter(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_HexOrderParameter *p = (struct __pyx_obj_5freud_6_freud_HexOrderParameter *)o;
  if (p->num_neigh) {
    e = (*v)(p->num_neigh, a); if (e) return e;
  }
  if (p->rmax) {
    e = (*v)(p->rmax, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_HexOrderParameter(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_HexOrderParameter *p = (struct __pyx_obj_5freud_6_freud_HexOrderParameter *)o;
  tmp = ((PyObject*)p->num_neigh);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rmax);
  p->rmax = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5freud_6_freud_17HexOrderParameter_psi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17HexOrderParameter_3psi_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_17HexOrderParameter_box(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17HexOrderParameter_3box_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_17HexOrderParameter_num_particles(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17HexOrderParameter_13num_particles_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_17HexOrderParameter_k(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17HexOrderParameter_1k_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_HexOrderParameter[] = {
  {"compute", (PyCFunction)__pyx_pw_5freud_6_freud_17HexOrderParameter_5compute, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_17HexOrderParameter_4compute},
  {"getPsi", (PyCFunction)__pyx_pw_5freud_6_freud_17HexOrderParameter_7getPsi, METH_NOARGS, __pyx_doc_5freud_6_freud_17HexOrderParameter_6getPsi},
  {"getBox", (PyCFunction)__pyx_pw_5freud_6_freud_17HexOrderParameter_9getBox, METH_NOARGS, __pyx_doc_5freud_6_freud_17HexOrderParameter_8getBox},
  {"getNP", (PyCFunction)__pyx_pw_5freud_6_freud_17HexOrderParameter_11getNP, METH_NOARGS, __pyx_doc_5freud_6_freud_17HexOrderParameter_10getNP},
  {"getK", (PyCFunction)__pyx_pw_5freud_6_freud_17HexOrderParameter_13getK, METH_NOARGS, __pyx_doc_5freud_6_freud_17HexOrderParameter_12getK},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_17HexOrderParameter_15__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_17HexOrderParameter_14__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_17HexOrderParameter_17__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_17HexOrderParameter_16__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_HexOrderParameter[] = {
  {(char *)"psi", __pyx_getprop_5freud_6_freud_17HexOrderParameter_psi, 0, (char *)0, 0},
  {(char *)"box", __pyx_getprop_5freud_6_freud_17HexOrderParameter_box, 0, (char *)0, 0},
  {(char *)"num_particles", __pyx_getprop_5freud_6_freud_17HexOrderParameter_num_particles, 0, (char *)0, 0},
  {(char *)"k", __pyx_getprop_5freud_6_freud_17HexOrderParameter_k, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_HexOrderParameter = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.HexOrderParameter", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_HexOrderParameter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_HexOrderParameter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Calculates the :math:`k`-atic order parameter for each particle in the\n    system.\n\n    The :math:`k`-atic order parameter for a particle :math:`i` and its\n    :math:`n` neighbors :math:`j` is given by:\n\n    :math:`\\psi_k \\left( i \\right) = \\frac{1}{n}\n    \\sum_j^n e^{k i \\phi_{ij}}`\n\n    The parameter :math:`k` governs the symmetry of the order parameter while\n    the parameter :math:`n` governs the number of neighbors of particle\n    :math:`i` to average over. :math:`\\phi_{ij}` is the angle between the\n    vector :math:`r_{ij}` and :math:`\\left( 1,0 \\right)`.\n\n    .. note::\n        2D: :py:class:`freud.cluster.Cluster` properly handles 2D boxes.\n        The points must be passed in as :code:`[x, y, 0]`.\n        Failing to set z=0 will lead to undefined behavior.\n\n    .. moduleauthor:: Eric Harper <harperic@umich.edu>\n\n    Args:\n        rmax (float):\n            +/- r distance to search for neighbors.\n        k (unsigned int):\n            Symmetry of order parameter (:math:`k=6` is hexatic).\n        n (unsigned int):\n            Number of neighbors (:math:`n=k` if :math:`n` not specified).\n\n    Attributes:\n        psi (:math:`\\left(N_{particles} \\right)` :class:`numpy.ndarray`):\n            Order parameter.\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n        num_particles (unsigned int):\n            Number of particles.\n        k (unsigned int):\n            Symmetry of the order parameter.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_HexOrderParameter, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_HexOrderParameter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_HexOrderParameter, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_HexOrderParameter, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_HexOrderParameter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_TransOrderParameter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_TransOrderParameter *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_TransOrderParameter *)o);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  p->rmax = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_19TransOrderParameter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_TransOrderParameter(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_TransOrderParameter *p = (struct __pyx_obj_5freud_6_freud_TransOrderParameter *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_19TransOrderParameter_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->num_neigh);
  Py_CLEAR(p->rmax);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5freud_6_freud_TransOrderParameter(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_TransOrderParameter *p = (struct __pyx_obj_5freud_6_freud_TransOrderParameter *)o;
  if (p->num_neigh) {
    e = (*v)(p->num_neigh, a); if (e) return e;
  }
  if (p->rmax) {
    e = (*v)(p->rmax, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_TransOrderParameter(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_TransOrderParameter *p = (struct __pyx_obj_5freud_6_freud_TransOrderParameter *)o;
  tmp = ((PyObject*)p->num_neigh);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rmax);
  p->rmax = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5freud_6_freud_19TransOrderParameter_d_r(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_19TransOrderParameter_3d_r_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_19TransOrderParameter_box(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_19TransOrderParameter_3box_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_19TransOrderParameter_num_particles(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_19TransOrderParameter_13num_particles_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_TransOrderParameter[] = {
  {"compute", (PyCFunction)__pyx_pw_5freud_6_freud_19TransOrderParameter_5compute, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_19TransOrderParameter_4compute},
  {"getDr", (PyCFunction)__pyx_pw_5freud_6_freud_19TransOrderParameter_7getDr, METH_NOARGS, __pyx_doc_5freud_6_freud_19TransOrderParameter_6getDr},
  {"getBox", (PyCFunction)__pyx_pw_5freud_6_freud_19TransOrderParameter_9getBox, METH_NOARGS, __pyx_doc_5freud_6_freud_19TransOrderParameter_8getBox},
  {"getNP", (PyCFunction)__pyx_pw_5freud_6_freud_19TransOrderParameter_11getNP, METH_NOARGS, __pyx_doc_5freud_6_freud_19TransOrderParameter_10getNP},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_19TransOrderParameter_13__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_19TransOrderParameter_12__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_19TransOrderParameter_15__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_19TransOrderParameter_14__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_TransOrderParameter[] = {
  {(char *)"d_r", __pyx_getprop_5freud_6_freud_19TransOrderParameter_d_r, 0, (char *)0, 0},
  {(char *)"box", __pyx_getprop_5freud_6_freud_19TransOrderParameter_box, 0, (char *)0, 0},
  {(char *)"num_particles", __pyx_getprop_5freud_6_freud_19TransOrderParameter_num_particles, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_TransOrderParameter = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.TransOrderParameter", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_TransOrderParameter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_TransOrderParameter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Compute the translational order parameter for each particle.\n\n    .. moduleauthor:: Michael Engel <engelmm@umich.edu>\n\n    Args:\n        rmax (float):\n            +/- r distance to search for neighbors.\n        k (float):\n            Symmetry of order parameter (:math:`k=6` is hexatic).\n        n (unsigned int):\n            Number of neighbors (:math:`n=k` if :math:`n` not specified).\n\n    Attributes:\n        d_r (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            Reference to the last computed translational order array.\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n        num_particles (unsigned int):\n            Number of particles.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_TransOrderParameter, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_TransOrderParameter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_TransOrderParameter, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_TransOrderParameter, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_TransOrderParameter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_LocalQl(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_LocalQl *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_LocalQl *)o);
  p->m_box = Py_None; Py_INCREF(Py_None);
  p->rmax = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_7LocalQl_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_LocalQl(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_LocalQl *p = (struct __pyx_obj_5freud_6_freud_LocalQl *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_7LocalQl_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->m_box);
  Py_CLEAR(p->rmax);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5freud_6_freud_LocalQl(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_LocalQl *p = (struct __pyx_obj_5freud_6_freud_LocalQl *)o;
  if (p->m_box) {
    e = (*v)(p->m_box, a); if (e) return e;
  }
  if (p->rmax) {
    e = (*v)(p->rmax, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_LocalQl(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_LocalQl *p = (struct __pyx_obj_5freud_6_freud_LocalQl *)o;
  tmp = ((PyObject*)p->m_box);
  p->m_box = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rmax);
  p->rmax = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5freud_6_freud_7LocalQl_box(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7LocalQl_3box_1__get__(o);
}

static int __pyx_setprop_5freud_6_freud_7LocalQl_box(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5freud_6_freud_7LocalQl_3box_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5freud_6_freud_7LocalQl_num_particles(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7LocalQl_13num_particles_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_7LocalQl_Ql(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7LocalQl_2Ql_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_7LocalQl_ave_Ql(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7LocalQl_6ave_Ql_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_7LocalQl_norm_Ql(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7LocalQl_7norm_Ql_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_7LocalQl_ave_norm_Ql(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7LocalQl_11ave_norm_Ql_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_LocalQl[] = {
  {"getBox", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_5getBox, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalQl_4getBox},
  {"setBox", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_7setBox, METH_O, __pyx_doc_5freud_6_freud_7LocalQl_6setBox},
  {"getNP", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_9getNP, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalQl_8getNP},
  {"getQl", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_11getQl, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalQl_10getQl},
  {"getAveQl", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_13getAveQl, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalQl_12getAveQl},
  {"getQlNorm", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_15getQlNorm, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalQl_14getQlNorm},
  {"getQlAveNorm", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_17getQlAveNorm, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalQl_16getQlAveNorm},
  {"compute", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_19compute, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_7LocalQl_18compute},
  {"computeAve", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_21computeAve, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_7LocalQl_20computeAve},
  {"computeNorm", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_23computeNorm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_7LocalQl_22computeNorm},
  {"computeAveNorm", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_25computeAveNorm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_7LocalQl_24computeAveNorm},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_27__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalQl_26__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalQl_29__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_7LocalQl_28__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_LocalQl[] = {
  {(char *)"box", __pyx_getprop_5freud_6_freud_7LocalQl_box, __pyx_setprop_5freud_6_freud_7LocalQl_box, (char *)0, 0},
  {(char *)"num_particles", __pyx_getprop_5freud_6_freud_7LocalQl_num_particles, 0, (char *)0, 0},
  {(char *)"Ql", __pyx_getprop_5freud_6_freud_7LocalQl_Ql, 0, (char *)0, 0},
  {(char *)"ave_Ql", __pyx_getprop_5freud_6_freud_7LocalQl_ave_Ql, 0, (char *)0, 0},
  {(char *)"norm_Ql", __pyx_getprop_5freud_6_freud_7LocalQl_norm_Ql, 0, (char *)0, 0},
  {(char *)"ave_norm_Ql", __pyx_getprop_5freud_6_freud_7LocalQl_ave_norm_Ql, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_LocalQl = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.LocalQl", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_LocalQl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_LocalQl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Compute the local Steinhardt [Steinhardt1983]_ rotationally invariant\n    :math:`Q_l` [Lechner2008]_ order parameter for a set of points.\n\n    Implements the local rotationally invariant :math:`Q_l` order parameter\n    described by Steinhardt. For a particle i, we calculate the average\n    :math:`Q_l` by summing the spherical harmonics between particle :math:`i`\n    and its neighbors :math:`j` in a local region:\n    :math:`\\overline{Q}_{lm}(i) = \\frac{1}{N_b}\n    \\displaystyle\\sum_{j=1}^{N_b} Y_{lm}(\\theta(\\vec{r}_{ij}),\n    \\phi(\\vec{r}_{ij}))`.\n\n    This is then combined in a rotationally invariant fashion to remove local\n    orientational order as follows: :math:`Q_l(i)=\\sqrt{\\frac{4\\pi}{2l+1}\n    \\displaystyle\\sum_{m=-l}^{l} |\\overline{Q}_{lm}|^2 }`.\n\n    Added first/second shell combined average :math:`Q_l` order parameter for\n    a set of points:\n\n    * Variation of the Steinhardt :math:`Q_l` order parameter\n    * For a particle i, we calculate the average :math:`Q_l` by summing the\n      spherical harmonics between particle i and its neighbors j and the\n      neighbors k of neighbor j in a local region.\n\n    .. moduleauthor:: Xiyu Du <xiyudu@umich.edu>\n    .. moduleauthor:: Vyas Ramasubramani <vramasub@umich.edu>\n\n    Args:\n        box (:py:class:`freud.box.Box`):\n            Simulation box.\n        rmax (float):\n            Cutoff radius for the local order parameter. Values near the first\n            minimum of the RDF are recommended.\n        l (unsigned int):\n            Spherical harmonic quantum number l. Must be a positive number.\n        rmin (float):\n            Can look at only the second shell or some arbitrary RDF region.\n\n    Attributes:\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n        num_particles (unsigned int):\n            Number of particles.\n        Ql (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last com""puted :math:`Q_l` for each particle (filled with NaN\n            for particles with no neighbors).\n        ave_Ql (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{Q_l}` for each particle (filled with\n            NaN for particles with no neighbors).\n        norm_Ql (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`Q_l` for each particle normalized by the\n            value over all particles (filled with NaN for particles with no\n            neighbors).\n        ave_norm_Ql (:math:`\\left(N_{particles}\\right)`         :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{Q_l}` for each particle normalized\n            by the value over all particles (filled with NaN for particles with\n            no neighbors).\n\n    .. todo:: move box to compute, this is old API\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_LocalQl, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_LocalQl, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_LocalQl, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_LocalQl, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_LocalQl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_LocalQlNear(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_LocalQlNear *p;
  PyObject *o = __pyx_tp_new_5freud_6_freud_LocalQl(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_LocalQlNear *)o);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_11LocalQlNear_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_LocalQlNear(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_LocalQlNear *p = (struct __pyx_obj_5freud_6_freud_LocalQlNear *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_11LocalQlNear_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->num_neigh);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5freud_6_freud_LocalQl(o);
}

static int __pyx_tp_traverse_5freud_6_freud_LocalQlNear(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_LocalQlNear *p = (struct __pyx_obj_5freud_6_freud_LocalQlNear *)o;
  e = __pyx_tp_traverse_5freud_6_freud_LocalQl(o, v, a); if (e) return e;
  if (p->num_neigh) {
    e = (*v)(p->num_neigh, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_LocalQlNear(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_LocalQlNear *p = (struct __pyx_obj_5freud_6_freud_LocalQlNear *)o;
  __pyx_tp_clear_5freud_6_freud_LocalQl(o);
  tmp = ((PyObject*)p->num_neigh);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5freud_6_freud_LocalQlNear[] = {
  {"computeAve", (PyCFunction)__pyx_pw_5freud_6_freud_11LocalQlNear_5computeAve, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_11LocalQlNear_4computeAve},
  {"computeNorm", (PyCFunction)__pyx_pw_5freud_6_freud_11LocalQlNear_7computeNorm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_11LocalQlNear_6computeNorm},
  {"computeAveNorm", (PyCFunction)__pyx_pw_5freud_6_freud_11LocalQlNear_9computeAveNorm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_11LocalQlNear_8computeAveNorm},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_11LocalQlNear_11__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_11LocalQlNear_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_11LocalQlNear_13__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_11LocalQlNear_12__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_LocalQlNear = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.LocalQlNear", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_LocalQlNear), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_LocalQlNear, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Compute the local Steinhardt [Steinhardt1983]_ rotationally invariant\n    :math:`Q_l` order parameter [Lechner2008]_ for a set of points.\n\n    Implements the local rotationally invariant :math:`Q_l` order parameter\n    described by Steinhardt. For a particle i, we calculate the average\n    :math:`Q_l` by summing the spherical harmonics between particle :math:`i`\n    and its neighbors :math:`j` in a local region:\n    :math:`\\overline{Q}_{lm}(i) = \\frac{1}{N_b}\n    \\displaystyle\\sum_{j=1}^{N_b} Y_{lm}(\\theta(\\vec{r}_{ij}),\n    \\phi(\\vec{r}_{ij}))`\n\n    This is then combined in a rotationally invariant fashion to remove local\n    orientational order as follows: :math:`Q_l(i)=\\sqrt{\\frac{4\\pi}{2l+1}\n    \\displaystyle\\sum_{m=-l}^{l} |\\overline{Q}_{lm}|^2 }`\n\n    Added first/second shell combined average :math:`Q_l` order parameter for\n    a set of points:\n\n    * Variation of the Steinhardt :math:`Q_l` Order parameter.\n    * For a particle i, we calculate the average :math:`Q_l` by summing the\n      spherical harmonics between particle i and its neighbors j and the\n      neighbors k of neighbor j in a local region.\n\n    .. moduleauthor:: Xiyu Du <xiyudu@umich.edu>\n    .. moduleauthor:: Vyas Ramasubramani <vramasub@umich.edu>\n\n    Args:\n        box (:py:class:`freud.box.Box`):\n            Simulation box.\n        rmax (float):\n            Cutoff radius for the local order parameter. Values near the first\n            minimum of the RDF are recommended.\n        l (unsigned int):\n            Spherical harmonic quantum number l. Must be a positive number.\n        kn (unsigned int):\n            Number of nearest neighbors. must be a positive integer.\n\n    Attributes:\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n        num_particles (unsigned int):\n            Number of particles.\n        Ql (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last comput""ed :math:`Q_l` for each particle (filled with NaN\n            for particles with no neighbors).\n        ave_Ql (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{Q_l}` for each particle (filled with\n            NaN for particles with no neighbors).\n        norm_Ql (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`Q_l` for each particle normalized by the\n            value over all particles (filled with NaN for particles with no\n            neighbors).\n        ave_norm_Ql (:math:`\\left(N_{particles}\\right)`         :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{Q_l}` for each particle normalized\n            by the value over all particles (filled with NaN for particles with\n            no neighbors).\n\n    .. todo:: move box to compute, this is old API\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_LocalQlNear, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_LocalQlNear, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_LocalQlNear, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_LocalQlNear, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_LocalWl(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5freud_6_freud_LocalQl(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5freud_6_freud_7LocalWl_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_LocalWl(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_7LocalWl_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5freud_6_freud_LocalQl(o);
}

static PyObject *__pyx_tp_getattro_5freud_6_freud_LocalWl(PyObject *o, PyObject *n) {
  PyObject *v = __pyx_pw_5freud_6_freud_7LocalWl_5__getattribute__(o, n);
  return v;
}

static PyObject *__pyx_getprop_5freud_6_freud_7LocalWl_Wl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7LocalWl_2Wl_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_7LocalWl_ave_Wl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7LocalWl_6ave_Wl_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_7LocalWl_norm_Wl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7LocalWl_7norm_Wl_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_7LocalWl_ave_norm_Wl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7LocalWl_11ave_norm_Wl_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_LocalWl[] = {
  {"__dir__", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalWl_7__dir__, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalWl_6__dir__},
  {"getWl", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalWl_9getWl, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalWl_8getWl},
  {"getAveWl", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalWl_11getAveWl, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalWl_10getAveWl},
  {"getWlNorm", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalWl_13getWlNorm, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalWl_12getWlNorm},
  {"getWlAveNorm", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalWl_15getWlAveNorm, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalWl_14getWlAveNorm},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalWl_17__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_7LocalWl_16__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_7LocalWl_19__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_7LocalWl_18__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_LocalWl[] = {
  {(char *)"Wl", __pyx_getprop_5freud_6_freud_7LocalWl_Wl, 0, (char *)0, 0},
  {(char *)"ave_Wl", __pyx_getprop_5freud_6_freud_7LocalWl_ave_Wl, 0, (char *)0, 0},
  {(char *)"norm_Wl", __pyx_getprop_5freud_6_freud_7LocalWl_norm_Wl, 0, (char *)0, 0},
  {(char *)"ave_norm_Wl", __pyx_getprop_5freud_6_freud_7LocalWl_ave_norm_Wl, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_LocalWl = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.LocalWl", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_LocalWl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_LocalWl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_5freud_6_freud_LocalWl, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Compute the local Steinhardt [Steinhardt1983]_ rotationally invariant\n    :math:`W_l` order parameter [Lechner2008]_ for a set of points.\n\n    Implements the local rotationally invariant :math:`W_l` order parameter\n    described by Steinhardt that can aid in distinguishing  between FCC, HCP,\n    and BCC.\n\n    Added first/second shell combined average :math:`W_l` order parameter for\n    a set of points:\n\n    * Variation of the Steinhardt :math:`W_l` order parameter.\n    * For a particle i, we calculate the average :math:`W_l` by summing the\n      spherical harmonics between particle i and its neighbors j and the\n      neighbors k of neighbor j in a local region.\n\n    .. moduleauthor:: Xiyu Du <xiyudu@umich.edu>\n    .. moduleauthor:: Vyas Ramasubramani <vramasub@umich.edu>\n\n    Args:\n        box (:py:class:`freud.box.Box`):\n            Simulation box.\n        rmax (float):\n            Cutoff radius for the local order parameter. Values near the first\n            minimum of the RDF are recommended.\n        l (unsigned int):\n            Spherical harmonic quantum number l. Must be a positive number\n        rmin (float):\n            Lower bound for computing the local order parameter. Allows looking\n            at, for instance, only the second shell, or some other arbitrary\n            RDF region.\n\n    Attributes:\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n        num_particles (unsigned int):\n            Number of particles.\n        Ql (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`Q_l` for each particle (filled with NaN\n            for particles with no neighbors).\n        ave_Ql (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{Q_l}` for each particle (filled with\n            NaN for particles with no neighbors).\n        norm_Ql (:math:`\\left(N_{particles}\\right)` :class:`""numpy.ndarray`):\n            The last computed :math:`Q_l` for each particle normalized by the\n            value over all particles (filled with NaN for particles with no\n            neighbors).\n        ave_norm_Ql (:math:`\\left(N_{particles}\\right)`         :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{Q_l}` for each particle normalized\n            by the value over all particles (filled with NaN for particles with\n            no neighbors).\n        Wl (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`W_l` for each particle (filled with NaN\n            for particles with no neighbors).\n        ave_Wl (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{W}_l` for each particle (filled with\n            NaN for particles with no neighbors).\n        norm_Wl (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`W_l` for each particle normalized by the\n            value over all particles (filled with NaN for particles with no\n            neighbors).\n        ave_norm_Wl (:math:`\\left(N_{particles}\\right)`         :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{W}_l` for each particle normalized\n            by the value over all particles (filled with NaN for particles with\n            no neighbors).\n\n    .. todo:: move box to compute, this is old API\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_LocalQl, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_LocalQl, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_LocalWl, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_LocalWl, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_LocalWl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_LocalWlNear(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_LocalWlNear *p;
  PyObject *o = __pyx_tp_new_5freud_6_freud_LocalWl(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_LocalWlNear *)o);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_11LocalWlNear_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_LocalWlNear(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_LocalWlNear *p = (struct __pyx_obj_5freud_6_freud_LocalWlNear *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_11LocalWlNear_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->num_neigh);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5freud_6_freud_LocalWl(o);
}

static int __pyx_tp_traverse_5freud_6_freud_LocalWlNear(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_LocalWlNear *p = (struct __pyx_obj_5freud_6_freud_LocalWlNear *)o;
  e = __pyx_tp_traverse_5freud_6_freud_LocalQl(o, v, a); if (e) return e;
  if (p->num_neigh) {
    e = (*v)(p->num_neigh, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_LocalWlNear(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_LocalWlNear *p = (struct __pyx_obj_5freud_6_freud_LocalWlNear *)o;
  __pyx_tp_clear_5freud_6_freud_LocalQl(o);
  tmp = ((PyObject*)p->num_neigh);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5freud_6_freud_LocalWlNear[] = {
  {"computeAve", (PyCFunction)__pyx_pw_5freud_6_freud_11LocalWlNear_5computeAve, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_11LocalWlNear_4computeAve},
  {"computeNorm", (PyCFunction)__pyx_pw_5freud_6_freud_11LocalWlNear_7computeNorm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_11LocalWlNear_6computeNorm},
  {"computeAveNorm", (PyCFunction)__pyx_pw_5freud_6_freud_11LocalWlNear_9computeAveNorm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_11LocalWlNear_8computeAveNorm},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_11LocalWlNear_11__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_11LocalWlNear_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_11LocalWlNear_13__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_11LocalWlNear_12__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_LocalWlNear = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.LocalWlNear", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_LocalWlNear), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_LocalWlNear, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Compute the local Steinhardt [Steinhardt1983]_ rotationally invariant\n    :math:`W_l` order parameter [Lechner2008]_ for a set of points.\n\n    Implements the local rotationally invariant :math:`W_l` order parameter\n    described by Steinhardt that can aid in distinguishing between FCC, HCP,\n    and BCC.\n\n    Added first/second shell combined average :math:`W_l` order parameter for a\n    set of points:\n\n    * Variation of the Steinhardt :math:`W_l` order parameter.\n    * For a particle i, we calculate the average :math:`W_l` by summing the\n      spherical harmonics between particle i and its neighbors j and the\n      neighbors k of neighbor j in a local region.\n\n    .. moduleauthor:: Xiyu Du <xiyudu@umich.edu>\n    .. moduleauthor:: Vyas Ramasubramani <vramasub@umich.edu>\n\n    Args:\n        box (:py:class:`freud.box.Box`):\n            Simulation box.\n        rmax (float):\n            Cutoff radius for the local order parameter. Values near the first\n            minimum of the RDF are recommended.\n        l (unsigned int):\n            Spherical harmonic quantum number l. Must be a positive number\n        kn (unsigned int):\n            Number of nearest neighbors. Must be a positive number.\n\n\n    Attributes:\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n        num_particles (unsigned int):\n            Number of particles.\n        Ql (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`Q_l` for each particle (filled with NaN\n            for particles with no neighbors).\n        ave_Ql (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{Q_l}` for each particle (filled with\n            NaN for particles with no neighbors).\n        norm_Ql (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`Q_l` for each particle normalized by the\n            ""value over all particles (filled with NaN for particles with no\n            neighbors).\n        ave_norm_Ql (:math:`\\left(N_{particles}\\right)`         :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{Q_l}` for each particle normalized\n            by the value over all particles (filled with NaN for particles with\n            no neighbors).\n        Wl (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`W_l` for each particle (filled with NaN\n            for particles with no neighbors).\n        ave_Wl (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{W}_l` for each particle (filled with\n            NaN for particles with no neighbors).\n        norm_Wl (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`W_l` for each particle normalized by the\n            value over all particles (filled with NaN for particles with no\n            neighbors).\n        ave_norm_Wl (:math:`\\left(N_{particles}\\right)`         :class:`numpy.ndarray`):\n            The last computed :math:`\\bar{W}_l` for each particle normalized\n            by the value over all particles (filled with NaN for particles with\n            no neighbors).\n\n    .. todo:: move box to compute, this is old API\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_LocalWlNear, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_LocalWlNear, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_LocalWlNear, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_LocalWlNear, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_SolLiq(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5freud_6_freud_SolLiq *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_SolLiq *)o);
  p->m_box = Py_None; Py_INCREF(Py_None);
  p->rmax = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5freud_6_freud_SolLiq(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_SolLiq *p = (struct __pyx_obj_5freud_6_freud_SolLiq *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_6SolLiq_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->m_box);
  Py_CLEAR(p->rmax);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5freud_6_freud_SolLiq(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_SolLiq *p = (struct __pyx_obj_5freud_6_freud_SolLiq *)o;
  if (p->m_box) {
    e = (*v)(p->m_box, a); if (e) return e;
  }
  if (p->rmax) {
    e = (*v)(p->rmax, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_SolLiq(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_SolLiq *p = (struct __pyx_obj_5freud_6_freud_SolLiq *)o;
  tmp = ((PyObject*)p->m_box);
  p->m_box = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rmax);
  p->rmax = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5freud_6_freud_6SolLiq_box(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_6SolLiq_3box_1__get__(o);
}

static int __pyx_setprop_5freud_6_freud_6SolLiq_box(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5freud_6_freud_6SolLiq_3box_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5freud_6_freud_6SolLiq_largest_cluster_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_6SolLiq_20largest_cluster_size_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_6SolLiq_cluster_sizes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_6SolLiq_13cluster_sizes_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_6SolLiq_Ql_mi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_6SolLiq_5Ql_mi_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_6SolLiq_clusters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_6SolLiq_8clusters_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_6SolLiq_num_connections(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_6SolLiq_15num_connections_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_6SolLiq_Ql_dot_ij(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_6SolLiq_9Ql_dot_ij_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_6SolLiq_num_particles(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_6SolLiq_13num_particles_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_SolLiq[] = {
  {"compute", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_5compute, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_6SolLiq_4compute},
  {"computeSolLiqVariant", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_7computeSolLiqVariant, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_6SolLiq_6computeSolLiqVariant},
  {"computeSolLiqNoNorm", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_9computeSolLiqNoNorm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_6SolLiq_8computeSolLiqNoNorm},
  {"getBox", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_11getBox, METH_NOARGS, __pyx_doc_5freud_6_freud_6SolLiq_10getBox},
  {"setClusteringRadius", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_13setClusteringRadius, METH_O, __pyx_doc_5freud_6_freud_6SolLiq_12setClusteringRadius},
  {"setBox", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_15setBox, METH_O, __pyx_doc_5freud_6_freud_6SolLiq_14setBox},
  {"getLargestClusterSize", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_17getLargestClusterSize, METH_NOARGS, __pyx_doc_5freud_6_freud_6SolLiq_16getLargestClusterSize},
  {"getClusterSizes", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_19getClusterSizes, METH_NOARGS, __pyx_doc_5freud_6_freud_6SolLiq_18getClusterSizes},
  {"getQlmi", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_21getQlmi, METH_NOARGS, __pyx_doc_5freud_6_freud_6SolLiq_20getQlmi},
  {"getClusters", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_23getClusters, METH_NOARGS, __pyx_doc_5freud_6_freud_6SolLiq_22getClusters},
  {"getNumberOfConnections", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_25getNumberOfConnections, METH_NOARGS, __pyx_doc_5freud_6_freud_6SolLiq_24getNumberOfConnections},
  {"getQldot_ij", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_27getQldot_ij, METH_NOARGS, __pyx_doc_5freud_6_freud_6SolLiq_26getQldot_ij},
  {"getNP", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_29getNP, METH_NOARGS, __pyx_doc_5freud_6_freud_6SolLiq_28getNP},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_31__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_6SolLiq_30__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_6SolLiq_33__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_6SolLiq_32__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_SolLiq[] = {
  {(char *)"box", __pyx_getprop_5freud_6_freud_6SolLiq_box, __pyx_setprop_5freud_6_freud_6SolLiq_box, (char *)0, 0},
  {(char *)"largest_cluster_size", __pyx_getprop_5freud_6_freud_6SolLiq_largest_cluster_size, 0, (char *)0, 0},
  {(char *)"cluster_sizes", __pyx_getprop_5freud_6_freud_6SolLiq_cluster_sizes, 0, (char *)0, 0},
  {(char *)"Ql_mi", __pyx_getprop_5freud_6_freud_6SolLiq_Ql_mi, 0, (char *)0, 0},
  {(char *)"clusters", __pyx_getprop_5freud_6_freud_6SolLiq_clusters, 0, (char *)0, 0},
  {(char *)"num_connections", __pyx_getprop_5freud_6_freud_6SolLiq_num_connections, 0, (char *)0, 0},
  {(char *)"Ql_dot_ij", __pyx_getprop_5freud_6_freud_6SolLiq_Ql_dot_ij, 0, (char *)0, 0},
  {(char *)"num_particles", __pyx_getprop_5freud_6_freud_6SolLiq_num_particles, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_SolLiq = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.SolLiq", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_SolLiq), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_SolLiq, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "SolLiq(box, rmax, Qthreshold, Sthreshold, l)\n\n    Computes dot products of :math:`Q_{lm}` between particles and uses these\n    for clustering.\n\n    .. moduleauthor:: Richmond Newman <newmanrs@umich.edu>\n\n    Args:\n        box (:py:class:`freud.box.Box`):\n            Simulation box.\n        rmax (float):\n            Cutoff radius for the local order parameter. Values near first\n            minimum of the RDF are recommended.\n        Qthreshold (float):\n            Value of dot product threshold when evaluating\n            :math:`Q_{lm}^*(i) Q_{lm}(j)` to determine if a neighbor pair is a\n            solid-like bond. (For :math:`l=6`, 0.7 generally good for FCC or\n            BCC structures).\n        Sthreshold (unsigned int):\n            Minimum required number of adjacent solid-link bonds for a particle\n            to be considered solid-like for clustering. (For :math:`l=6`, 6-8\n            is generally good for FCC or BCC structures).\n        l (unsigned int):\n            Choose spherical harmonic :math:`Q_l`. Must be positive and even.\n\n    Attributes:\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n        largest_cluster_size (unsigned int):\n            The largest cluster size. Must call a compute method first.\n        cluster_sizes (unsigned int):\n            The sizes of all clusters.\n        largest_cluster_size (unsigned int):\n            The largest cluster size. Must call a compute method first.\n        Ql_mi (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`Q_{lmi}` for each particle.\n        clusters (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed set of solid-like cluster indices for each\n            particle.\n        num_connections (:math:`\\left(N_{particles}\\right)`         :class:`numpy.ndarray`):\n            The number of connections per particle.\n        Ql_dot_ij (:math:`""\\left(N_{particles}\\right)`         :class:`numpy.ndarray`):\n            Reference to the qldot_ij values.\n        num_particles (unsigned int):\n            Number of particles.\n\n    .. todo:: move box to compute, this is old API\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_SolLiq, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_SolLiq, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_SolLiq, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_SolLiq, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5freud_6_freud_6SolLiq_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_SolLiq, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_SolLiqNear(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_SolLiqNear *p;
  PyObject *o = __pyx_tp_new_5freud_6_freud_SolLiq(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_SolLiqNear *)o);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5freud_6_freud_SolLiqNear(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_SolLiqNear *p = (struct __pyx_obj_5freud_6_freud_SolLiqNear *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_10SolLiqNear_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->num_neigh);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5freud_6_freud_SolLiq(o);
}

static int __pyx_tp_traverse_5freud_6_freud_SolLiqNear(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_SolLiqNear *p = (struct __pyx_obj_5freud_6_freud_SolLiqNear *)o;
  e = __pyx_tp_traverse_5freud_6_freud_SolLiq(o, v, a); if (e) return e;
  if (p->num_neigh) {
    e = (*v)(p->num_neigh, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_SolLiqNear(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_SolLiqNear *p = (struct __pyx_obj_5freud_6_freud_SolLiqNear *)o;
  __pyx_tp_clear_5freud_6_freud_SolLiq(o);
  tmp = ((PyObject*)p->num_neigh);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5freud_6_freud_SolLiqNear[] = {
  {"compute", (PyCFunction)__pyx_pw_5freud_6_freud_10SolLiqNear_5compute, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_10SolLiqNear_4compute},
  {"computeSolLiqVariant", (PyCFunction)__pyx_pw_5freud_6_freud_10SolLiqNear_7computeSolLiqVariant, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_10SolLiqNear_6computeSolLiqVariant},
  {"computeSolLiqNoNorm", (PyCFunction)__pyx_pw_5freud_6_freud_10SolLiqNear_9computeSolLiqNoNorm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_10SolLiqNear_8computeSolLiqNoNorm},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_10SolLiqNear_11__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_10SolLiqNear_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_10SolLiqNear_13__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_10SolLiqNear_12__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_SolLiqNear = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.SolLiqNear", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_SolLiqNear), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_SolLiqNear, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "SolLiqNear(box, rmax, Qthreshold, Sthreshold, l, kn=12)\n\n    Computes dot products of :math:`Q_{lm}` between particles and uses these\n    for clustering.\n\n    .. moduleauthor:: Richmond Newman <newmanrs@umich.edu>\n\n    Args:\n        box (:py:class:`freud.box.Box`):\n            Simulation box.\n        rmax (float):\n            Cutoff radius for the local order parameter. Values near the first\n            minimum of the RDF are recommended.\n        Qthreshold (float):\n            Value of dot product threshold when evaluating\n            :math:`Q_{lm}^*(i) Q_{lm}(j)` to determine if a neighbor pair is a\n            solid-like bond. (For :math:`l=6`, 0.7 generally good for FCC or\n            BCC structures).\n        Sthreshold (unsigned int):\n            Minimum required number of adjacent solid-link bonds for a particle\n            to be considered solid-like for clustering. (For :math:`l=6`, 6-8\n            is generally good for FCC or BCC structures).\n        l (unsigned int):\n            Choose spherical harmonic :math:`Q_l`. Must be positive and even.\n        kn (unsigned int):\n            Number of nearest neighbors. Must be a positive number.\n\n    Attributes:\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n        largest_cluster_size (unsigned int):\n            The largest cluster size. Must call a compute method first.\n        cluster_sizes (unsigned int):\n            The sizes of all clusters.\n        largest_cluster_size (unsigned int):\n            The largest cluster size. Must call a compute method first.\n        Ql_mi (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed :math:`Q_{lmi}` for each particle.\n        clusters (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The last computed set of solid-like cluster indices for each\n            particle.\n        num_connections (:math:`\\left(N_{particles}\\right)`      ""   :class:`numpy.ndarray`):\n            The number of connections per particle.\n        Ql_dot_ij (:math:`\\left(N_{particles}\\right)`         :class:`numpy.ndarray`):\n            Reference to the qldot_ij values.\n        num_particles (unsigned int):\n            Number of particles.\n\n    .. todo:: move box to compute, this is old API\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_SolLiqNear, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_SolLiqNear, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_SolLiqNear, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5freud_6_freud_10SolLiqNear_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_SolLiqNear, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_BondOrder(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_BondOrder *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_BondOrder *)o);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  p->rmax = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_9BondOrder_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_BondOrder(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_BondOrder *p = (struct __pyx_obj_5freud_6_freud_BondOrder *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_9BondOrder_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->num_neigh);
  Py_CLEAR(p->rmax);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5freud_6_freud_BondOrder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_BondOrder *p = (struct __pyx_obj_5freud_6_freud_BondOrder *)o;
  if (p->num_neigh) {
    e = (*v)(p->num_neigh, a); if (e) return e;
  }
  if (p->rmax) {
    e = (*v)(p->rmax, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_BondOrder(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_BondOrder *p = (struct __pyx_obj_5freud_6_freud_BondOrder *)o;
  tmp = ((PyObject*)p->num_neigh);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rmax);
  p->rmax = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5freud_6_freud_9BondOrder_bond_order(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_9BondOrder_10bond_order_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_9BondOrder_box(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_9BondOrder_3box_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_9BondOrder_theta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_9BondOrder_5theta_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_9BondOrder_phi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_9BondOrder_3phi_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_9BondOrder_n_bins_theta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_9BondOrder_12n_bins_theta_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_9BondOrder_n_bins_phi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_9BondOrder_10n_bins_phi_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_BondOrder[] = {
  {"accumulate", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_5accumulate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_9BondOrder_4accumulate},
  {"getBondOrder", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_7getBondOrder, METH_NOARGS, __pyx_doc_5freud_6_freud_9BondOrder_6getBondOrder},
  {"getBox", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_9getBox, METH_NOARGS, __pyx_doc_5freud_6_freud_9BondOrder_8getBox},
  {"resetBondOrder", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_11resetBondOrder, METH_NOARGS, __pyx_doc_5freud_6_freud_9BondOrder_10resetBondOrder},
  {"compute", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_13compute, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_9BondOrder_12compute},
  {"reduceBondOrder", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_15reduceBondOrder, METH_NOARGS, __pyx_doc_5freud_6_freud_9BondOrder_14reduceBondOrder},
  {"getTheta", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_17getTheta, METH_NOARGS, __pyx_doc_5freud_6_freud_9BondOrder_16getTheta},
  {"getPhi", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_19getPhi, METH_NOARGS, __pyx_doc_5freud_6_freud_9BondOrder_18getPhi},
  {"getNBinsTheta", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_21getNBinsTheta, METH_NOARGS, __pyx_doc_5freud_6_freud_9BondOrder_20getNBinsTheta},
  {"getNBinsPhi", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_23getNBinsPhi, METH_NOARGS, __pyx_doc_5freud_6_freud_9BondOrder_22getNBinsPhi},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_25__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_9BondOrder_24__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_9BondOrder_27__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_9BondOrder_26__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_BondOrder[] = {
  {(char *)"bond_order", __pyx_getprop_5freud_6_freud_9BondOrder_bond_order, 0, (char *)0, 0},
  {(char *)"box", __pyx_getprop_5freud_6_freud_9BondOrder_box, 0, (char *)0, 0},
  {(char *)"theta", __pyx_getprop_5freud_6_freud_9BondOrder_theta, 0, (char *)0, 0},
  {(char *)"phi", __pyx_getprop_5freud_6_freud_9BondOrder_phi, 0, (char *)0, 0},
  {(char *)"n_bins_theta", __pyx_getprop_5freud_6_freud_9BondOrder_n_bins_theta, 0, (char *)0, 0},
  {(char *)"n_bins_phi", __pyx_getprop_5freud_6_freud_9BondOrder_n_bins_phi, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_BondOrder = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.BondOrder", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_BondOrder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_BondOrder, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Compute the bond order diagram for the system of particles.\n\n    Available modes of calculation:\n\n    * If :code:`mode='bod'` (Bond Order Diagram, *default*):\n      Create the 2D histogram containing the number of bonds formed through\n      the surface of a unit sphere based on the azimuthal\n      :math:`\\left( \\theta \\right)` and polar\n      :math:`\\left( \\phi \\right)` angles.\n\n    * If :code:`mode='lbod'` (Local Bond Order Diagram):\n      Create the 2D histogram containing the number of bonds formed, rotated\n      into the local orientation of the central particle, through the surface\n      of a unit sphere based on the azimuthal :math:`\\left( \\theta \\right)`\n      and polar :math:`\\left( \\phi \\right)` angles.\n\n    * If :code:`mode='obcd'` (Orientation Bond Correlation Diagram):\n      Create the 2D histogram containing the number of bonds formed, rotated\n      by the rotation that takes the orientation of neighboring particle j to\n      the orientation of each particle i, through the surface of a unit sphere\n      based on the azimuthal :math:`\\left( \\theta \\right)` and polar\n      :math:`\\left( \\phi \\right)` angles.\n\n    * If :code:`mode='oocd'` (Orientation Orientation Correlation Diagram):\n      Create the 2D histogram containing the directors of neighboring particles\n      (:math:`\\hat{z}` rotated by their quaternion), rotated into the local\n      orientation of the central particle, through the surface of a unit\n      sphere based on the azimuthal :math:`\\left( \\theta \\right)` and\n      polar :math:`\\left( \\phi \\right)` angles.\n\n    .. moduleauthor:: Erin Teich <erteich@umich.edu>\n\n    Args:\n        r_max (float):\n            Distance over which to calculate.\n        k (unsigned int):\n            Order parameter i. To be removed.\n        n (unsigned int):\n            Number of neighbors to find.\n        n_bins_t (unsigned int):\n            Number of :math:`\\theta` bins.\n        n_bins_p ""(unsigned int):\n            Number of :math:`\\phi` bins.\n\n    Attributes:\n        bond_order (:math:`\\left(N_{\\phi}, N_{\\theta} \\right)`         :class:`numpy.ndarray`):\n            Bond order.\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n        theta (:math:`\\left(N_{\\theta} \\right)` :class:`numpy.ndarray`):\n            The values of bin centers for :math:`\\theta`.\n        phi (:math:`\\left(N_{\\phi} \\right)` :class:`numpy.ndarray`):\n            The values of bin centers for :math:`\\phi`.\n        n_bins_theta (unsigned int):\n            The number of bins in the :math:`\\theta` dimension.\n        n_bins_phi (unsigned int):\n            The number of bins in the :math:`\\phi` dimension.\n\n    .. todo:: remove k, it is not used as such.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_BondOrder, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_BondOrder, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_BondOrder, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_BondOrder, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_BondOrder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_LocalDescriptors(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_LocalDescriptors *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_LocalDescriptors *)o);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  p->rmax = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_16LocalDescriptors_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_LocalDescriptors(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_LocalDescriptors *p = (struct __pyx_obj_5freud_6_freud_LocalDescriptors *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_16LocalDescriptors_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->num_neigh);
  Py_CLEAR(p->rmax);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5freud_6_freud_LocalDescriptors(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_LocalDescriptors *p = (struct __pyx_obj_5freud_6_freud_LocalDescriptors *)o;
  if (p->num_neigh) {
    e = (*v)(p->num_neigh, a); if (e) return e;
  }
  if (p->rmax) {
    e = (*v)(p->rmax, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_LocalDescriptors(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_LocalDescriptors *p = (struct __pyx_obj_5freud_6_freud_LocalDescriptors *)o;
  tmp = ((PyObject*)p->num_neigh);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rmax);
  p->rmax = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5freud_6_freud_16LocalDescriptors_sph(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_16LocalDescriptors_3sph_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_16LocalDescriptors_num_particles(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_16LocalDescriptors_13num_particles_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_16LocalDescriptors_num_neighbors(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_16LocalDescriptors_13num_neighbors_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_16LocalDescriptors_l_max(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_16LocalDescriptors_5l_max_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_16LocalDescriptors_r_max(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_16LocalDescriptors_5r_max_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_LocalDescriptors[] = {
  {"computeNList", (PyCFunction)__pyx_pw_5freud_6_freud_16LocalDescriptors_5computeNList, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_16LocalDescriptors_4computeNList},
  {"compute", (PyCFunction)__pyx_pw_5freud_6_freud_16LocalDescriptors_7compute, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_16LocalDescriptors_6compute},
  {"getSph", (PyCFunction)__pyx_pw_5freud_6_freud_16LocalDescriptors_9getSph, METH_NOARGS, __pyx_doc_5freud_6_freud_16LocalDescriptors_8getSph},
  {"getNP", (PyCFunction)__pyx_pw_5freud_6_freud_16LocalDescriptors_11getNP, METH_NOARGS, __pyx_doc_5freud_6_freud_16LocalDescriptors_10getNP},
  {"getNSphs", (PyCFunction)__pyx_pw_5freud_6_freud_16LocalDescriptors_13getNSphs, METH_NOARGS, __pyx_doc_5freud_6_freud_16LocalDescriptors_12getNSphs},
  {"getLMax", (PyCFunction)__pyx_pw_5freud_6_freud_16LocalDescriptors_15getLMax, METH_NOARGS, __pyx_doc_5freud_6_freud_16LocalDescriptors_14getLMax},
  {"getRMax", (PyCFunction)__pyx_pw_5freud_6_freud_16LocalDescriptors_17getRMax, METH_NOARGS, __pyx_doc_5freud_6_freud_16LocalDescriptors_16getRMax},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_16LocalDescriptors_19__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_16LocalDescriptors_18__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_16LocalDescriptors_21__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_16LocalDescriptors_20__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_LocalDescriptors[] = {
  {(char *)"sph", __pyx_getprop_5freud_6_freud_16LocalDescriptors_sph, 0, (char *)0, 0},
  {(char *)"num_particles", __pyx_getprop_5freud_6_freud_16LocalDescriptors_num_particles, 0, (char *)0, 0},
  {(char *)"num_neighbors", __pyx_getprop_5freud_6_freud_16LocalDescriptors_num_neighbors, 0, (char *)0, 0},
  {(char *)"l_max", __pyx_getprop_5freud_6_freud_16LocalDescriptors_l_max, 0, (char *)0, 0},
  {(char *)"r_max", __pyx_getprop_5freud_6_freud_16LocalDescriptors_r_max, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_LocalDescriptors = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.LocalDescriptors", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_LocalDescriptors), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_LocalDescriptors, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Compute a set of descriptors (a numerical \"fingerprint\") of a particle's\n    local environment.\n\n    The resulting spherical harmonic array will be a complex-valued\n    array of shape `(num_bonds, num_sphs)`. Spherical harmonic\n    calculation can be restricted to some number of nearest neighbors\n    through the `num_neighbors` argument; if a particle has more bonds\n    than this number, the last one or more rows of bond spherical\n    harmonics for each particle will not be set.\n\n    .. moduleauthor:: Matthew Spellings <mspells@umich.edu>\n\n    Args:\n        num_neighbors (unsigned int):\n            Maximum number of neighbors to compute descriptors for.\n        lmax (unsigned int):\n            Maximum spherical harmonic :math:`l` to consider.\n        rmax (float):\n            Initial guess of the maximum radius to looks for neighbors.\n        negative_m (bool):\n            True if we should also calculate :math:`Y_{lm}` for negative\n            :math:`m`.\n\n    Attributes:\n        sph (:math:`\\left(N_{bonds}, \\text{SphWidth} \\right)`         :class:`numpy.ndarray`):\n            A reference to the last computed spherical harmonic array.\n        num_particles (unsigned int):\n            The number of particles.\n        num_neighbors (unsigned int):\n            The number of neighbors.\n        l_max (unsigned int):\n            The maximum spherical harmonic :math:`l` to calculate for.\n        r_max (float):\n            The cutoff radius.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_LocalDescriptors, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_LocalDescriptors, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_LocalDescriptors, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_LocalDescriptors, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_LocalDescriptors, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_MatchEnv(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_MatchEnv *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_MatchEnv *)o);
  p->rmax = Py_None; Py_INCREF(Py_None);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  p->m_box = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_8MatchEnv_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_MatchEnv(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_MatchEnv *p = (struct __pyx_obj_5freud_6_freud_MatchEnv *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_8MatchEnv_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->rmax);
  Py_CLEAR(p->num_neigh);
  Py_CLEAR(p->m_box);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5freud_6_freud_MatchEnv(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_MatchEnv *p = (struct __pyx_obj_5freud_6_freud_MatchEnv *)o;
  if (p->rmax) {
    e = (*v)(p->rmax, a); if (e) return e;
  }
  if (p->num_neigh) {
    e = (*v)(p->num_neigh, a); if (e) return e;
  }
  if (p->m_box) {
    e = (*v)(p->m_box, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_MatchEnv(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_MatchEnv *p = (struct __pyx_obj_5freud_6_freud_MatchEnv *)o;
  tmp = ((PyObject*)p->rmax);
  p->rmax = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->num_neigh);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->m_box);
  p->m_box = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5freud_6_freud_8MatchEnv_tot_environment(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_8MatchEnv_15tot_environment_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_8MatchEnv_num_particles(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_8MatchEnv_13num_particles_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_8MatchEnv_num_clusters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_8MatchEnv_12num_clusters_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_MatchEnv[] = {
  {"setBox", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_5setBox, METH_O, __pyx_doc_5freud_6_freud_8MatchEnv_4setBox},
  {"cluster", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_7cluster, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_8MatchEnv_6cluster},
  {"matchMotif", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_9matchMotif, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_8MatchEnv_8matchMotif},
  {"minRMSDMotif", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_11minRMSDMotif, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_8MatchEnv_10minRMSDMotif},
  {"isSimilar", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_13isSimilar, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_8MatchEnv_12isSimilar},
  {"minimizeRMSD", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_15minimizeRMSD, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_8MatchEnv_14minimizeRMSD},
  {"getClusters", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_17getClusters, METH_NOARGS, __pyx_doc_5freud_6_freud_8MatchEnv_16getClusters},
  {"getEnvironment", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_19getEnvironment, METH_O, __pyx_doc_5freud_6_freud_8MatchEnv_18getEnvironment},
  {"getTotEnvironment", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_21getTotEnvironment, METH_NOARGS, __pyx_doc_5freud_6_freud_8MatchEnv_20getTotEnvironment},
  {"getNP", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_23getNP, METH_NOARGS, __pyx_doc_5freud_6_freud_8MatchEnv_22getNP},
  {"getNumClusters", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_25getNumClusters, METH_NOARGS, __pyx_doc_5freud_6_freud_8MatchEnv_24getNumClusters},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_27__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_8MatchEnv_26__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_8MatchEnv_29__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_8MatchEnv_28__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_MatchEnv[] = {
  {(char *)"tot_environment", __pyx_getprop_5freud_6_freud_8MatchEnv_tot_environment, 0, (char *)0, 0},
  {(char *)"num_particles", __pyx_getprop_5freud_6_freud_8MatchEnv_num_particles, 0, (char *)0, 0},
  {(char *)"num_clusters", __pyx_getprop_5freud_6_freud_8MatchEnv_num_clusters, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_MatchEnv = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.MatchEnv", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_MatchEnv), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_MatchEnv, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Clusters particles according to whether their local environments match\n    or not, according to various shape matching metrics.\n\n    .. moduleauthor:: Erin Teich <erteich@umich.edu>\n\n    Args:\n        box (:class:`freud.box.Box`):\n            Simulation box.\n        rmax (float):\n            Cutoff radius for cell list and clustering algorithm. Values near\n            the first minimum of the RDF are recommended.\n        k (unsigned int):\n            Number of nearest neighbors taken to define the local environment\n            of any given particle.\n\n    Attributes:\n        tot_environment (:math:`\\left(N_{particles}, N_{neighbors},         3\\right)` :class:`numpy.ndarray`):\n            All environments for all particles.\n        num_particles (unsigned int):\n            The number of particles.\n        num_clusters (unsigned int):\n            The number of clusters.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_MatchEnv, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_MatchEnv, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_MatchEnv, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_MatchEnv, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_MatchEnv, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_Pairing2D(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_Pairing2D *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_Pairing2D *)o);
  p->rmax = Py_None; Py_INCREF(Py_None);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_9Pairing2D_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_Pairing2D(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_Pairing2D *p = (struct __pyx_obj_5freud_6_freud_Pairing2D *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_9Pairing2D_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->rmax);
  Py_CLEAR(p->num_neigh);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5freud_6_freud_Pairing2D(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_Pairing2D *p = (struct __pyx_obj_5freud_6_freud_Pairing2D *)o;
  if (p->rmax) {
    e = (*v)(p->rmax, a); if (e) return e;
  }
  if (p->num_neigh) {
    e = (*v)(p->num_neigh, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_Pairing2D(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_Pairing2D *p = (struct __pyx_obj_5freud_6_freud_Pairing2D *)o;
  tmp = ((PyObject*)p->rmax);
  p->rmax = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->num_neigh);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5freud_6_freud_9Pairing2D_match(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_9Pairing2D_5match_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_9Pairing2D_pair(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_9Pairing2D_4pair_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_9Pairing2D_box(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_9Pairing2D_3box_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_Pairing2D[] = {
  {"compute", (PyCFunction)__pyx_pw_5freud_6_freud_9Pairing2D_5compute, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_9Pairing2D_4compute},
  {"getMatch", (PyCFunction)__pyx_pw_5freud_6_freud_9Pairing2D_7getMatch, METH_NOARGS, __pyx_doc_5freud_6_freud_9Pairing2D_6getMatch},
  {"getPair", (PyCFunction)__pyx_pw_5freud_6_freud_9Pairing2D_9getPair, METH_NOARGS, __pyx_doc_5freud_6_freud_9Pairing2D_8getPair},
  {"getBox", (PyCFunction)__pyx_pw_5freud_6_freud_9Pairing2D_11getBox, METH_NOARGS, __pyx_doc_5freud_6_freud_9Pairing2D_10getBox},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_9Pairing2D_13__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_9Pairing2D_12__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_9Pairing2D_15__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_9Pairing2D_14__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_Pairing2D[] = {
  {(char *)"match", __pyx_getprop_5freud_6_freud_9Pairing2D_match, 0, (char *)0, 0},
  {(char *)"pair", __pyx_getprop_5freud_6_freud_9Pairing2D_pair, 0, (char *)0, 0},
  {(char *)"box", __pyx_getprop_5freud_6_freud_9Pairing2D_box, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_Pairing2D = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.Pairing2D", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_Pairing2D), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_Pairing2D, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Compute pairs for the system of particles.\n\n    .. moduleauthor:: Eric Harper <harperic@umich.edu>\n\n    .. deprecated:: 0.8.2\n       Use :py:mod:`freud.bond` instead.\n\n    Args:\n        rmax (float):\n            Distance over which to calculate.\n        k (unsigned int):\n            Number of neighbors to search.\n        compDotTol (float):\n            Value of the dot product below which a pair is determined.\n\n    Attributes:\n        match (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The match.\n        pair (:math:`\\left(N_{particles}\\right)` :class:`numpy.ndarray`):\n            The pair.\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_Pairing2D, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_Pairing2D, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_Pairing2D, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_Pairing2D, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_Pairing2D, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_AngularSeparation(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_AngularSeparation *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_AngularSeparation *)o);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  p->rmax = Py_None; Py_INCREF(Py_None);
  p->nlist_ = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_17AngularSeparation_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_AngularSeparation(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_AngularSeparation *p = (struct __pyx_obj_5freud_6_freud_AngularSeparation *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_17AngularSeparation_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->num_neigh);
  Py_CLEAR(p->rmax);
  Py_CLEAR(p->nlist_);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5freud_6_freud_AngularSeparation(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_AngularSeparation *p = (struct __pyx_obj_5freud_6_freud_AngularSeparation *)o;
  if (p->num_neigh) {
    e = (*v)(p->num_neigh, a); if (e) return e;
  }
  if (p->rmax) {
    e = (*v)(p->rmax, a); if (e) return e;
  }
  if (p->nlist_) {
    e = (*v)(p->nlist_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_AngularSeparation(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_AngularSeparation *p = (struct __pyx_obj_5freud_6_freud_AngularSeparation *)o;
  tmp = ((PyObject*)p->num_neigh);
  p->num_neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rmax);
  p->rmax = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->nlist_);
  p->nlist_ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5freud_6_freud_17AngularSeparation_nlist(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17AngularSeparation_5nlist_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_17AngularSeparation_n_p(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17AngularSeparation_3n_p_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_17AngularSeparation_n_ref(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17AngularSeparation_5n_ref_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_17AngularSeparation_n_global(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17AngularSeparation_8n_global_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_AngularSeparation[] = {
  {"computeNeighbor", (PyCFunction)__pyx_pw_5freud_6_freud_17AngularSeparation_5computeNeighbor, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_17AngularSeparation_4computeNeighbor},
  {"computeGlobal", (PyCFunction)__pyx_pw_5freud_6_freud_17AngularSeparation_7computeGlobal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_17AngularSeparation_6computeGlobal},
  {"getNeighborAngles", (PyCFunction)__pyx_pw_5freud_6_freud_17AngularSeparation_9getNeighborAngles, METH_NOARGS, __pyx_doc_5freud_6_freud_17AngularSeparation_8getNeighborAngles},
  {"getGlobalAngles", (PyCFunction)__pyx_pw_5freud_6_freud_17AngularSeparation_11getGlobalAngles, METH_NOARGS, __pyx_doc_5freud_6_freud_17AngularSeparation_10getGlobalAngles},
  {"getNP", (PyCFunction)__pyx_pw_5freud_6_freud_17AngularSeparation_13getNP, METH_NOARGS, __pyx_doc_5freud_6_freud_17AngularSeparation_12getNP},
  {"getNReference", (PyCFunction)__pyx_pw_5freud_6_freud_17AngularSeparation_15getNReference, METH_NOARGS, __pyx_doc_5freud_6_freud_17AngularSeparation_14getNReference},
  {"getNGlobal", (PyCFunction)__pyx_pw_5freud_6_freud_17AngularSeparation_17getNGlobal, METH_NOARGS, __pyx_doc_5freud_6_freud_17AngularSeparation_16getNGlobal},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_17AngularSeparation_19__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_17AngularSeparation_18__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_17AngularSeparation_21__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_17AngularSeparation_20__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_AngularSeparation[] = {
  {(char *)"nlist", __pyx_getprop_5freud_6_freud_17AngularSeparation_nlist, 0, (char *)0, 0},
  {(char *)"n_p", __pyx_getprop_5freud_6_freud_17AngularSeparation_n_p, 0, (char *)0, 0},
  {(char *)"n_ref", __pyx_getprop_5freud_6_freud_17AngularSeparation_n_ref, 0, (char *)0, 0},
  {(char *)"n_global", __pyx_getprop_5freud_6_freud_17AngularSeparation_n_global, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_AngularSeparation = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.AngularSeparation", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_AngularSeparation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_AngularSeparation, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Calculates the minimum angles of separation between particles and\n    references.\n\n    .. moduleauthor:: Erin Teich\n    .. moduleauthor:: Andrew Karas\n\n    Args:\n        rmax (float):\n            Cutoff radius for cell list and clustering algorithm. Values near\n            the first minimum of the RDF are recommended.\n        n (int):\n            The number of neighbors.\n\n    Attributes:\n        nlist (:class:`freud.locality.NeighborList`):\n            The neighbor list.\n        n_p (unsigned int):\n            The number of particles used in computing the last set.\n        n_ref (unsigned int):\n            The number of reference particles used in computing the neighbor\n            angles.\n        n_global (unsigned int):\n            The number of global orientations to check against.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_AngularSeparation, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_AngularSeparation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_AngularSeparation, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_AngularSeparation, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_AngularSeparation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_Cluster(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_Cluster *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_Cluster *)o);
  p->m_box = Py_None; Py_INCREF(Py_None);
  p->rmax = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_7Cluster_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_Cluster(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_Cluster *p = (struct __pyx_obj_5freud_6_freud_Cluster *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_7Cluster_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->m_box);
  Py_CLEAR(p->rmax);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5freud_6_freud_Cluster(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_Cluster *p = (struct __pyx_obj_5freud_6_freud_Cluster *)o;
  if (p->m_box) {
    e = (*v)(p->m_box, a); if (e) return e;
  }
  if (p->rmax) {
    e = (*v)(p->rmax, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_Cluster(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_Cluster *p = (struct __pyx_obj_5freud_6_freud_Cluster *)o;
  tmp = ((PyObject*)p->m_box);
  p->m_box = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rmax);
  p->rmax = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5freud_6_freud_7Cluster_box(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7Cluster_3box_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_7Cluster_num_clusters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7Cluster_12num_clusters_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_7Cluster_num_particles(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7Cluster_13num_particles_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_7Cluster_cluster_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7Cluster_11cluster_idx_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_7Cluster_cluster_keys(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_7Cluster_12cluster_keys_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_Cluster[] = {
  {"getBox", (PyCFunction)__pyx_pw_5freud_6_freud_7Cluster_5getBox, METH_NOARGS, __pyx_doc_5freud_6_freud_7Cluster_4getBox},
  {"computeClusters", (PyCFunction)__pyx_pw_5freud_6_freud_7Cluster_7computeClusters, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_7Cluster_6computeClusters},
  {"computeClusterMembership", (PyCFunction)__pyx_pw_5freud_6_freud_7Cluster_9computeClusterMembership, METH_O, __pyx_doc_5freud_6_freud_7Cluster_8computeClusterMembership},
  {"getNumClusters", (PyCFunction)__pyx_pw_5freud_6_freud_7Cluster_11getNumClusters, METH_NOARGS, __pyx_doc_5freud_6_freud_7Cluster_10getNumClusters},
  {"getNumParticles", (PyCFunction)__pyx_pw_5freud_6_freud_7Cluster_13getNumParticles, METH_NOARGS, __pyx_doc_5freud_6_freud_7Cluster_12getNumParticles},
  {"getClusterIdx", (PyCFunction)__pyx_pw_5freud_6_freud_7Cluster_15getClusterIdx, METH_NOARGS, __pyx_doc_5freud_6_freud_7Cluster_14getClusterIdx},
  {"getClusterKeys", (PyCFunction)__pyx_pw_5freud_6_freud_7Cluster_17getClusterKeys, METH_NOARGS, __pyx_doc_5freud_6_freud_7Cluster_16getClusterKeys},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_7Cluster_19__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_7Cluster_18__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_7Cluster_21__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_7Cluster_20__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_Cluster[] = {
  {(char *)"box", __pyx_getprop_5freud_6_freud_7Cluster_box, 0, (char *)0, 0},
  {(char *)"num_clusters", __pyx_getprop_5freud_6_freud_7Cluster_num_clusters, 0, (char *)0, 0},
  {(char *)"num_particles", __pyx_getprop_5freud_6_freud_7Cluster_num_particles, 0, (char *)0, 0},
  {(char *)"cluster_idx", __pyx_getprop_5freud_6_freud_7Cluster_cluster_idx, 0, (char *)0, 0},
  {(char *)"cluster_keys", __pyx_getprop_5freud_6_freud_7Cluster_cluster_keys, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_Cluster = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.Cluster", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_Cluster), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_Cluster, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Finds clusters in a set of points.\n\n    Given a set of coordinates and a cutoff, :py:class:`freud.cluster.Cluster`\n    will determine all of the clusters of points that are made up of points\n    that are closer than the cutoff. Clusters are 0-indexed. The class contains\n    an index array, the ``cluster_idx`` attribute, which can be used to\n    identify which cluster a particle is associated with:\n    :code:`cluster_obj.cluster_idx[i]` is the cluster index in which particle\n    :code:`i` is found. By the definition of a cluster, points that are not\n    within the cutoff of another point end up in their own 1-particle cluster.\n\n    Identifying micelles is one primary use-case for finding clusters. This\n    operation is somewhat different, though. In a cluster of points, each and\n    every point belongs to one and only one cluster. However, because a string\n    of points belongs to a polymer, that single polymer may be present in more\n    than one cluster. To handle this situation, an optional layer is presented\n    on top of the :code:`cluster_idx` array. Given a key value per particle\n    (i.e. the polymer id), the computeClusterMembership function will process\n    :code:`cluster_idx` with the key values in mind and provide a list of keys\n    that are present in each cluster.\n\n    .. moduleauthor:: Joshua Anderson <joaander@umich.edu>\n\n    Args:\n        box (:py:class:`freud.box.Box`):\n            The simulation box.\n        rcut (float):\n            Particle distance cutoff.\n\n    .. note::\n        2D: :py:class:`freud.cluster.Cluster` properly handles 2D boxes.\n        The points must be passed in as :code:`[x, y, 0]`.\n        Failing to set z=0 will lead to undefined behavior.\n\n    Attributes:\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n        num_clusters (int):\n            The number of clusters.\n        num_particles (int):\n            The number of particles.\n        cluster_idx (("":math:`N_{particles}`) :class:`numpy.ndarray`):\n            The cluster index for each particle.\n        cluster_keys (list(list)):\n            A list of lists of the keys contained in each cluster.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_Cluster, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_Cluster, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_Cluster, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_Cluster, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_Cluster, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5freud_6_freud_ClusterProperties(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5freud_6_freud_ClusterProperties *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5freud_6_freud_ClusterProperties *)o);
  p->m_box = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5freud_6_freud_17ClusterProperties_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5freud_6_freud_ClusterProperties(PyObject *o) {
  struct __pyx_obj_5freud_6_freud_ClusterProperties *p = (struct __pyx_obj_5freud_6_freud_ClusterProperties *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5freud_6_freud_17ClusterProperties_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->m_box);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5freud_6_freud_ClusterProperties(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5freud_6_freud_ClusterProperties *p = (struct __pyx_obj_5freud_6_freud_ClusterProperties *)o;
  if (p->m_box) {
    e = (*v)(p->m_box, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5freud_6_freud_ClusterProperties(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5freud_6_freud_ClusterProperties *p = (struct __pyx_obj_5freud_6_freud_ClusterProperties *)o;
  tmp = ((PyObject*)p->m_box);
  p->m_box = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5freud_6_freud_17ClusterProperties_box(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17ClusterProperties_3box_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_17ClusterProperties_num_clusters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17ClusterProperties_12num_clusters_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_17ClusterProperties_cluster_COM(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17ClusterProperties_11cluster_COM_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_17ClusterProperties_cluster_G(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17ClusterProperties_9cluster_G_1__get__(o);
}

static PyObject *__pyx_getprop_5freud_6_freud_17ClusterProperties_cluster_sizes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5freud_6_freud_17ClusterProperties_13cluster_sizes_1__get__(o);
}

static PyMethodDef __pyx_methods_5freud_6_freud_ClusterProperties[] = {
  {"getBox", (PyCFunction)__pyx_pw_5freud_6_freud_17ClusterProperties_5getBox, METH_NOARGS, __pyx_doc_5freud_6_freud_17ClusterProperties_4getBox},
  {"computeProperties", (PyCFunction)__pyx_pw_5freud_6_freud_17ClusterProperties_7computeProperties, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5freud_6_freud_17ClusterProperties_6computeProperties},
  {"getNumClusters", (PyCFunction)__pyx_pw_5freud_6_freud_17ClusterProperties_9getNumClusters, METH_NOARGS, __pyx_doc_5freud_6_freud_17ClusterProperties_8getNumClusters},
  {"getClusterCOM", (PyCFunction)__pyx_pw_5freud_6_freud_17ClusterProperties_11getClusterCOM, METH_NOARGS, __pyx_doc_5freud_6_freud_17ClusterProperties_10getClusterCOM},
  {"getClusterG", (PyCFunction)__pyx_pw_5freud_6_freud_17ClusterProperties_13getClusterG, METH_NOARGS, __pyx_doc_5freud_6_freud_17ClusterProperties_12getClusterG},
  {"getClusterSizes", (PyCFunction)__pyx_pw_5freud_6_freud_17ClusterProperties_15getClusterSizes, METH_NOARGS, __pyx_doc_5freud_6_freud_17ClusterProperties_14getClusterSizes},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_17ClusterProperties_17__reduce_cython__, METH_NOARGS, __pyx_doc_5freud_6_freud_17ClusterProperties_16__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5freud_6_freud_17ClusterProperties_19__setstate_cython__, METH_O, __pyx_doc_5freud_6_freud_17ClusterProperties_18__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5freud_6_freud_ClusterProperties[] = {
  {(char *)"box", __pyx_getprop_5freud_6_freud_17ClusterProperties_box, 0, (char *)0, 0},
  {(char *)"num_clusters", __pyx_getprop_5freud_6_freud_17ClusterProperties_num_clusters, 0, (char *)0, 0},
  {(char *)"cluster_COM", __pyx_getprop_5freud_6_freud_17ClusterProperties_cluster_COM, 0, (char *)0, 0},
  {(char *)"cluster_G", __pyx_getprop_5freud_6_freud_17ClusterProperties_cluster_G, 0, (char *)0, 0},
  {(char *)"cluster_sizes", __pyx_getprop_5freud_6_freud_17ClusterProperties_cluster_sizes, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5freud_6_freud_ClusterProperties = {
  PyVarObject_HEAD_INIT(0, 0)
  "freud._freud.ClusterProperties", /*tp_name*/
  sizeof(struct __pyx_obj_5freud_6_freud_ClusterProperties), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5freud_6_freud_ClusterProperties, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Routines for computing properties of point clusters.\n\n    Given a set of points and cluster ids (from :class:`~.Cluster`, or another\n    source), ClusterProperties determines the following properties for each\n    cluster:\n\n     - Center of mass\n     - Gyration tensor\n\n    The computed center of mass for each cluster (properly handling periodic\n    boundary conditions) can be accessed with :py:meth:`~.getClusterCOM()`.\n    This returns a :math:`\\left(N_{clusters}, 3 \\right)`\n    :class:`numpy.ndarray`.\n\n    The :math:`3 \\times 3` gyration tensor :math:`G` can be accessed with\n    :py:meth:`~.getClusterG()`. This returns a :class:`numpy.ndarray`,\n    shape= :math:`\\left(N_{clusters} \\times 3 \\times 3\\right)`.\n    The tensor is symmetric for each cluster.\n\n    .. moduleauthor:: Joshua Anderson <joaander@umich.edu>\n\n    Args:\n        box (:py:class:`freud.box.Box`): Simulation box.\n\n    Attributes:\n        box (:py:class:`freud.box.Box`):\n            Box used in the calculation.\n        num_clusters (int):\n            The number of clusters.\n        cluster_COM ((:math:`N_{clusters}`, 3) :class:`numpy.ndarray`):\n            The center of mass of the last computed cluster.\n        cluster_G ((:math:`N_{clusters}`, 3, 3) :class:`numpy.ndarray`):\n            The cluster :math:`G` tensors computed by the last call to\n            :py:meth:`~.computeProperties()`.\n        cluster_sizes ((:math:`N_{clusters}`) :class:`numpy.ndarray`):\n            The cluster sizes computed by the last call to\n            :py:meth:`~.computeProperties()`.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5freud_6_freud_ClusterProperties, /*tp_traverse*/
  __pyx_tp_clear_5freud_6_freud_ClusterProperties, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5freud_6_freud_ClusterProperties, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5freud_6_freud_ClusterProperties, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5freud_6_freud_ClusterProperties, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__freud(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__freud},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_freud",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_FreudDeprecationWarning, __pyx_k_FreudDeprecationWarning, sizeof(__pyx_k_FreudDeprecationWarning), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Need_a_list_of_3D_points_for_com, __pyx_k_Need_a_list_of_3D_points_for_com, sizeof(__pyx_k_Need_a_list_of_3D_points_for_com), 0, 0, 1, 0},
  {&__pyx_kp_s_Need_a_list_of_3D_points_for_com_2, __pyx_k_Need_a_list_of_3D_points_for_com_2, sizeof(__pyx_k_Need_a_list_of_3D_points_for_com_2), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_kp_s_Orientations_must_be_given_to_or, __pyx_k_Orientations_must_be_given_to_or, sizeof(__pyx_k_Orientations_must_be_given_to_or), 0, 0, 1, 0},
  {&__pyx_n_s_Ql, __pyx_k_Ql, sizeof(__pyx_k_Ql), 0, 0, 1, 1},
  {&__pyx_n_s_Qthreshold, __pyx_k_Qthreshold, sizeof(__pyx_k_Qthreshold), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_Sthreshold, __pyx_k_Sthreshold, sizeof(__pyx_k_Sthreshold), 0, 0, 1, 1},
  {&__pyx_kp_s_The_number_of_vectors_in_refPoin, __pyx_k_The_number_of_vectors_in_refPoin, sizeof(__pyx_k_The_number_of_vectors_in_refPoin), 0, 0, 1, 0},
  {&__pyx_kp_s_This_class_is_deprecated_use_fre, __pyx_k_This_class_is_deprecated_use_fre, sizeof(__pyx_k_This_class_is_deprecated_use_fre), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknown_BOD_mode_Options_are_bod, __pyx_k_Unknown_BOD_mode_Options_are_bod, sizeof(__pyx_k_Unknown_BOD_mode_Options_are_bod), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_LocalDescriptors_orienta, __pyx_k_Unknown_LocalDescriptors_orienta, sizeof(__pyx_k_Unknown_LocalDescriptors_orienta), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_accumulate, __pyx_k_accumulate, sizeof(__pyx_k_accumulate), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_array_name, __pyx_k_array_name, sizeof(__pyx_k_array_name), 0, 0, 1, 1},
  {&__pyx_n_s_ascontiguousarray, __pyx_k_ascontiguousarray, sizeof(__pyx_k_ascontiguousarray), 0, 0, 1, 1},
  {&__pyx_n_s_ave_Ql, __pyx_k_ave_Ql, sizeof(__pyx_k_ave_Ql), 0, 0, 1, 1},
  {&__pyx_n_s_ave_norm_Ql, __pyx_k_ave_norm_Ql, sizeof(__pyx_k_ave_norm_Ql), 0, 0, 1, 1},
  {&__pyx_n_s_bod, __pyx_k_bod, sizeof(__pyx_k_bod), 0, 0, 1, 1},
  {&__pyx_n_s_box, __pyx_k_box, sizeof(__pyx_k_box), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cluster_idx, __pyx_k_cluster_idx, sizeof(__pyx_k_cluster_idx), 0, 0, 1, 1},
  {&__pyx_kp_s_cluster_idx_must_be_a_1D_array_o, __pyx_k_cluster_idx_must_be_a_1D_array_o, sizeof(__pyx_k_cluster_idx_must_be_a_1D_array_o), 0, 0, 1, 0},
  {&__pyx_n_s_common, __pyx_k_common, sizeof(__pyx_k_common), 0, 0, 1, 1},
  {&__pyx_n_s_compDotTol, __pyx_k_compDotTol, sizeof(__pyx_k_compDotTol), 0, 0, 1, 1},
  {&__pyx_n_s_compOrientations, __pyx_k_compOrientations, sizeof(__pyx_k_compOrientations), 0, 0, 1, 1},
  {&__pyx_n_s_compute, __pyx_k_compute, sizeof(__pyx_k_compute), 0, 0, 1, 1},
  {&__pyx_n_s_computeAve, __pyx_k_computeAve, sizeof(__pyx_k_computeAve), 0, 0, 1, 1},
  {&__pyx_n_s_computeAveNorm, __pyx_k_computeAveNorm, sizeof(__pyx_k_computeAveNorm), 0, 0, 1, 1},
  {&__pyx_n_s_computeNorm, __pyx_k_computeNorm, sizeof(__pyx_k_computeNorm), 0, 0, 1, 1},
  {&__pyx_n_s_computeSolLiqNoNorm, __pyx_k_computeSolLiqNoNorm, sizeof(__pyx_k_computeSolLiqNoNorm), 0, 0, 1, 1},
  {&__pyx_n_s_computeSolLiqVariant, __pyx_k_computeSolLiqVariant, sizeof(__pyx_k_computeSolLiqVariant), 0, 0, 1, 1},
  {&__pyx_n_s_contiguous, __pyx_k_contiguous, sizeof(__pyx_k_contiguous), 0, 0, 1, 1},
  {&__pyx_n_s_convert_array, __pyx_k_convert_array, sizeof(__pyx_k_convert_array), 0, 0, 1, 1},
  {&__pyx_n_s_convert_box, __pyx_k_convert_box, sizeof(__pyx_k_convert_box), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_delattrs, __pyx_k_delattrs, sizeof(__pyx_k_delattrs), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_einsum, __pyx_k_einsum, sizeof(__pyx_k_einsum), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_env_nlist, __pyx_k_env_nlist, sizeof(__pyx_k_env_nlist), 0, 0, 1, 1},
  {&__pyx_n_s_equiv_quats, __pyx_k_equiv_quats, sizeof(__pyx_k_equiv_quats), 0, 0, 1, 1},
  {&__pyx_kp_s_equiv_quats_should_be_an_N_equiv, __pyx_k_equiv_quats_should_be_an_N_equiv, sizeof(__pyx_k_equiv_quats_should_be_an_N_equiv), 0, 0, 1, 0},
  {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
  {&__pyx_n_s_eye, __pyx_k_eye, sizeof(__pyx_k_eye), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_flatten, __pyx_k_flatten, sizeof(__pyx_k_flatten), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_freud, __pyx_k_freud, sizeof(__pyx_k_freud), 0, 0, 1, 1},
  {&__pyx_n_s_freud_common, __pyx_k_freud_common, sizeof(__pyx_k_freud_common), 0, 0, 1, 1},
  {&__pyx_n_s_getAveQl, __pyx_k_getAveQl, sizeof(__pyx_k_getAveQl), 0, 0, 1, 1},
  {&__pyx_n_s_getAveWl, __pyx_k_getAveWl, sizeof(__pyx_k_getAveWl), 0, 0, 1, 1},
  {&__pyx_n_s_getBondOrder, __pyx_k_getBondOrder, sizeof(__pyx_k_getBondOrder), 0, 0, 1, 1},
  {&__pyx_n_s_getBox, __pyx_k_getBox, sizeof(__pyx_k_getBox), 0, 0, 1, 1},
  {&__pyx_n_s_getClusterCOM, __pyx_k_getClusterCOM, sizeof(__pyx_k_getClusterCOM), 0, 0, 1, 1},
  {&__pyx_n_s_getClusterG, __pyx_k_getClusterG, sizeof(__pyx_k_getClusterG), 0, 0, 1, 1},
  {&__pyx_n_s_getClusterIdx, __pyx_k_getClusterIdx, sizeof(__pyx_k_getClusterIdx), 0, 0, 1, 1},
  {&__pyx_n_s_getClusterKeys, __pyx_k_getClusterKeys, sizeof(__pyx_k_getClusterKeys), 0, 0, 1, 1},
  {&__pyx_n_s_getClusterSizes, __pyx_k_getClusterSizes, sizeof(__pyx_k_getClusterSizes), 0, 0, 1, 1},
  {&__pyx_n_s_getClusters, __pyx_k_getClusters, sizeof(__pyx_k_getClusters), 0, 0, 1, 1},
  {&__pyx_n_s_getDr, __pyx_k_getDr, sizeof(__pyx_k_getDr), 0, 0, 1, 1},
  {&__pyx_n_s_getK, __pyx_k_getK, sizeof(__pyx_k_getK), 0, 0, 1, 1},
  {&__pyx_n_s_getLMax, __pyx_k_getLMax, sizeof(__pyx_k_getLMax), 0, 0, 1, 1},
  {&__pyx_n_s_getLargestClusterSize, __pyx_k_getLargestClusterSize, sizeof(__pyx_k_getLargestClusterSize), 0, 0, 1, 1},
  {&__pyx_n_s_getLx, __pyx_k_getLx, sizeof(__pyx_k_getLx), 0, 0, 1, 1},
  {&__pyx_n_s_getLy, __pyx_k_getLy, sizeof(__pyx_k_getLy), 0, 0, 1, 1},
  {&__pyx_n_s_getLz, __pyx_k_getLz, sizeof(__pyx_k_getLz), 0, 0, 1, 1},
  {&__pyx_n_s_getMatch, __pyx_k_getMatch, sizeof(__pyx_k_getMatch), 0, 0, 1, 1},
  {&__pyx_n_s_getNBinsPhi, __pyx_k_getNBinsPhi, sizeof(__pyx_k_getNBinsPhi), 0, 0, 1, 1},
  {&__pyx_n_s_getNBinsTheta, __pyx_k_getNBinsTheta, sizeof(__pyx_k_getNBinsTheta), 0, 0, 1, 1},
  {&__pyx_n_s_getNGlobal, __pyx_k_getNGlobal, sizeof(__pyx_k_getNGlobal), 0, 0, 1, 1},
  {&__pyx_n_s_getNP, __pyx_k_getNP, sizeof(__pyx_k_getNP), 0, 0, 1, 1},
  {&__pyx_n_s_getNReference, __pyx_k_getNReference, sizeof(__pyx_k_getNReference), 0, 0, 1, 1},
  {&__pyx_n_s_getNSphs, __pyx_k_getNSphs, sizeof(__pyx_k_getNSphs), 0, 0, 1, 1},
  {&__pyx_n_s_getNumClusters, __pyx_k_getNumClusters, sizeof(__pyx_k_getNumClusters), 0, 0, 1, 1},
  {&__pyx_n_s_getNumParticles, __pyx_k_getNumParticles, sizeof(__pyx_k_getNumParticles), 0, 0, 1, 1},
  {&__pyx_n_s_getNumberOfConnections, __pyx_k_getNumberOfConnections, sizeof(__pyx_k_getNumberOfConnections), 0, 0, 1, 1},
  {&__pyx_n_s_getPair, __pyx_k_getPair, sizeof(__pyx_k_getPair), 0, 0, 1, 1},
  {&__pyx_n_s_getPhi, __pyx_k_getPhi, sizeof(__pyx_k_getPhi), 0, 0, 1, 1},
  {&__pyx_n_s_getPsi, __pyx_k_getPsi, sizeof(__pyx_k_getPsi), 0, 0, 1, 1},
  {&__pyx_n_s_getQl, __pyx_k_getQl, sizeof(__pyx_k_getQl), 0, 0, 1, 1},
  {&__pyx_n_s_getQlAveNorm, __pyx_k_getQlAveNorm, sizeof(__pyx_k_getQlAveNorm), 0, 0, 1, 1},
  {&__pyx_n_s_getQlNorm, __pyx_k_getQlNorm, sizeof(__pyx_k_getQlNorm), 0, 0, 1, 1},
  {&__pyx_n_s_getQlmi, __pyx_k_getQlmi, sizeof(__pyx_k_getQlmi), 0, 0, 1, 1},
  {&__pyx_n_s_getRMax, __pyx_k_getRMax, sizeof(__pyx_k_getRMax), 0, 0, 1, 1},
  {&__pyx_n_s_getSph, __pyx_k_getSph, sizeof(__pyx_k_getSph), 0, 0, 1, 1},
  {&__pyx_n_s_getTheta, __pyx_k_getTheta, sizeof(__pyx_k_getTheta), 0, 0, 1, 1},
  {&__pyx_n_s_getTiltFactorXY, __pyx_k_getTiltFactorXY, sizeof(__pyx_k_getTiltFactorXY), 0, 0, 1, 1},
  {&__pyx_n_s_getTiltFactorXZ, __pyx_k_getTiltFactorXZ, sizeof(__pyx_k_getTiltFactorXZ), 0, 0, 1, 1},
  {&__pyx_n_s_getTiltFactorYZ, __pyx_k_getTiltFactorYZ, sizeof(__pyx_k_getTiltFactorYZ), 0, 0, 1, 1},
  {&__pyx_n_s_getTotEnvironment, __pyx_k_getTotEnvironment, sizeof(__pyx_k_getTotEnvironment), 0, 0, 1, 1},
  {&__pyx_n_s_getWl, __pyx_k_getWl, sizeof(__pyx_k_getWl), 0, 0, 1, 1},
  {&__pyx_n_s_getWlAveNorm, __pyx_k_getWlAveNorm, sizeof(__pyx_k_getWlAveNorm), 0, 0, 1, 1},
  {&__pyx_n_s_getWlNorm, __pyx_k_getWlNorm, sizeof(__pyx_k_getWlNorm), 0, 0, 1, 1},
  {&__pyx_n_s_getattribute, __pyx_k_getattribute, sizeof(__pyx_k_getattribute), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_global, __pyx_k_global, sizeof(__pyx_k_global), 0, 0, 1, 1},
  {&__pyx_n_s_global_ors, __pyx_k_global_ors, sizeof(__pyx_k_global_ors), 0, 0, 1, 1},
  {&__pyx_kp_s_global_ors_should_be_an_Nx4_arra, __pyx_k_global_ors_should_be_an_Nx4_arra, sizeof(__pyx_k_global_ors_should_be_an_Nx4_arra), 0, 0, 1, 0},
  {&__pyx_n_s_global_search, __pyx_k_global_search, sizeof(__pyx_k_global_search), 0, 0, 1, 1},
  {&__pyx_n_s_hard_r, __pyx_k_hard_r, sizeof(__pyx_k_hard_r), 0, 0, 1, 1},
  {&__pyx_kp_s_ij_kl_ijkl, __pyx_k_ij_kl_ijkl, sizeof(__pyx_k_ij_kl_ijkl), 0, 0, 1, 0},
  {&__pyx_kp_s_ik_jl_ijkl, __pyx_k_ik_jl_ijkl, sizeof(__pyx_k_ik_jl_ijkl), 0, 0, 1, 0},
  {&__pyx_kp_s_il_jk_ijkl, __pyx_k_il_jk_ijkl, sizeof(__pyx_k_il_jk_ijkl), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_is2D, __pyx_k_is2D, sizeof(__pyx_k_is2D), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_kp_s_keys_must_be_a_1D_array_of_lengt, __pyx_k_keys_must_be_a_1D_array_of_lengt, sizeof(__pyx_k_keys_must_be_a_1D_array_of_lengt), 0, 0, 1, 0},
  {&__pyx_n_s_kn, __pyx_k_kn, sizeof(__pyx_k_kn), 0, 0, 1, 1},
  {&__pyx_n_s_known_modes, __pyx_k_known_modes, sizeof(__pyx_k_known_modes), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_lbod, __pyx_k_lbod, sizeof(__pyx_k_lbod), 0, 0, 1, 1},
  {&__pyx_n_s_lmax, __pyx_k_lmax, sizeof(__pyx_k_lmax), 0, 0, 1, 1},
  {&__pyx_n_s_locality, __pyx_k_locality, sizeof(__pyx_k_locality), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_make_default_nlist, __pyx_k_make_default_nlist, sizeof(__pyx_k_make_default_nlist), 0, 0, 1, 1},
  {&__pyx_n_s_make_default_nlist_nn, __pyx_k_make_default_nlist_nn, sizeof(__pyx_k_make_default_nlist_nn), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n_bins_p, __pyx_k_n_bins_p, sizeof(__pyx_k_n_bins_p), 0, 0, 1, 1},
  {&__pyx_n_s_n_bins_t, __pyx_k_n_bins_t, sizeof(__pyx_k_n_bins_t), 0, 0, 1, 1},
  {&__pyx_n_s_n_replicates, __pyx_k_n_replicates, sizeof(__pyx_k_n_replicates), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_negative_m, __pyx_k_negative_m, sizeof(__pyx_k_negative_m), 0, 0, 1, 1},
  {&__pyx_n_s_neighborhood, __pyx_k_neighborhood, sizeof(__pyx_k_neighborhood), 0, 0, 1, 1},
  {&__pyx_n_s_nlist, __pyx_k_nlist, sizeof(__pyx_k_nlist), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_norm_Ql, __pyx_k_norm_Ql, sizeof(__pyx_k_norm_Ql), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_num_neighbors, __pyx_k_num_neighbors, sizeof(__pyx_k_num_neighbors), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_obcd, __pyx_k_obcd, sizeof(__pyx_k_obcd), 0, 0, 1, 1},
  {&__pyx_n_s_oocd, __pyx_k_oocd, sizeof(__pyx_k_oocd), 0, 0, 1, 1},
  {&__pyx_n_s_orientations, __pyx_k_orientations, sizeof(__pyx_k_orientations), 0, 0, 1, 1},
  {&__pyx_kp_s_orientations_must_have_the_same, __pyx_k_orientations_must_have_the_same, sizeof(__pyx_k_orientations_must_have_the_same), 0, 0, 1, 0},
  {&__pyx_kp_s_orientations_should_be_an_Nx4_ar, __pyx_k_orientations_should_be_an_Nx4_ar, sizeof(__pyx_k_orientations_should_be_an_Nx4_ar), 0, 0, 1, 0},
  {&__pyx_n_s_ors, __pyx_k_ors, sizeof(__pyx_k_ors), 0, 0, 1, 1},
  {&__pyx_kp_s_ors_should_be_an_Nx4_array, __pyx_k_ors_should_be_an_Nx4_array, sizeof(__pyx_k_ors_should_be_an_Nx4_array), 0, 0, 1, 0},
  {&__pyx_n_s_particle_local, __pyx_k_particle_local, sizeof(__pyx_k_particle_local), 0, 0, 1, 1},
  {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
  {&__pyx_n_s_points_ref, __pyx_k_points_ref, sizeof(__pyx_k_points_ref), 0, 0, 1, 1},
  {&__pyx_kp_s_points_ref_should_be_an_Nx3_arra, __pyx_k_points_ref_should_be_an_Nx3_arra, sizeof(__pyx_k_points_ref_should_be_an_Nx3_arra), 0, 0, 1, 0},
  {&__pyx_kp_s_points_should_be_an_Nx3_array, __pyx_k_points_should_be_an_Nx3_array, sizeof(__pyx_k_points_should_be_an_Nx3_array), 0, 0, 1, 0},
  {&__pyx_n_s_precomputed, __pyx_k_precomputed, sizeof(__pyx_k_precomputed), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rcut, __pyx_k_rcut, sizeof(__pyx_k_rcut), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_refPoints, __pyx_k_refPoints, sizeof(__pyx_k_refPoints), 0, 0, 1, 1},
  {&__pyx_n_s_refPoints1, __pyx_k_refPoints1, sizeof(__pyx_k_refPoints1), 0, 0, 1, 1},
  {&__pyx_kp_s_refPoints1_should_be_an_Nx3_arra, __pyx_k_refPoints1_should_be_an_Nx3_arra, sizeof(__pyx_k_refPoints1_should_be_an_Nx3_arra), 0, 0, 1, 0},
  {&__pyx_n_s_refPoints2, __pyx_k_refPoints2, sizeof(__pyx_k_refPoints2), 0, 0, 1, 1},
  {&__pyx_kp_s_refPoints2_should_be_an_Nx3_arra, __pyx_k_refPoints2_should_be_an_Nx3_arra, sizeof(__pyx_k_refPoints2_should_be_an_Nx3_arra), 0, 0, 1, 0},
  {&__pyx_kp_s_refPoints_should_be_an_Nx3_array, __pyx_k_refPoints_should_be_an_Nx3_array, sizeof(__pyx_k_refPoints_should_be_an_Nx3_array), 0, 0, 1, 0},
  {&__pyx_n_s_ref_orientations, __pyx_k_ref_orientations, sizeof(__pyx_k_ref_orientations), 0, 0, 1, 1},
  {&__pyx_kp_s_ref_orientations_should_be_an_Nx, __pyx_k_ref_orientations_should_be_an_Nx, sizeof(__pyx_k_ref_orientations_should_be_an_Nx), 0, 0, 1, 0},
  {&__pyx_n_s_ref_ors, __pyx_k_ref_ors, sizeof(__pyx_k_ref_ors), 0, 0, 1, 1},
  {&__pyx_kp_s_ref_ors_should_be_an_Nx4_array, __pyx_k_ref_ors_should_be_an_Nx4_array, sizeof(__pyx_k_ref_ors_should_be_an_Nx4_array), 0, 0, 1, 0},
  {&__pyx_n_s_ref_points, __pyx_k_ref_points, sizeof(__pyx_k_ref_points), 0, 0, 1, 1},
  {&__pyx_kp_s_ref_points_should_be_an_Nx3_arra, __pyx_k_ref_points_should_be_an_Nx3_arra, sizeof(__pyx_k_ref_points_should_be_an_Nx3_arra), 0, 0, 1, 0},
  {&__pyx_n_s_registration, __pyx_k_registration, sizeof(__pyx_k_registration), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_rmax, __pyx_k_rmax, sizeof(__pyx_k_rmax), 0, 0, 1, 1},
  {&__pyx_n_s_rmin, __pyx_k_rmin, sizeof(__pyx_k_rmin), 0, 0, 1, 1},
  {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
  {&__pyx_kp_s_scale_must_be_less_than_1, __pyx_k_scale_must_be_less_than_1, sizeof(__pyx_k_scale_must_be_less_than_1), 0, 0, 1, 0},
  {&__pyx_n_s_seed, __pyx_k_seed, sizeof(__pyx_k_seed), 0, 0, 1, 1},
  {&__pyx_kp_s_self_thisptr_cannot_be_converted, __pyx_k_self_thisptr_cannot_be_converted, sizeof(__pyx_k_self_thisptr_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_setBox, __pyx_k_setBox, sizeof(__pyx_k_setBox), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_kp_s_supplied_seed_could_not_be_used, __pyx_k_supplied_seed_could_not_be_used, sizeof(__pyx_k_supplied_seed_could_not_be_used), 0, 0, 1, 0},
  {&__pyx_n_s_t_final, __pyx_k_t_final, sizeof(__pyx_k_t_final), 0, 0, 1, 1},
  {&__pyx_kp_s_t_final_must_be_less_than_t_init, __pyx_k_t_final_must_be_less_than_t_init, sizeof(__pyx_k_t_final_must_be_less_than_t_init), 0, 0, 1, 0},
  {&__pyx_n_s_t_initial, __pyx_k_t_initial, sizeof(__pyx_k_t_initial), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
  {&__pyx_kp_s_u_needs_to_be_a_three_dimensiona, __pyx_k_u_needs_to_be_a_three_dimensiona, sizeof(__pyx_k_u_needs_to_be_a_three_dimensiona), 0, 0, 1, 0},
  {&__pyx_n_s_uint32, __pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 45, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 985, __pyx_L1_error)
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(0, 1115, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 159, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(4, 242, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(4, 1000, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "freud/order.pxi":45
 *         # run checks
 *         if (t_final >= t_initial):
 *             raise ValueError("t_final must be less than t_initial")             # <<<<<<<<<<<<<<
 *         if (scale >= 1.0):
 *             raise ValueError("scale must be less than 1")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_t_final_must_be_less_than_t_init); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "freud/order.pxi":47
 *             raise ValueError("t_final must be less than t_initial")
 *         if (scale >= 1.0):
 *             raise ValueError("scale must be less than 1")             # <<<<<<<<<<<<<<
 *         if seed is None:
 *             seed = int(time.time())
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_scale_must_be_less_than_1); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "freud/order.pxi":59
 *         # for c++ code
 *         # create generalized rank four tensor, pass into c++
 *         cdef np.ndarray[float, ndim=2] kd = np.eye(3, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=4] dijkl = np.einsum(
 *             "ij,kl->ijkl", kd, kd, dtype=np.float32)
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "freud/order.pxi":82
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:
 *             raise TypeError('orientations should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_orientations_should_be_an_Nx4_ar); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "freud/order.pxi":245
 *         # run checks
 *         if len(u) != 3:
 *             raise ValueError('u needs to be a three-dimensional vector')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] l_u = \
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_u_needs_to_be_a_three_dimensiona); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "freud/order.pxi":264
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:
 *             raise TypeError('orientations should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_orientations_should_be_an_Nx4_ar); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "freud/order.pxi":395
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "freud/order.pxi":518
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef _box.Box l_box = _box.Box(
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "freud/order.pxi":792
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[float, ndim=2] l_points = points
 *         cdef unsigned int nP = <unsigned int> points.shape[0]
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "freud/order.pxi":817
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "freud/order.pxi":844
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "freud/order.pxi":871
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "freud/order.pxi":1418
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "freud/order.pxi":1444
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "freud/order.pxi":1471
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points = points
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "freud/environment.pxi":130
 *             array_name="ref_points")
 *         if ref_points.shape[1] != 3:
 *             raise TypeError('ref_points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         points = freud.common.convert_array(
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_ref_points_should_be_an_Nx3_arra); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "freud/environment.pxi":135
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         ref_orientations = freud.common.convert_array(
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "freud/environment.pxi":141
 *             array_name="ref_orientations")
 *         if ref_orientations.shape[1] != 4:
 *             raise TypeError('ref_orientations should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         orientations = freud.common.convert_array(
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_ref_orientations_should_be_an_Nx); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "freud/environment.pxi":147
 *             array_name="orientations")
 *         if orientations.shape[1] != 4:
 *             raise TypeError('orientations should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef unsigned int index = 0
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_orientations_should_be_an_Nx4_ar); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "freud/environment.pxi":400
 *             array_name="points_ref")
 *         if points_ref.shape[1] != 3:
 *             raise TypeError('points_ref should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         if points is None:
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_points_ref_should_be_an_Nx3_arra); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "freud/environment.pxi":408
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_points_ref = points_ref
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "freud/environment.pxi":461
 *             array_name="points_ref")
 *         if points_ref.shape[1] != 3:
 *             raise TypeError('points_ref should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         if points is None:
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_points_ref_should_be_an_Nx3_arra); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "freud/environment.pxi":469
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_orientations = orientations
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "freud/environment.pxi":474
 *         if mode == 'particle_local':
 *             if orientations is None:
 *                 raise RuntimeError(             # <<<<<<<<<<<<<<
 *                     ('Orientations must be given to orient LocalDescriptors '
 *                         'with particles\' orientations'))
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_Orientations_must_be_given_to_or); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "freud/environment.pxi":482
 *                 array_name="orientations")
 *             if orientations.shape[1] != 4:
 *                 raise TypeError('orientations should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *             if orientations.shape[0] != points_ref.shape[0]:
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_orientations_should_be_an_Nx4_ar); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(1, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "freud/environment.pxi":485
 * 
 *             if orientations.shape[0] != points_ref.shape[0]:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "orientations must have the same size as points_ref")
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_orientations_must_have_the_same); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "freud/environment.pxi":682
 *             array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "freud/environment.pxi":746
 *             array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         refPoints = freud.common.convert_array(
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "freud/environment.pxi":752
 *             array_name="refPoints")
 *         if refPoints.shape[1] != 3:
 *             raise TypeError('refPoints should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_refPoints_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "freud/environment.pxi":799
 *             array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         refPoints = freud.common.convert_array(
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "freud/environment.pxi":805
 *             array_name="refPoints")
 *         if refPoints.shape[1] != 3:
 *             raise TypeError('refPoints should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_refPoints_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "freud/environment.pxi":858
 *             array_name="refPoints1")
 *         if refPoints1.shape[1] != 3:
 *             raise TypeError('refPoints1 should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         refPoints2 = freud.common.convert_array(
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_refPoints1_should_be_an_Nx3_arra); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "freud/environment.pxi":864
 *             array_name="refPoints2")
 *         if refPoints2.shape[1] != 3:
 *             raise TypeError('refPoints2 should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_refPoints2_should_be_an_Nx3_arra); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "freud/environment.pxi":876
 * 
 *         if nRef1 != nRef2:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 ("The number of vectors in refPoints1 must MATCH the number of"
 *                     "vectors in refPoints2"))
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_The_number_of_vectors_in_refPoin); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "freud/environment.pxi":915
 *             array_name="refPoints1")
 *         if refPoints1.shape[1] != 3:
 *             raise TypeError('refPoints1 should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         refPoints2 = freud.common.convert_array(
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_refPoints1_should_be_an_Nx3_arra); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "freud/environment.pxi":921
 *             array_name="refPoints2")
 *         if refPoints2.shape[1] != 3:
 *             raise TypeError('refPoints2 should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         # keeping the below syntax seems to be crucial for passing unit tests
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_refPoints2_should_be_an_Nx3_arra); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "freud/environment.pxi":932
 * 
 *         if nRef1 != nRef2:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 ("The number of vectors in refPoints1 must MATCH the number of"
 *                     "vectors in refPoints2"))
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_The_number_of_vectors_in_refPoin); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "freud/environment.pxi":1092
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         orientations = freud.common.convert_array(
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "freud/environment.pxi":1247
 *             array_name="ref_points")
 *         if ref_points.shape[1] != 3:
 *             raise TypeError('ref_points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         points = freud.common.convert_array(
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_ref_points_should_be_an_Nx3_arra); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "freud/environment.pxi":1252
 *             points, 2, dtype=np.float32, contiguous=True, array_name="points")
 *         if points.shape[1] != 3:
 *             raise TypeError('points should be an Nx3 array')             # <<<<<<<<<<<<<<
 * 
 *         ref_ors = freud.common.convert_array(
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_points_should_be_an_Nx3_array); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "freud/environment.pxi":1258
 *             array_name="ref_ors")
 *         if ref_ors.shape[1] != 4:
 *             raise TypeError('ref_ors should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         ors = freud.common.convert_array(
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_ref_ors_should_be_an_Nx4_array); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "freud/environment.pxi":1263
 *             ors, 2, dtype=np.float32, contiguous=True, array_name="ors")
 *         if ors.shape[1] != 4:
 *             raise TypeError('ors should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         equiv_quats = freud.common.convert_array(
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_ors_should_be_an_Nx4_array); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 1263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "freud/environment.pxi":1269
 *             array_name="equiv_quats")
 *         if equiv_quats.shape[1] != 4:
 *             raise TypeError('equiv_quats should be an N_equiv x 4 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef _box.Box l_box = _box.Box(
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_equiv_quats_should_be_an_N_equiv); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "freud/environment.pxi":1317
 *             array_name="global_ors")
 *         if global_ors.shape[1] != 4:
 *             raise TypeError('global_ors should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         ors = freud.common.convert_array(
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_global_ors_should_be_an_Nx4_arra); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(1, 1317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "freud/environment.pxi":1323
 *             array_name="ors")
 *         if ors.shape[1] != 4:
 *             raise TypeError('ors should be an Nx4 array')             # <<<<<<<<<<<<<<
 * 
 *         equiv_quats = freud.common.convert_array(
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_s_ors_should_be_an_Nx4_array); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "freud/environment.pxi":1329
 *             array_name="equiv_quats")
 *         if equiv_quats.shape[1] != 4:
 *             raise TypeError('equiv_quats should be an N_equiv x 4 array')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=2] l_global_ors = global_ors
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_kp_s_equiv_quats_should_be_an_N_equiv); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(1, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "freud/cluster.pxi":103
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'Need a list of 3D points for computeClusters()')
 * 
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_s_Need_a_list_of_3D_points_for_com); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(3, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "freud/cluster.pxi":140
 *         N = self.getNumParticles()
 *         if keys.shape[0] != N:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'keys must be a 1D array of length NumParticles')
 *         cdef np.ndarray cKeys = keys
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_kp_s_keys_must_be_a_1D_array_of_lengt); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(3, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "freud/cluster.pxi":293
 *             points, 2, dtype=np.float32, contiguous=True)
 *         if points.shape[1] != 3:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'Need a list of 3D points for computeClusterProperties()')
 *         cluster_idx = freud.common.convert_array(
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_kp_s_Need_a_list_of_3D_points_for_com_2); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(3, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "freud/cluster.pxi":298
 *             cluster_idx, 1, dtype=np.uint32, contiguous=True)
 *         if cluster_idx.shape[0] != points.shape[0]:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 ('cluster_idx must be a 1D array of matching length/number'
 *                     'of particles to points'))
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_kp_s_cluster_idx_must_be_a_1D_array_o); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(3, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__85 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(4, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(4, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__89 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(4, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(4, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(4, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(4, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(4, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1006
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(4, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);

  /* "../../miniconda3/envs/test36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(4, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(5, 1, __pyx_L1_error);
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_float_6_0 = PyFloat_FromDouble(6.0); if (unlikely(!__pyx_float_6_0)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(5, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5freud_6_freud_CubaticOrderParameter) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __pyx_type_5freud_6_freud_CubaticOrderParameter.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_CubaticOrderParameter.tp_dictoffset && __pyx_type_5freud_6_freud_CubaticOrderParameter.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_CubaticOrderParameter.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "CubaticOrderParameter", (PyObject *)&__pyx_type_5freud_6_freud_CubaticOrderParameter) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_CubaticOrderParameter) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_CubaticOrderParameter = &__pyx_type_5freud_6_freud_CubaticOrderParameter;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_NematicOrderParameter) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_type_5freud_6_freud_NematicOrderParameter.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_NematicOrderParameter.tp_dictoffset && __pyx_type_5freud_6_freud_NematicOrderParameter.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_NematicOrderParameter.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "NematicOrderParameter", (PyObject *)&__pyx_type_5freud_6_freud_NematicOrderParameter) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_NematicOrderParameter) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_NematicOrderParameter = &__pyx_type_5freud_6_freud_NematicOrderParameter;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_HexOrderParameter) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_type_5freud_6_freud_HexOrderParameter.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_HexOrderParameter.tp_dictoffset && __pyx_type_5freud_6_freud_HexOrderParameter.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_HexOrderParameter.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "HexOrderParameter", (PyObject *)&__pyx_type_5freud_6_freud_HexOrderParameter) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_HexOrderParameter) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_HexOrderParameter = &__pyx_type_5freud_6_freud_HexOrderParameter;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_TransOrderParameter) < 0) __PYX_ERR(0, 470, __pyx_L1_error)
  __pyx_type_5freud_6_freud_TransOrderParameter.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_TransOrderParameter.tp_dictoffset && __pyx_type_5freud_6_freud_TransOrderParameter.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_TransOrderParameter.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "TransOrderParameter", (PyObject *)&__pyx_type_5freud_6_freud_TransOrderParameter) < 0) __PYX_ERR(0, 470, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_TransOrderParameter) < 0) __PYX_ERR(0, 470, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_TransOrderParameter = &__pyx_type_5freud_6_freud_TransOrderParameter;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_LocalQl) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  __pyx_type_5freud_6_freud_LocalQl.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_LocalQl.tp_dictoffset && __pyx_type_5freud_6_freud_LocalQl.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_LocalQl.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "LocalQl", (PyObject *)&__pyx_type_5freud_6_freud_LocalQl) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_LocalQl) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_LocalQl = &__pyx_type_5freud_6_freud_LocalQl;
  __pyx_type_5freud_6_freud_LocalQlNear.tp_base = __pyx_ptype_5freud_6_freud_LocalQl;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_LocalQlNear) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
  __pyx_type_5freud_6_freud_LocalQlNear.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_LocalQlNear.tp_dictoffset && __pyx_type_5freud_6_freud_LocalQlNear.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_LocalQlNear.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "LocalQlNear", (PyObject *)&__pyx_type_5freud_6_freud_LocalQlNear) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_LocalQlNear) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_LocalQlNear = &__pyx_type_5freud_6_freud_LocalQlNear;
  __pyx_type_5freud_6_freud_LocalWl.tp_base = __pyx_ptype_5freud_6_freud_LocalQl;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_LocalWl) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
  __pyx_type_5freud_6_freud_LocalWl.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LocalWl", (PyObject *)&__pyx_type_5freud_6_freud_LocalWl) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_LocalWl) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_LocalWl = &__pyx_type_5freud_6_freud_LocalWl;
  __pyx_type_5freud_6_freud_LocalWlNear.tp_base = __pyx_ptype_5freud_6_freud_LocalWl;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_LocalWlNear) < 0) __PYX_ERR(0, 1204, __pyx_L1_error)
  __pyx_type_5freud_6_freud_LocalWlNear.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_LocalWlNear.tp_dictoffset && __pyx_type_5freud_6_freud_LocalWlNear.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_LocalWlNear.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "LocalWlNear", (PyObject *)&__pyx_type_5freud_6_freud_LocalWlNear) < 0) __PYX_ERR(0, 1204, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_LocalWlNear) < 0) __PYX_ERR(0, 1204, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_LocalWlNear = &__pyx_type_5freud_6_freud_LocalWlNear;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_SolLiq) < 0) __PYX_ERR(0, 1338, __pyx_L1_error)
  __pyx_type_5freud_6_freud_SolLiq.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_SolLiq.tp_dictoffset && __pyx_type_5freud_6_freud_SolLiq.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_SolLiq.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "SolLiq", (PyObject *)&__pyx_type_5freud_6_freud_SolLiq) < 0) __PYX_ERR(0, 1338, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_SolLiq) < 0) __PYX_ERR(0, 1338, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_SolLiq = &__pyx_type_5freud_6_freud_SolLiq;
  __pyx_type_5freud_6_freud_SolLiqNear.tp_base = __pyx_ptype_5freud_6_freud_SolLiq;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_SolLiqNear) < 0) __PYX_ERR(0, 1653, __pyx_L1_error)
  __pyx_type_5freud_6_freud_SolLiqNear.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_SolLiqNear.tp_dictoffset && __pyx_type_5freud_6_freud_SolLiqNear.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_SolLiqNear.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "SolLiqNear", (PyObject *)&__pyx_type_5freud_6_freud_SolLiqNear) < 0) __PYX_ERR(0, 1653, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_SolLiqNear) < 0) __PYX_ERR(0, 1653, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_SolLiqNear = &__pyx_type_5freud_6_freud_SolLiqNear;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_BondOrder) < 0) __PYX_ERR(1, 24, __pyx_L1_error)
  __pyx_type_5freud_6_freud_BondOrder.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_BondOrder.tp_dictoffset && __pyx_type_5freud_6_freud_BondOrder.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_BondOrder.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "BondOrder", (PyObject *)&__pyx_type_5freud_6_freud_BondOrder) < 0) __PYX_ERR(1, 24, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_BondOrder) < 0) __PYX_ERR(1, 24, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_BondOrder = &__pyx_type_5freud_6_freud_BondOrder;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_LocalDescriptors) < 0) __PYX_ERR(1, 324, __pyx_L1_error)
  __pyx_type_5freud_6_freud_LocalDescriptors.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_LocalDescriptors.tp_dictoffset && __pyx_type_5freud_6_freud_LocalDescriptors.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_LocalDescriptors.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "LocalDescriptors", (PyObject *)&__pyx_type_5freud_6_freud_LocalDescriptors) < 0) __PYX_ERR(1, 324, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_LocalDescriptors) < 0) __PYX_ERR(1, 324, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_LocalDescriptors = &__pyx_type_5freud_6_freud_LocalDescriptors;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_MatchEnv) < 0) __PYX_ERR(1, 592, __pyx_L1_error)
  __pyx_type_5freud_6_freud_MatchEnv.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_MatchEnv.tp_dictoffset && __pyx_type_5freud_6_freud_MatchEnv.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_MatchEnv.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "MatchEnv", (PyObject *)&__pyx_type_5freud_6_freud_MatchEnv) < 0) __PYX_ERR(1, 592, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_MatchEnv) < 0) __PYX_ERR(1, 592, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_MatchEnv = &__pyx_type_5freud_6_freud_MatchEnv;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_Pairing2D) < 0) __PYX_ERR(1, 1032, __pyx_L1_error)
  __pyx_type_5freud_6_freud_Pairing2D.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_Pairing2D.tp_dictoffset && __pyx_type_5freud_6_freud_Pairing2D.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_Pairing2D.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "Pairing2D", (PyObject *)&__pyx_type_5freud_6_freud_Pairing2D) < 0) __PYX_ERR(1, 1032, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_Pairing2D) < 0) __PYX_ERR(1, 1032, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_Pairing2D = &__pyx_type_5freud_6_freud_Pairing2D;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_AngularSeparation) < 0) __PYX_ERR(1, 1171, __pyx_L1_error)
  __pyx_type_5freud_6_freud_AngularSeparation.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_AngularSeparation.tp_dictoffset && __pyx_type_5freud_6_freud_AngularSeparation.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_AngularSeparation.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "AngularSeparation", (PyObject *)&__pyx_type_5freud_6_freud_AngularSeparation) < 0) __PYX_ERR(1, 1171, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_AngularSeparation) < 0) __PYX_ERR(1, 1171, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_AngularSeparation = &__pyx_type_5freud_6_freud_AngularSeparation;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_Cluster) < 0) __PYX_ERR(3, 17, __pyx_L1_error)
  __pyx_type_5freud_6_freud_Cluster.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_Cluster.tp_dictoffset && __pyx_type_5freud_6_freud_Cluster.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_Cluster.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "Cluster", (PyObject *)&__pyx_type_5freud_6_freud_Cluster) < 0) __PYX_ERR(3, 17, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_Cluster) < 0) __PYX_ERR(3, 17, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_Cluster = &__pyx_type_5freud_6_freud_Cluster;
  if (PyType_Ready(&__pyx_type_5freud_6_freud_ClusterProperties) < 0) __PYX_ERR(3, 205, __pyx_L1_error)
  __pyx_type_5freud_6_freud_ClusterProperties.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5freud_6_freud_ClusterProperties.tp_dictoffset && __pyx_type_5freud_6_freud_ClusterProperties.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5freud_6_freud_ClusterProperties.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "ClusterProperties", (PyObject *)&__pyx_type_5freud_6_freud_ClusterProperties) < 0) __PYX_ERR(3, 205, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5freud_6_freud_ClusterProperties) < 0) __PYX_ERR(3, 205, __pyx_L1_error)
  __pyx_ptype_5freud_6_freud_ClusterProperties = &__pyx_type_5freud_6_freud_ClusterProperties;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_ptype_5freud_3box_Box = __Pyx_ImportType("freud.box", "Box", sizeof(struct __pyx_obj_5freud_3box_Box), 1); if (unlikely(!__pyx_ptype_5freud_3box_Box)) __PYX_ERR(6, 6, __pyx_L1_error)
  __pyx_ptype_5freud_8locality_NeighborList = __Pyx_ImportType("freud.locality", "NeighborList", sizeof(struct __pyx_obj_5freud_8locality_NeighborList), 1); if (unlikely(!__pyx_ptype_5freud_8locality_NeighborList)) __PYX_ERR(7, 6, __pyx_L1_error)
  __pyx_vtabptr_5freud_8locality_NeighborList = (struct __pyx_vtabstruct_5freud_8locality_NeighborList*)__Pyx_GetVtable(__pyx_ptype_5freud_8locality_NeighborList->tp_dict); if (unlikely(!__pyx_vtabptr_5freud_8locality_NeighborList)) __PYX_ERR(7, 6, __pyx_L1_error)
  __pyx_ptype_5freud_8locality_IteratorLinkCell = __Pyx_ImportType("freud.locality", "IteratorLinkCell", sizeof(struct __pyx_obj_5freud_8locality_IteratorLinkCell), 1); if (unlikely(!__pyx_ptype_5freud_8locality_IteratorLinkCell)) __PYX_ERR(7, 15, __pyx_L1_error)
  __pyx_vtabptr_5freud_8locality_IteratorLinkCell = (struct __pyx_vtabstruct_5freud_8locality_IteratorLinkCell*)__Pyx_GetVtable(__pyx_ptype_5freud_8locality_IteratorLinkCell->tp_dict); if (unlikely(!__pyx_vtabptr_5freud_8locality_IteratorLinkCell)) __PYX_ERR(7, 15, __pyx_L1_error)
  __pyx_ptype_5freud_8locality_LinkCell = __Pyx_ImportType("freud.locality", "LinkCell", sizeof(struct __pyx_obj_5freud_8locality_LinkCell), 1); if (unlikely(!__pyx_ptype_5freud_8locality_LinkCell)) __PYX_ERR(7, 20, __pyx_L1_error)
  __pyx_ptype_5freud_8locality_NearestNeighbors = __Pyx_ImportType("freud.locality", "NearestNeighbors", sizeof(struct __pyx_obj_5freud_8locality_NearestNeighbors), 1); if (unlikely(!__pyx_ptype_5freud_8locality_NearestNeighbors)) __PYX_ERR(7, 24, __pyx_L1_error)
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(8, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(4, 164, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(4, 186, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(4, 190, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(4, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(4, 872, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("freud.box"); if (!__pyx_t_1) __PYX_ERR(5, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "BoxFromCPP", (void (**)(void))&__pyx_f_5freud_3box_BoxFromCPP, "PyObject *(freud::box::Box const &)") < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((optimize("Os")))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_freud(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_freud(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__freud(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__freud(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec__freud(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__freud(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(5, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_freud", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(5, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(5, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(5, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_freud___freud) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(5, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "freud._freud")) {
      if (unlikely(PyDict_SetItemString(modules, "freud._freud", __pyx_m) < 0)) __PYX_ERR(5, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif

  /* "freud/_freud.pyx":10
 * from locality cimport (NeighborList, IteratorLinkCell, LinkCell, # noqa
 *                        NearestNeighbors)
 * from locality import make_default_nlist, make_default_nlist_nn             # <<<<<<<<<<<<<<
 * 
 * include "order.pxi"
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_make_default_nlist);
  __Pyx_GIVEREF(__pyx_n_s_make_default_nlist);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_make_default_nlist);
  __Pyx_INCREF(__pyx_n_s_make_default_nlist_nn);
  __Pyx_GIVEREF(__pyx_n_s_make_default_nlist_nn);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_make_default_nlist_nn);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_locality, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_make_default_nlist); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_make_default_nlist, __pyx_t_1) < 0) __PYX_ERR(5, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_make_default_nlist_nn); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_make_default_nlist_nn, __pyx_t_1) < 0) __PYX_ERR(5, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":4
 * # This file is from the freud project, released under the BSD 3-Clause License.
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * import time
 * from freud.util._VectorMath cimport vec3
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":5
 * 
 * import numpy as np
 * import time             # <<<<<<<<<<<<<<
 * from freud.util._VectorMath cimport vec3
 * from freud.util._VectorMath cimport quat
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_time, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/order.pxi":20
 * # numpy must be initialized. When using numpy from C or Cython you must
 * # _always_ do that, or you will have segfaults
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * cdef class CubaticOrderParameter:
 */
  __pyx_t_3 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 20, __pyx_L1_error)

  /* "freud/order.pxi":371
 *     cdef rmax
 * 
 *     def __cinit__(self, rmax, k=int(6), n=int(0)):             # <<<<<<<<<<<<<<
 *         self.thisptr = new order.HexOrderParameter(rmax, k, n)
 *         self.rmax = rmax
 */
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_int_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__11 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_int_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__12 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "freud/order.pxi":1091
 * 
 *     # List of Ql attributes to remove
 *     delattrs = ['Ql', 'getQl',             # <<<<<<<<<<<<<<
 *                 'ave_Ql', 'getAveQl',
 *                 'norm_Ql', 'getQlNorm',
 */
  __pyx_t_2 = PyList_New(8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Ql);
  __Pyx_GIVEREF(__pyx_n_s_Ql);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Ql);
  __Pyx_INCREF(__pyx_n_s_getQl);
  __Pyx_GIVEREF(__pyx_n_s_getQl);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_getQl);
  __Pyx_INCREF(__pyx_n_s_ave_Ql);
  __Pyx_GIVEREF(__pyx_n_s_ave_Ql);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_ave_Ql);
  __Pyx_INCREF(__pyx_n_s_getAveQl);
  __Pyx_GIVEREF(__pyx_n_s_getAveQl);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_getAveQl);
  __Pyx_INCREF(__pyx_n_s_norm_Ql);
  __Pyx_GIVEREF(__pyx_n_s_norm_Ql);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_norm_Ql);
  __Pyx_INCREF(__pyx_n_s_getQlNorm);
  __Pyx_GIVEREF(__pyx_n_s_getQlNorm);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_getQlNorm);
  __Pyx_INCREF(__pyx_n_s_ave_norm_Ql);
  __Pyx_GIVEREF(__pyx_n_s_ave_norm_Ql);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_s_ave_norm_Ql);
  __Pyx_INCREF(__pyx_n_s_getQlAveNorm);
  __Pyx_GIVEREF(__pyx_n_s_getQlAveNorm);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_s_getQlAveNorm);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5freud_6_freud_LocalWl->tp_dict, __pyx_n_s_delattrs, __pyx_t_2) < 0) __PYX_ERR(0, 1091, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5freud_6_freud_LocalWl);

  /* "freud/environment.pxi":4
 * # This file is from the freud project, released under the BSD 3-Clause License.
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * import time
 * import warnings
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":5
 * 
 * import numpy as np
 * import time             # <<<<<<<<<<<<<<
 * import warnings
 * from .errors import FreudDeprecationWarning
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_time, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_2) < 0) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":6
 * import numpy as np
 * import time
 * import warnings             # <<<<<<<<<<<<<<
 * from .errors import FreudDeprecationWarning
 * from freud.util._VectorMath cimport vec3
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_2) < 0) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":7
 * import time
 * import warnings
 * from .errors import FreudDeprecationWarning             # <<<<<<<<<<<<<<
 * from freud.util._VectorMath cimport vec3
 * from freud.util._VectorMath cimport quat
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_FreudDeprecationWarning);
  __Pyx_GIVEREF(__pyx_n_s_FreudDeprecationWarning);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_FreudDeprecationWarning);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_errors, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_FreudDeprecationWarning); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FreudDeprecationWarning, __pyx_t_2) < 0) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/environment.pxi":22
 * # numpy must be initialized. When using numpy from C or Cython you must
 * # _always_ do that, or you will have segfaults
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * cdef class BondOrder:
 */
  __pyx_t_3 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 22, __pyx_L1_error)

  /* "freud/environment.pxi":365
 *     cdef rmax
 * 
 *     known_modes = {'neighborhood': environment.LocalNeighborhood,             # <<<<<<<<<<<<<<
 *                    'global': environment.Global,
 *                    'particle_local': environment.ParticleLocal}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_freud_3a__3a_environment_3a__3a_LocalDescriptorOrientation(freud::environment::LocalNeighborhood); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_neighborhood, __pyx_t_2) < 0) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":366
 * 
 *     known_modes = {'neighborhood': environment.LocalNeighborhood,
 *                    'global': environment.Global,             # <<<<<<<<<<<<<<
 *                    'particle_local': environment.ParticleLocal}
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_freud_3a__3a_environment_3a__3a_LocalDescriptorOrientation(freud::environment::Global); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_global, __pyx_t_2) < 0) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "freud/environment.pxi":367
 *     known_modes = {'neighborhood': environment.LocalNeighborhood,
 *                    'global': environment.Global,
 *                    'particle_local': environment.ParticleLocal}             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, num_neighbors, lmax, rmax, negative_m=True):
 */
  __pyx_t_2 = __Pyx_PyInt_From_freud_3a__3a_environment_3a__3a_LocalDescriptorOrientation(freud::environment::ParticleLocal); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_particle_local, __pyx_t_2) < 0) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5freud_6_freud_LocalDescriptors->tp_dict, __pyx_n_s_known_modes, __pyx_t_1) < 0) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5freud_6_freud_LocalDescriptors);

  /* "freud/cluster.pxi":4
 * # This file is from the freud project, released under the BSD 3-Clause License.
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * import freud.common
 * from freud.util._VectorMath cimport vec3
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/cluster.pxi":5
 * 
 * import numpy as np
 * import freud.common             # <<<<<<<<<<<<<<
 * from freud.util._VectorMath cimport vec3
 * from libcpp.vector cimport vector
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_freud_common, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_freud, __pyx_t_1) < 0) __PYX_ERR(3, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "freud/cluster.pxi":15
 * # numpy must be initialized. When using numpy from C or Cython you must
 * # _always_ do that, or you will have segfaults
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * cdef class Cluster:
 */
  __pyx_t_3 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(3, 15, __pyx_L1_error)

  /* "freud/_freud.pyx":1
 * # Copyright (c) 2010-2018 The Regents of the University of Michigan             # <<<<<<<<<<<<<<
 * # This file is from the freud project, released under the BSD 3-Clause License.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_unsigned_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_unsigned_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init freud._freud", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init freud._freud");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
    #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
    #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = local_type;
    tstate->exc_state.exc_value = local_value;
    tstate->exc_state.exc_traceback = local_tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = *type;
    tstate->exc_state.exc_value = *value;
    tstate->exc_state.exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* SaveResetException */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A3
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* ExtTypeTest */
        static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* IsLittleEndian */
        static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
        static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
          static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((unsigned)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferFallbackError */
          static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* GetItemInt */
          static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* WriteUnraisableException */
          static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ArgTypeTest */
          static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* BytesEquals */
          static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
          static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* ObjectGetItem */
          #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* BufferIndexError */
          static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* DictGetItem */
          #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseTooManyValuesToUnpack */
          static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
          static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
          static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* PyErrExceptionMatches */
          #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObject_GenericGetAttrNoDict */
          #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
          #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
          static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* GetVTable */
          static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
          static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
          #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
          static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
          #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* Declarations */
          #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
          #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


          /* CIntFromPyVerify */
          #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_freud_3a__3a_environment_3a__3a_LocalDescriptorOrientation(freud::environment::LocalDescriptorOrientation value) {
    const freud::environment::LocalDescriptorOrientation neg_one = (freud::environment::LocalDescriptorOrientation) -1, const_zero = (freud::environment::LocalDescriptorOrientation) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(freud::environment::LocalDescriptorOrientation) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(freud::environment::LocalDescriptorOrientation) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(freud::environment::LocalDescriptorOrientation) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(freud::environment::LocalDescriptorOrientation) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(freud::environment::LocalDescriptorOrientation) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(freud::environment::LocalDescriptorOrientation),
                                     little, !is_unsigned);
    }
}

/* Print */
          #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* Declarations */
          #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
          #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
          static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* PrintOne */
          #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
          static CYTHON_INLINE freud::environment::LocalDescriptorOrientation __Pyx_PyInt_As_freud_3a__3a_environment_3a__3a_LocalDescriptorOrientation(PyObject *x) {
    const freud::environment::LocalDescriptorOrientation neg_one = (freud::environment::LocalDescriptorOrientation) -1, const_zero = (freud::environment::LocalDescriptorOrientation) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(freud::environment::LocalDescriptorOrientation) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (freud::environment::LocalDescriptorOrientation) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (freud::environment::LocalDescriptorOrientation) 0;
                case  1: __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, digit, digits[0])
                case 2:
                    if (8 * sizeof(freud::environment::LocalDescriptorOrientation) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(freud::environment::LocalDescriptorOrientation) >= 2 * PyLong_SHIFT) {
                            return (freud::environment::LocalDescriptorOrientation) (((((freud::environment::LocalDescriptorOrientation)digits[1]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(freud::environment::LocalDescriptorOrientation) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(freud::environment::LocalDescriptorOrientation) >= 3 * PyLong_SHIFT) {
                            return (freud::environment::LocalDescriptorOrientation) (((((((freud::environment::LocalDescriptorOrientation)digits[2]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[1]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(freud::environment::LocalDescriptorOrientation) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(freud::environment::LocalDescriptorOrientation) >= 4 * PyLong_SHIFT) {
                            return (freud::environment::LocalDescriptorOrientation) (((((((((freud::environment::LocalDescriptorOrientation)digits[3]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[2]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[1]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (freud::environment::LocalDescriptorOrientation) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(freud::environment::LocalDescriptorOrientation) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(freud::environment::LocalDescriptorOrientation, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(freud::environment::LocalDescriptorOrientation) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(freud::environment::LocalDescriptorOrientation, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (freud::environment::LocalDescriptorOrientation) 0;
                case -1: __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(freud::environment::LocalDescriptorOrientation) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(freud::environment::LocalDescriptorOrientation) - 1 > 2 * PyLong_SHIFT) {
                            return (freud::environment::LocalDescriptorOrientation) (((freud::environment::LocalDescriptorOrientation)-1)*(((((freud::environment::LocalDescriptorOrientation)digits[1]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(freud::environment::LocalDescriptorOrientation) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(freud::environment::LocalDescriptorOrientation) - 1 > 2 * PyLong_SHIFT) {
                            return (freud::environment::LocalDescriptorOrientation) ((((((freud::environment::LocalDescriptorOrientation)digits[1]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(freud::environment::LocalDescriptorOrientation) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(freud::environment::LocalDescriptorOrientation) - 1 > 3 * PyLong_SHIFT) {
                            return (freud::environment::LocalDescriptorOrientation) (((freud::environment::LocalDescriptorOrientation)-1)*(((((((freud::environment::LocalDescriptorOrientation)digits[2]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[1]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(freud::environment::LocalDescriptorOrientation) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(freud::environment::LocalDescriptorOrientation) - 1 > 3 * PyLong_SHIFT) {
                            return (freud::environment::LocalDescriptorOrientation) ((((((((freud::environment::LocalDescriptorOrientation)digits[2]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[1]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(freud::environment::LocalDescriptorOrientation) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(freud::environment::LocalDescriptorOrientation) - 1 > 4 * PyLong_SHIFT) {
                            return (freud::environment::LocalDescriptorOrientation) (((freud::environment::LocalDescriptorOrientation)-1)*(((((((((freud::environment::LocalDescriptorOrientation)digits[3]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[2]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[1]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(freud::environment::LocalDescriptorOrientation) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(freud::environment::LocalDescriptorOrientation, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(freud::environment::LocalDescriptorOrientation) - 1 > 4 * PyLong_SHIFT) {
                            return (freud::environment::LocalDescriptorOrientation) ((((((((((freud::environment::LocalDescriptorOrientation)digits[3]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[2]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[1]) << PyLong_SHIFT) | (freud::environment::LocalDescriptorOrientation)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(freud::environment::LocalDescriptorOrientation) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(freud::environment::LocalDescriptorOrientation, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(freud::environment::LocalDescriptorOrientation) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(freud::environment::LocalDescriptorOrientation, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            freud::environment::LocalDescriptorOrientation val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (freud::environment::LocalDescriptorOrientation) -1;
        }
    } else {
        freud::environment::LocalDescriptorOrientation val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (freud::environment::LocalDescriptorOrientation) -1;
        val = __Pyx_PyInt_As_freud_3a__3a_environment_3a__3a_LocalDescriptorOrientation(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to freud::environment::LocalDescriptorOrientation");
    return (freud::environment::LocalDescriptorOrientation) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to freud::environment::LocalDescriptorOrientation");
    return (freud::environment::LocalDescriptorOrientation) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
          #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
          static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
          #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
          #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FunctionImport */
          #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
          static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
